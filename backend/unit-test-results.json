{"numFailedTestSuites":16,"numFailedTests":22,"numPassedTestSuites":15,"numPassedTests":291,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":12,"numTodoTests":0,"numTotalTestSuites":31,"numTotalTests":313,"openHandles":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1751068728696,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["LocationService","createLocation"],"duration":1,"failureDetails":[{}],"failureMessages":["Error: Unmocked Prisma method called. Make sure to mock this method in your test.\n    at Proxy.fallbackMockImplementation (/home/topher/repos/asset-manager/backend/src/lib/__mocks__/prisma.ts:8:11)\n    at /home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:397:39\n    at Proxy.<anonymous> (/home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:404:13)\n    at Proxy.mockConstructor (/home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:148:19)\n    at LocationService.createLocation (/home/topher/repos/asset-manager/backend/src/services/location.service.ts:57:19)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:41:44)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService createLocation should create a root location successfully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should create a root location successfully"},{"ancestorTitles":["LocationService","createLocation"],"duration":4,"failureDetails":[{}],"failureMessages":["Error: Unmocked Prisma method called. Make sure to mock this method in your test.\n    at Proxy.fallbackMockImplementation (/home/topher/repos/asset-manager/backend/src/lib/__mocks__/prisma.ts:8:11)\n    at /home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:397:39\n    at Proxy.<anonymous> (/home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:404:13)\n    at Proxy.mockConstructor (/home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:148:19)\n    at LocationService.createLocation (/home/topher/repos/asset-manager/backend/src/services/location.service.ts:57:19)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:73:44)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService createLocation should create a child location with correct path","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should create a child location with correct path"},{"ancestorTitles":["LocationService","createLocation"],"duration":16,"failureDetails":[{"matcherResult":{"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:81:36)","pass":false},"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:81:36)"}],"failureMessages":["Error: expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:81:36)\n    at Object.toThrow (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:81:72)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService createLocation should throw error if organization not found","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw error if organization not found"},{"ancestorTitles":["LocationService","createLocation"],"duration":4,"failureDetails":[{"matcherResult":{"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:91:36)","pass":false},"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:91:36)"}],"failureMessages":["Error: expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:91:36)\n    at Object.toThrow (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:91:82)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService createLocation should throw error if parent not found","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw error if parent not found"},{"ancestorTitles":["LocationService","createLocation"],"duration":12,"failureDetails":[{"matcherResult":{"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:102:36)","pass":false},"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:102:36)"}],"failureMessages":["Error: expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:102:36)\n    at Object.toThrow (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:102:72)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService createLocation should throw error if name already exists in same parent","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw error if name already exists in same parent"},{"ancestorTitles":["LocationService","createLocation"],"duration":4,"failureDetails":[{"matcherResult":{"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: AppError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:116:36)","pass":false},"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: AppError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:116:36)"}],"failureMessages":["Error: expect(received).rejects.toThrow(expected)\n\nExpected constructor: AppError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:116:36)\n    at Object.toThrow (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:116:82)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService createLocation should throw error if parent belongs to different organization","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw error if parent belongs to different organization"},{"ancestorTitles":["LocationService","moveLocation"],"duration":11,"failureDetails":[{"matcherResult":{"expected":"new-parent.child","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"new-parent.child\"\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"new-parent.child\"\nReceived: undefined\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:154:27)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"LocationService moveLocation should move location successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should move location successfully"},{"ancestorTitles":["LocationService","moveLocation"],"duration":2,"failureDetails":[{"message":"expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: [{\"id\": \"loc-123\", \"organizationId\": \"org-123\", \"parentId\": \"root\", \"path\": \"new-parent.child\"}]"}],"failureMessages":["Error: expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: [{\"id\": \"loc-123\", \"organizationId\": \"org-123\", \"parentId\": \"root\", \"path\": \"new-parent.child\"}]\n    at expect (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:113:15)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:168:13)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService moveLocation should prevent circular dependency","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should prevent circular dependency"},{"ancestorTitles":["LocationService","moveLocation"],"duration":3,"failureDetails":[{"message":"expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: [{\"id\": \"loc-123\", \"organizationId\": \"org-123\", \"parentId\": \"root\", \"path\": \"new-parent.child\"}]"}],"failureMessages":["Error: expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: [{\"id\": \"loc-123\", \"organizationId\": \"org-123\", \"parentId\": \"root\", \"path\": \"new-parent.child\"}]\n    at expect (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:113:15)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:184:13)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService moveLocation should prevent cross-organization move","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should prevent cross-organization move"},{"ancestorTitles":["LocationService","moveLocation"],"duration":2,"failureDetails":[{"matcherResult":{"expected":"loc-123","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"loc-123\"\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"loc-123\"\nReceived: undefined\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:198:27)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"LocationService moveLocation should handle move to root (null parent)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle move to root (null parent)"},{"ancestorTitles":["LocationService","deleteLocation"],"duration":10,"failureDetails":[{"statusCode":404,"code":"NOT_FOUND","name":"NotFoundError"}],"failureMessages":["NotFoundError: Location not found\n    at LocationService.deleteLocation (/home/topher/repos/asset-manager/backend/src/services/location.service.ts:353:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:211:7)"],"fullName":"LocationService deleteLocation should delete location successfully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should delete location successfully"},{"ancestorTitles":["LocationService","deleteLocation"],"duration":4,"failureDetails":[{"matcherResult":{"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: NotFoundError\n\nReceived message: \"Location not found\"\n\n      351 |     const location = await this.getLocationById(id, organizationId);\n      352 |     if (!location) {\n    > 353 |       throw new NotFoundError('Location');\n          |             ^\n      354 |     }\n      355 |\n      356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:224:7)","pass":false},"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: NotFoundError\n\nReceived message: \"Location not found\"\n\n      351 |     const location = await this.getLocationById(id, organizationId);\n      352 |     if (!location) {\n    > 353 |       throw new NotFoundError('Location');\n          |             ^\n      354 |     }\n      355 |\n      356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:224:7)"}],"failureMessages":["Error: expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: NotFoundError\n\nReceived message: \"Location not found\"\n\n      351 |     const location = await this.getLocationById(id, organizationId);\n      352 |     if (!location) {\n    > 353 |       throw new NotFoundError('Location');\n          |             ^\n      354 |     }\n      355 |\n      356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:224:7)\n    at Object.toThrow (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:226:17)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService deleteLocation should throw error if location has children","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw error if location has children"},{"ancestorTitles":["LocationService","deleteLocation"],"duration":11,"failureDetails":[{"matcherResult":{"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: NotFoundError\n\nReceived message: \"Location not found\"\n\n      351 |     const location = await this.getLocationById(id, organizationId);\n      352 |     if (!location) {\n    > 353 |       throw new NotFoundError('Location');\n          |             ^\n      354 |     }\n      355 |\n      356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:236:7)","pass":false},"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: NotFoundError\n\nReceived message: \"Location not found\"\n\n      351 |     const location = await this.getLocationById(id, organizationId);\n      352 |     if (!location) {\n    > 353 |       throw new NotFoundError('Location');\n          |             ^\n      354 |     }\n      355 |\n      356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:236:7)"}],"failureMessages":["Error: expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: NotFoundError\n\nReceived message: \"Location not found\"\n\n      351 |     const location = await this.getLocationById(id, organizationId);\n      352 |     if (!location) {\n    > 353 |       throw new NotFoundError('Location');\n          |             ^\n      354 |     }\n      355 |\n      356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:236:7)\n    at Object.toThrow (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:238:17)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService deleteLocation should throw error if location has assets","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw error if location has assets"},{"ancestorTitles":["LocationService","findByOrganization"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"LocationService findByOrganization should return tree structure of locations","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return tree structure of locations"},{"ancestorTitles":["LocationService","findSubtree"],"duration":2,"failureDetails":[{"statusCode":404,"code":"NOT_FOUND","name":"NotFoundError"}],"failureMessages":["NotFoundError: Location not found\n    at LocationService.findSubtree (/home/topher/repos/asset-manager/backend/src/services/location.service.ts:448:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:278:22)"],"fullName":"LocationService findSubtree should return all descendants","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return all descendants"},{"ancestorTitles":["LocationService","findAncestors"],"duration":11,"failureDetails":[{"statusCode":404,"code":"NOT_FOUND","name":"NotFoundError"}],"failureMessages":["NotFoundError: Location not found\n    at LocationService.findAncestors (/home/topher/repos/asset-manager/backend/src/services/location.service.ts:478:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:299:22)"],"fullName":"LocationService findAncestors should return ancestors in correct order","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return ancestors in correct order"},{"ancestorTitles":["LocationService","findAncestors"],"duration":11,"failureDetails":[{"statusCode":404,"code":"NOT_FOUND","name":"NotFoundError"}],"failureMessages":["NotFoundError: Location not found\n    at LocationService.findAncestors (/home/topher/repos/asset-manager/backend/src/services/location.service.ts:478:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:313:22)"],"fullName":"LocationService findAncestors should return empty array for root location","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return empty array for root location"},{"ancestorTitles":["LocationService","searchByName"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"LocationService searchByName should search locations by name","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should search locations by name"}],"endTime":1751068736969,"message":"  ● LocationService › createLocation › should create a root location successfully\n\n    Unmocked Prisma method called. Make sure to mock this method in your test.\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:41:44)\n\n  ● LocationService › createLocation › should create a child location with correct path\n\n    Unmocked Prisma method called. Make sure to mock this method in your test.\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:73:44)\n\n  ● LocationService › createLocation › should throw error if organization not found\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected constructor: NotFoundError\n    Received constructor: Error\n\n    Received message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n           6 | export const prisma = mockDeep<PrismaClient>({\n           7 |   fallbackMockImplementation: () => {\n        >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n             |           ^\n           9 |   },\n          10 | }) as DeepMockProxy<PrismaClient>;\n          11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:81:36)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:81:72)\n\n  ● LocationService › createLocation › should throw error if parent not found\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected constructor: NotFoundError\n    Received constructor: Error\n\n    Received message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n           6 | export const prisma = mockDeep<PrismaClient>({\n           7 |   fallbackMockImplementation: () => {\n        >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n             |           ^\n           9 |   },\n          10 | }) as DeepMockProxy<PrismaClient>;\n          11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:91:36)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:91:82)\n\n  ● LocationService › createLocation › should throw error if name already exists in same parent\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected constructor: ConflictError\n    Received constructor: Error\n\n    Received message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n           6 | export const prisma = mockDeep<PrismaClient>({\n           7 |   fallbackMockImplementation: () => {\n        >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n             |           ^\n           9 |   },\n          10 | }) as DeepMockProxy<PrismaClient>;\n          11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:102:36)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:102:72)\n\n  ● LocationService › createLocation › should throw error if parent belongs to different organization\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected constructor: AppError\n    Received constructor: Error\n\n    Received message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n           6 | export const prisma = mockDeep<PrismaClient>({\n           7 |   fallbackMockImplementation: () => {\n        >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n             |           ^\n           9 |   },\n          10 | }) as DeepMockProxy<PrismaClient>;\n          11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:116:36)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:116:82)\n\n  ● LocationService › moveLocation › should move location successfully\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"new-parent.child\"\n    Received: undefined\n\n      152 |\n      153 |       expect(prismaMock.$transaction).toHaveBeenCalled();\n    > 154 |       expect(result.path).toBe('new-parent.child');\n          |                           ^\n      155 |     });\n      156 |\n      157 |     it('should prevent circular dependency', async () => {\n\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:154:27)\n\n  ● LocationService › moveLocation › should prevent circular dependency\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: [{\"id\": \"loc-123\", \"organizationId\": \"org-123\", \"parentId\": \"root\", \"path\": \"new-parent.child\"}]\n\n      166 |         .mockResolvedValueOnce(circularParent as any);\n      167 |\n    > 168 |       await expect(\n          |             ^\n      169 |         locationService.moveLocation(mockLocationId, 'circular', mockOrganizationId),\n      170 |       ).rejects.toThrow(AppError);\n      171 |     });\n\n      at expect (../node_modules/jest-circus/node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:168:13)\n\n  ● LocationService › moveLocation › should prevent cross-organization move\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: [{\"id\": \"loc-123\", \"organizationId\": \"org-123\", \"parentId\": \"root\", \"path\": \"new-parent.child\"}]\n\n      182 |         .mockResolvedValueOnce(differentOrgParent as any);\n      183 |\n    > 184 |       await expect(\n          |             ^\n      185 |         locationService.moveLocation(mockLocationId, 'different-parent', mockOrganizationId),\n      186 |       ).rejects.toThrow(AppError);\n      187 |     });\n\n      at expect (../node_modules/jest-circus/node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:184:13)\n\n  ● LocationService › moveLocation › should handle move to root (null parent)\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"loc-123\"\n    Received: undefined\n\n      196 |       const result = await locationService.moveLocation(mockLocationId, null, mockOrganizationId);\n      197 |\n    > 198 |       expect(result.path).toBe(mockLocationId);\n          |                           ^\n      199 |     });\n      200 |   });\n      201 |\n\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:198:27)\n\n  ● LocationService › deleteLocation › should delete location successfully\n\n    NotFoundError: Location not found\n\n      351 |     const location = await this.getLocationById(id, organizationId);\n      352 |     if (!location) {\n    > 353 |       throw new NotFoundError('Location');\n          |             ^\n      354 |     }\n      355 |\n      356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:211:7)\n\n  ● LocationService › deleteLocation › should throw error if location has children\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected constructor: ConflictError\n    Received constructor: NotFoundError\n\n    Received message: \"Location not found\"\n\n          351 |     const location = await this.getLocationById(id, organizationId);\n          352 |     if (!location) {\n        > 353 |       throw new NotFoundError('Location');\n              |             ^\n          354 |     }\n          355 |\n          356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:224:7)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:226:17)\n\n  ● LocationService › deleteLocation › should throw error if location has assets\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected constructor: ConflictError\n    Received constructor: NotFoundError\n\n    Received message: \"Location not found\"\n\n          351 |     const location = await this.getLocationById(id, organizationId);\n          352 |     if (!location) {\n        > 353 |       throw new NotFoundError('Location');\n              |             ^\n          354 |     }\n          355 |\n          356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:236:7)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:238:17)\n\n  ● LocationService › findSubtree › should return all descendants\n\n    NotFoundError: Location not found\n\n      446 |     const location = await this.getLocationById(locationId, organizationId);\n      447 |     if (!location) {\n    > 448 |       throw new NotFoundError('Location');\n          |             ^\n      449 |     }\n      450 |\n      451 |     return prisma.location.findMany({\n\n      at LocationService.findSubtree (src/services/location.service.ts:448:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:278:22)\n\n  ● LocationService › findAncestors › should return ancestors in correct order\n\n    NotFoundError: Location not found\n\n      476 |     const location = await this.getLocationById(locationId, organizationId);\n      477 |     if (!location) {\n    > 478 |       throw new NotFoundError('Location');\n          |             ^\n      479 |     }\n      480 |\n      481 |     // Split path and get all ancestor IDs\n\n      at LocationService.findAncestors (src/services/location.service.ts:478:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:299:22)\n\n  ● LocationService › findAncestors › should return empty array for root location\n\n    NotFoundError: Location not found\n\n      476 |     const location = await this.getLocationById(locationId, organizationId);\n      477 |     if (!location) {\n    > 478 |       throw new NotFoundError('Location');\n          |             ^\n      479 |     }\n      480 |\n      481 |     // Split path and get all ancestor IDs\n\n      at LocationService.findAncestors (src/services/location.service.ts:478:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:313:22)\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts","startTime":1751068728731,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["AssetTemplateService","createTemplate"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService createTemplate should create template successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create template successfully"},{"ancestorTitles":["AssetTemplateService","createTemplate"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService createTemplate should throw error if organization not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if organization not found"},{"ancestorTitles":["AssetTemplateService","createTemplate"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService createTemplate should throw error if template name already exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if template name already exists"},{"ancestorTitles":["AssetTemplateService","createTemplate"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService createTemplate should throw error for invalid custom field schema","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid custom field schema"},{"ancestorTitles":["AssetTemplateService","createTemplate"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService createTemplate should create template with empty custom fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create template with empty custom fields"},{"ancestorTitles":["AssetTemplateService","updateTemplate"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService updateTemplate should update template successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update template successfully"},{"ancestorTitles":["AssetTemplateService","updateTemplate"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService updateTemplate should throw error if template not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if template not found"},{"ancestorTitles":["AssetTemplateService","updateTemplate"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService updateTemplate should prevent updating custom fields when template is in use","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should prevent updating custom fields when template is in use"},{"ancestorTitles":["AssetTemplateService","updateTemplate"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService updateTemplate should prevent updating category when template is in use","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should prevent updating category when template is in use"},{"ancestorTitles":["AssetTemplateService","updateTemplate"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService updateTemplate should allow updating name when template is in use","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow updating name when template is in use"},{"ancestorTitles":["AssetTemplateService","updateTemplate"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService updateTemplate should prevent duplicate names","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should prevent duplicate names"},{"ancestorTitles":["AssetTemplateService","deleteTemplate"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService deleteTemplate should delete template successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete template successfully"},{"ancestorTitles":["AssetTemplateService","deleteTemplate"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService deleteTemplate should throw error if template not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if template not found"},{"ancestorTitles":["AssetTemplateService","deleteTemplate"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService deleteTemplate should prevent deletion if template is in use","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should prevent deletion if template is in use"},{"ancestorTitles":["AssetTemplateService","cloneTemplate"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService cloneTemplate should clone template successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should clone template successfully"},{"ancestorTitles":["AssetTemplateService","cloneTemplate"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService cloneTemplate should clone with custom name","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should clone with custom name"},{"ancestorTitles":["AssetTemplateService","cloneTemplate"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService cloneTemplate should throw error if original template not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if original template not found"},{"ancestorTitles":["AssetTemplateService","cloneTemplate"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService cloneTemplate should throw error if clone name conflicts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if clone name conflicts"},{"ancestorTitles":["AssetTemplateService","findTemplates"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService findTemplates should return paginated templates","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return paginated templates"},{"ancestorTitles":["AssetTemplateService","findTemplates"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService findTemplates should filter by name","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter by name"},{"ancestorTitles":["AssetTemplateService","findTemplates"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService findTemplates should filter by category","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter by category"},{"ancestorTitles":["AssetTemplateService","findTemplates"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService findTemplates should filter by custom field existence","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter by custom field existence"},{"ancestorTitles":["AssetTemplateService","findTemplates"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService findTemplates should search within custom fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should search within custom fields"},{"ancestorTitles":["AssetTemplateService","findTemplates"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService findTemplates should include inactive templates when requested","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should include inactive templates when requested"},{"ancestorTitles":["AssetTemplateService","getTemplateStats"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService getTemplateStats should return template usage statistics","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return template usage statistics"},{"ancestorTitles":["AssetTemplateService","getTemplateStats"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService getTemplateStats should return zero stats for unused template","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return zero stats for unused template"},{"ancestorTitles":["AssetTemplateService","getTemplateStats"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService getTemplateStats should throw error if template not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if template not found"},{"ancestorTitles":["AssetTemplateService","validateCustomFieldValues"],"duration":12,"failureDetails":[{"statusCode":404,"code":"NOT_FOUND","name":"NotFoundError"}],"failureMessages":["NotFoundError: Asset template not found\n    at AssetTemplateService.validateCustomFieldValues (/home/topher/repos/asset-manager/backend/src/services/asset-template.service.ts:766:13)\n    at async Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/asset-template.service.test.ts:529:22)"],"fullName":"AssetTemplateService validateCustomFieldValues should validate correct values","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should validate correct values"},{"ancestorTitles":["AssetTemplateService","validateCustomFieldValues"],"duration":3,"failureDetails":[{"statusCode":404,"code":"NOT_FOUND","name":"NotFoundError"}],"failureMessages":["NotFoundError: Asset template not found\n    at AssetTemplateService.validateCustomFieldValues (/home/topher/repos/asset-manager/backend/src/services/asset-template.service.ts:766:13)\n    at async Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/asset-template.service.test.ts:546:22)"],"fullName":"AssetTemplateService validateCustomFieldValues should detect validation errors","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should detect validation errors"},{"ancestorTitles":["AssetTemplateService","validateCustomFieldValues"],"duration":12,"failureDetails":[{"statusCode":404,"code":"NOT_FOUND","name":"NotFoundError"}],"failureMessages":["NotFoundError: Asset template not found\n    at AssetTemplateService.validateCustomFieldValues (/home/topher/repos/asset-manager/backend/src/services/asset-template.service.ts:766:13)\n    at async Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/asset-template.service.test.ts:564:22)"],"fullName":"AssetTemplateService validateCustomFieldValues should handle empty schema","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle empty schema"},{"ancestorTitles":["AssetTemplateService","validateCustomFieldValues"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService validateCustomFieldValues should throw error if template not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if template not found"},{"ancestorTitles":["AssetTemplateService","exportTemplates"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService exportTemplates should export templates without organization-specific fields","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should export templates without organization-specific fields"},{"ancestorTitles":["AssetTemplateService","importTemplates"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService importTemplates should import new templates successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should import new templates successfully"},{"ancestorTitles":["AssetTemplateService","importTemplates"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService importTemplates should skip existing templates with skip strategy","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should skip existing templates with skip strategy"},{"ancestorTitles":["AssetTemplateService","importTemplates"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService importTemplates should rename conflicting templates with rename strategy","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should rename conflicting templates with rename strategy"}],"endTime":1751068738329,"message":"  ● AssetTemplateService › validateCustomFieldValues › should validate correct values\n\n    NotFoundError: Asset template not found\n\n      764 |\n      765 |     if (!template) {\n    > 766 |       throw new NotFoundError('Asset template');\n          |             ^\n      767 |     }\n      768 |\n      769 |     const schema = template.customFields as Record<string, unknown>;\n\n      at AssetTemplateService.validateCustomFieldValues (src/services/asset-template.service.ts:766:13)\n      at async Object.<anonymous> (src/test/unit/services/asset-template.service.test.ts:529:22)\n\n  ● AssetTemplateService › validateCustomFieldValues › should detect validation errors\n\n    NotFoundError: Asset template not found\n\n      764 |\n      765 |     if (!template) {\n    > 766 |       throw new NotFoundError('Asset template');\n          |             ^\n      767 |     }\n      768 |\n      769 |     const schema = template.customFields as Record<string, unknown>;\n\n      at AssetTemplateService.validateCustomFieldValues (src/services/asset-template.service.ts:766:13)\n      at async Object.<anonymous> (src/test/unit/services/asset-template.service.test.ts:546:22)\n\n  ● AssetTemplateService › validateCustomFieldValues › should handle empty schema\n\n    NotFoundError: Asset template not found\n\n      764 |\n      765 |     if (!template) {\n    > 766 |       throw new NotFoundError('Asset template');\n          |             ^\n      767 |     }\n      768 |\n      769 |     const schema = template.customFields as Record<string, unknown>;\n\n      at AssetTemplateService.validateCustomFieldValues (src/services/asset-template.service.ts:766:13)\n      at async Object.<anonymous> (src/test/unit/services/asset-template.service.test.ts:564:22)\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/asset-template.service.test.ts","startTime":1751068736973,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["TaskService","createTask"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TaskService createTask should create a task successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create a task successfully"},{"ancestorTitles":["TaskService","createTask"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"TaskService createTask should throw NotFoundError when organization does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundError when organization does not exist"},{"ancestorTitles":["TaskService","createTask"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"TaskService createTask should throw NotFoundError when asset does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundError when asset does not exist"},{"ancestorTitles":["TaskService","createTask"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"TaskService createTask should throw ValidationError when assigned user does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw ValidationError when assigned user does not exist"},{"ancestorTitles":["TaskService","getTaskById"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"TaskService getTaskById should return task with relations","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return task with relations"},{"ancestorTitles":["TaskService","getTaskById"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"TaskService getTaskById should return null when task not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null when task not found"},{"ancestorTitles":["TaskService","updateTask"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"TaskService updateTask should update task successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update task successfully"},{"ancestorTitles":["TaskService","updateTask"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"TaskService updateTask should throw NotFoundError when task does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundError when task does not exist"},{"ancestorTitles":["TaskService","updateTask"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"TaskService updateTask should throw ConflictError for invalid status transition","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw ConflictError for invalid status transition"},{"ancestorTitles":["TaskService","updateTask"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"TaskService updateTask should set completedAt when status changes to DONE","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should set completedAt when status changes to DONE"},{"ancestorTitles":["TaskService","deleteTask"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"TaskService deleteTask should delete task successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete task successfully"},{"ancestorTitles":["TaskService","deleteTask"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"TaskService deleteTask should throw NotFoundError when task does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundError when task does not exist"},{"ancestorTitles":["TaskService","deleteTask"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"TaskService deleteTask should throw ConflictError when trying to delete task with active schedule","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw ConflictError when trying to delete task with active schedule"},{"ancestorTitles":["TaskService","findTasks"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"TaskService findTasks should return paginated tasks with filters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return paginated tasks with filters"},{"ancestorTitles":["TaskService","findTasks"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"TaskService findTasks should apply overdue filter correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should apply overdue filter correctly"},{"ancestorTitles":["TaskService","assignUsersToTask"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"TaskService assignUsersToTask should assign users to task successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should assign users to task successfully"},{"ancestorTitles":["TaskService","assignUsersToTask"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"TaskService assignUsersToTask should throw ValidationError when user does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw ValidationError when user does not exist"},{"ancestorTitles":["TaskService","addTaskComment"],"duration":12,"failureDetails":[{}],"failureMessages":["Error: Unmocked Prisma method called. Make sure to mock this method in your test.\n    at Proxy.fallbackMockImplementation (/home/topher/repos/asset-manager/backend/src/lib/__mocks__/prisma.ts:8:11)\n    at /home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:397:39\n    at Proxy.<anonymous> (/home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:404:13)\n    at Proxy.mockConstructor (/home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:148:19)\n    at TaskService.createTaskComment (/home/topher/repos/asset-manager/backend/src/services/task.service.ts:1553:36)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/task.service.test.ts:589:40)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"TaskService addTaskComment should add comment to task successfully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should add comment to task successfully"},{"ancestorTitles":["TaskService","addTaskComment"],"duration":13,"failureDetails":[{"matcherResult":{"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at TaskService.createTaskComment (src/services/task.service.ts:1553:36)\n      at Object.<anonymous> (src/test/unit/services/task.service.test.ts:613:32)","pass":false},"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at TaskService.createTaskComment (src/services/task.service.ts:1553:36)\n      at Object.<anonymous> (src/test/unit/services/task.service.test.ts:613:32)"}],"failureMessages":["Error: expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at TaskService.createTaskComment (src/services/task.service.ts:1553:36)\n      at Object.<anonymous> (src/test/unit/services/task.service.test.ts:613:32)\n    at Object.toThrow (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/task.service.test.ts:613:72)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"TaskService addTaskComment should throw NotFoundError when task does not exist","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw NotFoundError when task does not exist"},{"ancestorTitles":["TaskService","getTaskStatistics"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"TaskService getTaskStatistics should return comprehensive task statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return comprehensive task statistics"},{"ancestorTitles":["TaskService","bulkUpdateTaskStatus"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"TaskService bulkUpdateTaskStatus should update multiple tasks successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update multiple tasks successfully"},{"ancestorTitles":["TaskService","bulkUpdateTaskStatus"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"TaskService bulkUpdateTaskStatus should handle mixed success and failure","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle mixed success and failure"}],"endTime":1751068740654,"message":"  ● TaskService › addTaskComment › should add comment to task successfully\n\n    Unmocked Prisma method called. Make sure to mock this method in your test.\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at TaskService.createTaskComment (src/services/task.service.ts:1553:36)\n      at Object.<anonymous> (src/test/unit/services/task.service.test.ts:589:40)\n\n  ● TaskService › addTaskComment › should throw NotFoundError when task does not exist\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected constructor: NotFoundError\n    Received constructor: Error\n\n    Received message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n           6 | export const prisma = mockDeep<PrismaClient>({\n           7 |   fallbackMockImplementation: () => {\n        >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n             |           ^\n           9 |   },\n          10 | }) as DeepMockProxy<PrismaClient>;\n          11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at TaskService.createTaskComment (src/services/task.service.ts:1553:36)\n      at Object.<anonymous> (src/test/unit/services/task.service.test.ts:613:32)\n      at Object.<anonymous> (src/test/unit/services/task.service.test.ts:613:72)\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/task.service.test.ts","startTime":1751068738331,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["CalendarService - iCalendar","generateICalToken"],"duration":2,"failureDetails":[{"matcherResult":{"actual":"67f8f40ce548801074c858d084cf836c2c635ff3cb706fd20a3761d724e21517","expected":"test-token-1234567890","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"test-token-1234567890\"\nReceived: \"67f8f40ce548801074c858d084cf836c2c635ff3cb706fd20a3761d724e21517\"","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"test-token-1234567890\"\nReceived: \"67f8f40ce548801074c858d084cf836c2c635ff3cb706fd20a3761d724e21517\"\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/calendar.icalendar.test.ts:52:21)"],"fullName":"CalendarService - iCalendar generateICalToken should generate a new iCalendar token","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should generate a new iCalendar token"},{"ancestorTitles":["CalendarService - iCalendar","getICalFeed"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CalendarService - iCalendar getICalFeed should generate iCalendar feed for valid token","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate iCalendar feed for valid token"},{"ancestorTitles":["CalendarService - iCalendar","getICalFeed"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CalendarService - iCalendar getICalFeed should throw NotFoundError for invalid token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundError for invalid token"},{"ancestorTitles":["CalendarService - iCalendar","revokeICalToken"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"CalendarService - iCalendar revokeICalToken should revoke iCalendar token for user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should revoke iCalendar token for user"},{"ancestorTitles":["CalendarService - iCalendar","getICalStatus"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CalendarService - iCalendar getICalStatus should return enabled status with feed URL","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return enabled status with feed URL"},{"ancestorTitles":["CalendarService - iCalendar","getICalStatus"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CalendarService - iCalendar getICalStatus should return disabled status when not configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return disabled status when not configured"}],"endTime":1751068742312,"message":"  ● CalendarService - iCalendar › generateICalToken › should generate a new iCalendar token\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"test-token-1234567890\"\n    Received: \"67f8f40ce548801074c858d084cf836c2c635ff3cb706fd20a3761d724e21517\"\n\n      50 |       const token = await calendarService.generateICalToken(userId, organizationId);\n      51 |\n    > 52 |       expect(token).toBe('test-token-1234567890');\n         |                     ^\n      53 |       expect(prismaMock.calendarIntegration.upsert).toHaveBeenCalledWith({\n      54 |         where: {\n      55 |           userId_provider: {\n\n      at Object.<anonymous> (src/test/unit/services/calendar.icalendar.test.ts:52:21)\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/calendar.icalendar.test.ts","startTime":1751068740656,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1751068817150,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m4\u001b[0m:\u001b[93m25\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS6133: \u001b[0m'AssetStatus' is declared but its value is never read.\n\n    \u001b[7m4\u001b[0m import { AssetCategory, AssetStatus, TaskStatus, TaskPriority } from '@prisma/client';\n    \u001b[7m \u001b[0m \u001b[91m                        ~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m75\u001b[0m:\u001b[93m35\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'INFRASTRUCTURE' does not exist on type '{ HARDWARE: \"HARDWARE\"; SOFTWARE: \"SOFTWARE\"; FURNITURE: \"FURNITURE\"; VEHICLE: \"VEHICLE\"; EQUIPMENT: \"EQUIPMENT\"; PROPERTY: \"PROPERTY\"; OTHER: \"OTHER\"; }'.\n\n    \u001b[7m75\u001b[0m           category: AssetCategory.INFRASTRUCTURE,\n    \u001b[7m  \u001b[0m \u001b[91m                                  ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m81\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$AssetPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m81\u001b[0m       mockPrisma.asset.findMany.mockResolvedValueOnce(mockAssets);\n    \u001b[7m  \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m95\u001b[0m:\u001b[93m23\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2532: \u001b[0mObject is possibly 'undefined'.\n\n    \u001b[7m95\u001b[0m         purchaseDate: mockAssets[0].purchaseDate,\n    \u001b[7m  \u001b[0m \u001b[91m                      ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m101\u001b[0m:\u001b[93m23\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2532: \u001b[0mObject is possibly 'undefined'.\n\n    \u001b[7m101\u001b[0m         purchaseDate: mockAssets[1].purchaseDate,\n    \u001b[7m   \u001b[0m \u001b[91m                      ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m133\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$AssetPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m133\u001b[0m       mockPrisma.asset.findMany.mockResolvedValueOnce(mockAssets);\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m175\u001b[0m:\u001b[93m35\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'INFRASTRUCTURE' does not exist on type '{ HARDWARE: \"HARDWARE\"; SOFTWARE: \"SOFTWARE\"; FURNITURE: \"FURNITURE\"; VEHICLE: \"VEHICLE\"; EQUIPMENT: \"EQUIPMENT\"; PROPERTY: \"PROPERTY\"; OTHER: \"OTHER\"; }'.\n\n    \u001b[7m175\u001b[0m           category: AssetCategory.INFRASTRUCTURE,\n    \u001b[7m   \u001b[0m \u001b[91m                                  ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m194\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$AssetPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m194\u001b[0m       mockPrisma.asset.findMany.mockResolvedValueOnce(mockAssets);\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m242\u001b[0m:\u001b[93m30\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'COMPLETED' does not exist on type '{ PLANNED: \"PLANNED\"; IN_PROGRESS: \"IN_PROGRESS\"; DONE: \"DONE\"; SKIPPED: \"SKIPPED\"; }'.\n\n    \u001b[7m242\u001b[0m           status: TaskStatus.COMPLETED,\n    \u001b[7m   \u001b[0m \u001b[91m                             ~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m265\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$TaskPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m265\u001b[0m       mockPrisma.task.findMany.mockResolvedValueOnce(mockTasks);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m308\u001b[0m:\u001b[93m30\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'COMPLETED' does not exist on type '{ PLANNED: \"PLANNED\"; IN_PROGRESS: \"IN_PROGRESS\"; DONE: \"DONE\"; SKIPPED: \"SKIPPED\"; }'.\n\n    \u001b[7m308\u001b[0m           status: TaskStatus.COMPLETED,\n    \u001b[7m   \u001b[0m \u001b[91m                             ~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m316\u001b[0m:\u001b[93m30\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'COMPLETED' does not exist on type '{ PLANNED: \"PLANNED\"; IN_PROGRESS: \"IN_PROGRESS\"; DONE: \"DONE\"; SKIPPED: \"SKIPPED\"; }'.\n\n    \u001b[7m316\u001b[0m           status: TaskStatus.COMPLETED,\n    \u001b[7m   \u001b[0m \u001b[91m                             ~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m332\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$TaskPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m332\u001b[0m       mockPrisma.task.findMany.mockResolvedValueOnce(mockTasks);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m348\u001b[0m:\u001b[93m64\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'COMPLETED' does not exist on type '{ PLANNED: \"PLANNED\"; IN_PROGRESS: \"IN_PROGRESS\"; DONE: \"DONE\"; SKIPPED: \"SKIPPED\"; }'.\n\n    \u001b[7m348\u001b[0m       expect(result.byStatus.find(s => s.status === TaskStatus.COMPLETED)).toMatchObject({\n    \u001b[7m   \u001b[0m \u001b[91m                                                               ~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m393\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$TaskPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m393\u001b[0m       mockPrisma.task.findMany.mockResolvedValueOnce(mockTasks);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m440\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'COMPLETED' does not exist on type '{ PLANNED: \"PLANNED\"; IN_PROGRESS: \"IN_PROGRESS\"; DONE: \"DONE\"; SKIPPED: \"SKIPPED\"; }'.\n\n    \u001b[7m440\u001b[0m             status: TaskStatus.COMPLETED,\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m466\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'COMPLETED' does not exist on type '{ PLANNED: \"PLANNED\"; IN_PROGRESS: \"IN_PROGRESS\"; DONE: \"DONE\"; SKIPPED: \"SKIPPED\"; }'.\n\n    \u001b[7m466\u001b[0m             status: TaskStatus.COMPLETED,\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m476\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$UserPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m476\u001b[0m       mockPrisma.user.findMany.mockResolvedValueOnce(mockUsers);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m477\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends TaskAssignmentFindManyArgs>(args?: SelectSubset<T, TaskAssignmentFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<...>'.\n\n    \u001b[7m477\u001b[0m       mockPrisma.taskAssignment.findMany.mockResolvedValueOnce(mockAssignments);\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m521\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'COMPLETED' does not exist on type '{ PLANNED: \"PLANNED\"; IN_PROGRESS: \"IN_PROGRESS\"; DONE: \"DONE\"; SKIPPED: \"SKIPPED\"; }'.\n\n    \u001b[7m521\u001b[0m             status: TaskStatus.COMPLETED,\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m533\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'COMPLETED' does not exist on type '{ PLANNED: \"PLANNED\"; IN_PROGRESS: \"IN_PROGRESS\"; DONE: \"DONE\"; SKIPPED: \"SKIPPED\"; }'.\n\n    \u001b[7m533\u001b[0m             status: TaskStatus.COMPLETED,\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m543\u001b[0m:\u001b[93m34\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<DefaultArgs>>) => Prisma__UserClient<GetFindResult<$UserPayload<DefaultArgs>, T, PrismaClientOptions> | null, null, DefaultArgs, PrismaClientOptions>'.\n\n    \u001b[7m543\u001b[0m       mockPrisma.user.findUnique.mockResolvedValueOnce(mockUser);\n    \u001b[7m   \u001b[0m \u001b[91m                                 ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m544\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends TaskAssignmentFindManyArgs>(args?: SelectSubset<T, TaskAssignmentFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<...>'.\n\n    \u001b[7m544\u001b[0m       mockPrisma.taskAssignment.findMany.mockResolvedValueOnce(mockAssignments);\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m572\u001b[0m:\u001b[93m34\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<DefaultArgs>>) => Prisma__UserClient<GetFindResult<$UserPayload<DefaultArgs>, T, PrismaClientOptions> | null, null, DefaultArgs, PrismaClientOptions>'.\n\n    \u001b[7m572\u001b[0m       mockPrisma.user.findUnique.mockResolvedValueOnce(null);\n    \u001b[7m   \u001b[0m \u001b[91m                                 ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m629\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockRejectedValueOnce' does not exist on type '<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$AssetPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m629\u001b[0m       mockPrisma.asset.findMany.mockRejectedValueOnce(new Error('Database error'));\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m641\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$AssetPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m641\u001b[0m       mockPrisma.asset.findMany.mockResolvedValueOnce([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m662\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$TaskPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m662\u001b[0m       mockPrisma.task.findMany.mockResolvedValueOnce([]);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/reporting.service.test.ts\u001b[0m:\u001b[93m685\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$TaskPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m685\u001b[0m       mockPrisma.task.findMany.mockResolvedValueOnce([]);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/reporting.service.test.ts","startTime":1751068817150,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1751068817150,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/test/unit/services/offline-sync.service.test.ts\u001b[0m:\u001b[93m5\u001b[0m:\u001b[93m28\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS6196: \u001b[0m'SyncChange' is declared but never used.\n\n    \u001b[7m5\u001b[0m import type { SyncRequest, SyncChange } from '../../../services/offline-sync.service';\n    \u001b[7m \u001b[0m \u001b[91m                           ~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/offline-sync.service.test.ts\u001b[0m:\u001b[93m143\u001b[0m:\u001b[93m9\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2322: \u001b[0mType 'AsymmetricMatcher_2' is not assignable to type 'string'.\n\n    \u001b[7m143\u001b[0m         syncToken: expect.any(String),\n    \u001b[7m   \u001b[0m \u001b[91m        ~~~~~~~~~\u001b[0m\n\n      \u001b[96m../node_modules/.prisma/client/index.d.ts\u001b[0m:\u001b[93m48062\u001b[0m:\u001b[93m7\u001b[0m\n        \u001b[7m48062\u001b[0m       syncToken: string | null\n        \u001b[7m     \u001b[0m \u001b[96m      ~~~~~~~~~\u001b[0m\n        The expected type comes from property 'syncToken' which is declared here on type '{ id: string; createdAt: Date; updatedAt: Date; isActive: boolean; userId: string; lastSyncAt: Date | null; deviceId: string; deviceName: string | null; syncToken: string | null; }'\n    \u001b[96msrc/test/unit/services/offline-sync.service.test.ts\u001b[0m:\u001b[93m155\u001b[0m:\u001b[93m18\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2532: \u001b[0mObject is possibly 'undefined'.\n\n    \u001b[7m155\u001b[0m         payload: mockSyncRequest.changes[0].payload,\n    \u001b[7m   \u001b[0m \u001b[91m                 ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/offline-sync.service.test.ts\u001b[0m:\u001b[93m213\u001b[0m:\u001b[93m18\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2532: \u001b[0mObject is possibly 'undefined'.\n\n    \u001b[7m213\u001b[0m         payload: mockSyncRequest.changes[0].payload,\n    \u001b[7m   \u001b[0m \u001b[91m                 ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/offline-sync.service.test.ts","startTime":1751068817150,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1751068817150,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m27\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m27\u001b[0m   addReportJob: jest.fn().mockResolvedValue({ id: 'job-123' }),\n    \u001b[7m  \u001b[0m \u001b[91m                                            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m35\u001b[0m:\u001b[93m34\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS6133: \u001b[0m'res' is declared but its value is never read.\n\n    \u001b[7m35\u001b[0m   authenticateJWT: jest.fn((req, res, next) => {\n    \u001b[7m  \u001b[0m \u001b[91m                                 ~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m36\u001b[0m:\u001b[93m5\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'req' is of type 'unknown'.\n\n    \u001b[7m36\u001b[0m     req.user = {\n    \u001b[7m  \u001b[0m \u001b[91m    ~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m44\u001b[0m:\u001b[93m5\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'next' is of type 'unknown'.\n\n    \u001b[7m44\u001b[0m     next();\n    \u001b[7m  \u001b[0m \u001b[91m    ~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m46\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS6133: \u001b[0m'req' is declared but its value is never read.\n\n    \u001b[7m46\u001b[0m   requirePermission: jest.fn(() => (req: any, res: any, next: any) => next()),\n    \u001b[7m  \u001b[0m \u001b[91m                                    ~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m46\u001b[0m:\u001b[93m47\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS6133: \u001b[0m'res' is declared but its value is never read.\n\n    \u001b[7m46\u001b[0m   requirePermission: jest.fn(() => (req: any, res: any, next: any) => next()),\n    \u001b[7m  \u001b[0m \u001b[91m                                              ~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m51\u001b[0m:\u001b[93m47\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ stream: { pipe: Mock<UnknownFunction>; }; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m 51\u001b[0m     downloadFile: jest.fn().mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                              ~\u001b[0m\n    \u001b[7m 52\u001b[0m       stream: {\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m 54\u001b[0m       },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~\u001b[0m\n    \u001b[7m 55\u001b[0m     }),\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m124\u001b[0m:\u001b[93m72\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; name: string; type: string; format: string; enabled: boolean; createdAt: Date; createdBy: { id: string; firstName: string; lastName: string; email: string; }; }[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m124\u001b[0m       (prisma.scheduledReport.findMany as jest.Mock).mockResolvedValue(mockReports);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                       ~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m125\u001b[0m:\u001b[93m69\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '1' is not assignable to parameter of type 'never'.\n\n    \u001b[7m125\u001b[0m       (prisma.scheduledReport.count as jest.Mock).mockResolvedValue(1);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                    ~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m166\u001b[0m:\u001b[93m70\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; name: string; type: string; format: string; schedule: { frequency: string; dayOfWeek: number; hour: number; }; recipients: string[]; enabled: boolean; lastRunAt: null; nextRunAt: Date; createdAt: Date; createdBy: { ...; }; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m166\u001b[0m       (prisma.scheduledReport.create as jest.Mock).mockResolvedValue(mockReport);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                     ~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m226\u001b[0m:\u001b[93m73\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; organizationId: string; enabled: boolean; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m226\u001b[0m       (prisma.scheduledReport.findFirst as jest.Mock).mockResolvedValue(existingReport);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                        ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m227\u001b[0m:\u001b[93m70\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ name: string; enabled: boolean; createdBy: { id: string; firstName: string; lastName: string; email: string; }; id: string; organizationId: string; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m227\u001b[0m       (prisma.scheduledReport.update as jest.Mock).mockResolvedValue(updatedReport);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                     ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m244\u001b[0m:\u001b[93m73\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'null' is not assignable to parameter of type 'never'.\n\n    \u001b[7m244\u001b[0m       (prisma.scheduledReport.findFirst as jest.Mock).mockResolvedValue(null);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                        ~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m264\u001b[0m:\u001b[93m73\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; organizationId: string; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m264\u001b[0m       (prisma.scheduledReport.findFirst as jest.Mock).mockResolvedValue(existingReport);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                        ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m265\u001b[0m:\u001b[93m70\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'undefined' is not assignable to parameter of type 'never'.\n\n    \u001b[7m265\u001b[0m       (prisma.scheduledReport.delete as jest.Mock).mockResolvedValue(undefined);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                     ~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m275\u001b[0m:\u001b[93m73\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'null' is not assignable to parameter of type 'never'.\n\n    \u001b[7m275\u001b[0m       (prisma.scheduledReport.findFirst as jest.Mock).mockResolvedValue(null);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                        ~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m302\u001b[0m:\u001b[93m70\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; type: string; format: string; generatedAt: Date; generatedBy: { id: string; firstName: string; lastName: string; email: string; }; }[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m302\u001b[0m       (prisma.reportHistory.findMany as jest.Mock).mockResolvedValue(mockHistory);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                     ~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m303\u001b[0m:\u001b[93m67\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '1' is not assignable to parameter of type 'never'.\n\n    \u001b[7m303\u001b[0m       (prisma.reportHistory.count as jest.Mock).mockResolvedValue(1);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                  ~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m328\u001b[0m:\u001b[93m71\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; organizationId: string; type: string; format: string; filePath: string; generatedAt: Date; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m328\u001b[0m       (prisma.reportHistory.findFirst as jest.Mock).mockResolvedValue(mockReport);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                      ~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/reports.test.ts\u001b[0m:\u001b[93m341\u001b[0m:\u001b[93m71\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'null' is not assignable to parameter of type 'never'.\n\n    \u001b[7m341\u001b[0m       (prisma.reportHistory.findFirst as jest.Mock).mockResolvedValue(null);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                      ~~~~\u001b[0m\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/routes/reports.test.ts","startTime":1751068817150,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1751068817150,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m40\u001b[0m:\u001b[93m51\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; fileSizeBytes: number; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m40\u001b[0m     uploadReportFile: jest.fn().mockResolvedValue({\n    \u001b[7m  \u001b[0m \u001b[91m                                                  ~\u001b[0m\n    \u001b[7m41\u001b[0m       id: 'file-123',\n    \u001b[7m  \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m42\u001b[0m       fileSizeBytes: 1024,\n    \u001b[7m  \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m43\u001b[0m     }),\n    \u001b[7m  \u001b[0m \u001b[91m~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m49\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ size: number; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m49\u001b[0m   stat: jest.fn().mockResolvedValue({ size: 1024 }),\n    \u001b[7m  \u001b[0m \u001b[91m                                    ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m75\u001b[0m:\u001b[93m22\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2769: \u001b[0mNo overload matches this call.\n      Overload 1 of 3, '(callback: () => void, delay?: number | undefined): Timeout', gave the following error.\n        Argument of type 'unknown' is not assignable to parameter of type '() => void'.\n      Overload 2 of 3, '(callback: (_: void) => void, delay?: number | undefined): Timeout', gave the following error.\n        Argument of type 'unknown' is not assignable to parameter of type '(_: void) => void'.\n      Overload 3 of 3, '(handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]): number', gave the following error.\n        Argument of type 'unknown' is not assignable to parameter of type 'TimerHandler'.\n\n    \u001b[7m75\u001b[0m           setTimeout(callback, 10);\n    \u001b[7m  \u001b[0m \u001b[91m                     ~~~~~~~~\u001b[0m\n\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m147\u001b[0m:\u001b[93m62\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; name: string; category: string; status: string; purchasePrice: number; location: { name: string; }; components: never[]; tasks: never[]; _count: { tasks: number; components: number; attachments: number; }; }[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m147\u001b[0m       (prisma.asset.findMany as jest.Mock).mockResolvedValue([\n    \u001b[7m   \u001b[0m \u001b[91m                                                             ~\u001b[0m\n    \u001b[7m148\u001b[0m         {\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m158\u001b[0m         },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~\u001b[0m\n    \u001b[7m159\u001b[0m       ]);\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m161\u001b[0m:\u001b[93m68\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m161\u001b[0m       (prisma.reportHistory.create as jest.Mock).mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                                                   ~\u001b[0m\n    \u001b[7m162\u001b[0m         id: 'history-123',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m163\u001b[0m       });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m184\u001b[0m:\u001b[93m61\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; title: string; status: string; priority: string; dueDate: Date; asset: { name: string; location: { name: string; }; }; assignments: never[]; schedule: null; }[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m184\u001b[0m       (prisma.task.findMany as jest.Mock).mockResolvedValue([\n    \u001b[7m   \u001b[0m \u001b[91m                                                            ~\u001b[0m\n    \u001b[7m185\u001b[0m         {\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m194\u001b[0m         },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~\u001b[0m\n    \u001b[7m195\u001b[0m       ]);\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m197\u001b[0m:\u001b[93m68\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m197\u001b[0m       (prisma.reportHistory.create as jest.Mock).mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                                                   ~\u001b[0m\n    \u001b[7m198\u001b[0m         id: 'history-123',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m199\u001b[0m       });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m213\u001b[0m:\u001b[93m60\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ role: string; _count: number; }[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m213\u001b[0m       (prisma.user.groupBy as jest.Mock).mockResolvedValue([\n    \u001b[7m   \u001b[0m \u001b[91m                                                           ~\u001b[0m\n    \u001b[7m214\u001b[0m         { role: 'MANAGER', _count: 5 },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m215\u001b[0m       ]);\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m216\u001b[0m:\u001b[93m59\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '100' is not assignable to parameter of type 'never'.\n\n    \u001b[7m216\u001b[0m       (prisma.asset.count as jest.Mock).mockResolvedValue(100);\n    \u001b[7m   \u001b[0m \u001b[91m                                                          ~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m217\u001b[0m:\u001b[93m61\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ status: string; _count: number; }[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m217\u001b[0m       (prisma.asset.groupBy as jest.Mock).mockResolvedValue([\n    \u001b[7m   \u001b[0m \u001b[91m                                                            ~\u001b[0m\n    \u001b[7m218\u001b[0m         { status: 'OPERATIONAL', _count: 90 },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m219\u001b[0m       ]);\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m221\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '200' is not assignable to parameter of type 'never'.\n\n    \u001b[7m221\u001b[0m         .mockResolvedValueOnce(200)\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m222\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '180' is not assignable to parameter of type 'never'.\n\n    \u001b[7m222\u001b[0m         .mockResolvedValueOnce(180);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m223\u001b[0m:\u001b[93m60\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ priority: string; _count: number; }[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m223\u001b[0m       (prisma.task.groupBy as jest.Mock).mockResolvedValue([\n    \u001b[7m   \u001b[0m \u001b[91m                                                           ~\u001b[0m\n    \u001b[7m224\u001b[0m         { priority: 'HIGH', _count: 50 },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m225\u001b[0m       ]);\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m226\u001b[0m:\u001b[93m62\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ _avg: { actualCost: number; }; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m226\u001b[0m       (prisma.task.aggregate as jest.Mock).mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                                             ~\u001b[0m\n    \u001b[7m227\u001b[0m         _avg: { actualCost: 100 },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m228\u001b[0m       });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m229\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; name: string; _count: { assets: number; }; }[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m229\u001b[0m       (prisma.location.findMany as jest.Mock).mockResolvedValue([\n    \u001b[7m   \u001b[0m \u001b[91m                                                                ~\u001b[0m\n    \u001b[7m230\u001b[0m         { id: 'loc-1', name: 'Office', _count: { assets: 50 } },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m231\u001b[0m       ]);\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m232\u001b[0m:\u001b[93m71\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'never[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m232\u001b[0m       (prisma.activityStream.findMany as jest.Mock).mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                      ~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m234\u001b[0m:\u001b[93m68\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m234\u001b[0m       (prisma.reportHistory.create as jest.Mock).mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                                                   ~\u001b[0m\n    \u001b[7m235\u001b[0m         id: 'history-123',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m236\u001b[0m       });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m249\u001b[0m:\u001b[93m62\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; name: string; category: string; status: string; serialNumber: string; location: { name: string; }; purchasePrice: number; components: never[]; tasks: never[]; _count: { tasks: number; components: number; attachments: number; }; }[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m249\u001b[0m       (prisma.asset.findMany as jest.Mock).mockResolvedValue([\n    \u001b[7m   \u001b[0m \u001b[91m                                                             ~\u001b[0m\n    \u001b[7m250\u001b[0m         {\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m261\u001b[0m         },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~\u001b[0m\n    \u001b[7m262\u001b[0m       ]);\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m264\u001b[0m:\u001b[93m68\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m264\u001b[0m       (prisma.reportHistory.create as jest.Mock).mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                                                   ~\u001b[0m\n    \u001b[7m265\u001b[0m         id: 'history-123',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m266\u001b[0m       });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m278\u001b[0m:\u001b[93m62\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; name: string; category: string; status: string; location: { name: string; }; components: never[]; tasks: never[]; _count: { tasks: number; components: number; attachments: number; }; }[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m278\u001b[0m       (prisma.asset.findMany as jest.Mock).mockResolvedValue([\n    \u001b[7m   \u001b[0m \u001b[91m                                                             ~\u001b[0m\n    \u001b[7m279\u001b[0m         {\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m288\u001b[0m         },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~\u001b[0m\n    \u001b[7m289\u001b[0m       ]);\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m291\u001b[0m:\u001b[93m68\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m291\u001b[0m       (prisma.reportHistory.create as jest.Mock).mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                                                   ~\u001b[0m\n    \u001b[7m292\u001b[0m         id: 'history-123',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m293\u001b[0m       });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m311\u001b[0m:\u001b[93m62\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'never[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m311\u001b[0m       (prisma.asset.findMany as jest.Mock).mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                                             ~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m312\u001b[0m:\u001b[93m68\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m312\u001b[0m       (prisma.reportHistory.create as jest.Mock).mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                                                   ~\u001b[0m\n    \u001b[7m313\u001b[0m         id: 'history-123',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m314\u001b[0m       });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m315\u001b[0m:\u001b[93m70\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{}' is not assignable to parameter of type 'never'.\n\n    \u001b[7m315\u001b[0m       (prisma.scheduledReport.update as jest.Mock).mockResolvedValue({});\n    \u001b[7m   \u001b[0m \u001b[91m                                                                     ~~\u001b[0m\n    \u001b[96msrc/test/unit/workers/report.worker.test.ts\u001b[0m:\u001b[93m335\u001b[0m:\u001b[93m62\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'Error' is not assignable to parameter of type 'never'.\n\n    \u001b[7m335\u001b[0m       (prisma.asset.findMany as jest.Mock).mockRejectedValue(new Error('Database error'));\n    \u001b[7m   \u001b[0m \u001b[91m                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/workers/report.worker.test.ts","startTime":1751068817150,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1751068817150,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m34\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS6133: \u001b[0m'res' is declared but its value is never read.\n\n    \u001b[7m31\u001b[0m   authenticateJWT: jest.fn((req, res, next) => {\n    \u001b[7m  \u001b[0m \u001b[91m                                 ~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m32\u001b[0m:\u001b[93m5\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'req' is of type 'unknown'.\n\n    \u001b[7m32\u001b[0m     req.user = {\n    \u001b[7m  \u001b[0m \u001b[91m    ~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m37\u001b[0m:\u001b[93m5\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'next' is of type 'unknown'.\n\n    \u001b[7m37\u001b[0m     next();\n    \u001b[7m  \u001b[0m \u001b[91m    ~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m39\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS6133: \u001b[0m'req' is declared but its value is never read.\n\n    \u001b[7m39\u001b[0m   requirePermission: jest.fn(() => (req: any, res: any, next: any) => next()),\n    \u001b[7m  \u001b[0m \u001b[91m                                    ~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m39\u001b[0m:\u001b[93m47\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS6133: \u001b[0m'res' is declared but its value is never read.\n\n    \u001b[7m39\u001b[0m   requirePermission: jest.fn(() => (req: any, res: any, next: any) => next()),\n    \u001b[7m  \u001b[0m \u001b[91m                                              ~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m44\u001b[0m:\u001b[93m53\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ total: number; byCategory: { HARDWARE: number; SOFTWARE: number; OTHER: number; }; byStatus: { OPERATIONAL: number; MAINTENANCE: number; REPAIR: number; }; warrantyExpiring: number; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m 44\u001b[0m     getAssetStatistics: jest.fn().mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                                    ~\u001b[0m\n    \u001b[7m 45\u001b[0m       total: 100,\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m 48\u001b[0m       warrantyExpiring: 5,\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m 49\u001b[0m     }),\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m55\u001b[0m:\u001b[93m52\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ total: number; completed: number; overdue: number; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m 55\u001b[0m     getTaskStatistics: jest.fn().mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                                   ~\u001b[0m\n    \u001b[7m 56\u001b[0m       total: 200,\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m 58\u001b[0m       overdue: 10,\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m 59\u001b[0m     }),\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m81\u001b[0m:\u001b[93m59\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '100' is not assignable to parameter of type 'never'.\n\n    \u001b[7m81\u001b[0m       (prisma.asset.count as jest.Mock).mockResolvedValue(100);\n    \u001b[7m  \u001b[0m \u001b[91m                                                          ~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m82\u001b[0m:\u001b[93m61\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ status: string; _count: number; }[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m 82\u001b[0m       (prisma.asset.groupBy as jest.Mock).mockResolvedValue([\n    \u001b[7m   \u001b[0m \u001b[91m                                                            ~\u001b[0m\n    \u001b[7m 83\u001b[0m         { status: 'OPERATIONAL', _count: 80 },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m 85\u001b[0m         { status: 'REPAIR', _count: 5 },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m 86\u001b[0m       ]);\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m58\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '200' is not assignable to parameter of type 'never'.\n\n    \u001b[7m87\u001b[0m       (prisma.task.count as jest.Mock).mockResolvedValue(200);\n    \u001b[7m  \u001b[0m \u001b[91m                                                         ~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m88\u001b[0m:\u001b[93m60\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ status: string; _count: number; }[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m 88\u001b[0m       (prisma.task.groupBy as jest.Mock).mockResolvedValue([\n    \u001b[7m   \u001b[0m \u001b[91m                                                           ~\u001b[0m\n    \u001b[7m 89\u001b[0m         { status: 'DONE', _count: 150 },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m 91\u001b[0m         { status: 'PLANNED', _count: 20 },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m 92\u001b[0m       ]);\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m93\u001b[0m:\u001b[93m58\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '25' is not assignable to parameter of type 'never'.\n\n    \u001b[7m93\u001b[0m       (prisma.user.count as jest.Mock).mockResolvedValue(25);\n    \u001b[7m  \u001b[0m \u001b[91m                                                         ~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m94\u001b[0m:\u001b[93m60\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ role: string; _count: number; }[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m 94\u001b[0m       (prisma.user.groupBy as jest.Mock).mockResolvedValue([\n    \u001b[7m   \u001b[0m \u001b[91m                                                           ~\u001b[0m\n    \u001b[7m 95\u001b[0m         { role: 'MANAGER', _count: 5 },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m 97\u001b[0m         { role: 'VIEWER', _count: 2 },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m 98\u001b[0m       ]);\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m99\u001b[0m:\u001b[93m71\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'never[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m99\u001b[0m       (prisma.activityStream.findMany as jest.Mock).mockResolvedValue([]);\n    \u001b[7m  \u001b[0m \u001b[91m                                                                      ~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m122\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '100' is not assignable to parameter of type 'never'.\n\n    \u001b[7m122\u001b[0m         .mockResolvedValueOnce(100) // total tasks\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m123\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '80' is not assignable to parameter of type 'never'.\n\n    \u001b[7m123\u001b[0m         .mockResolvedValueOnce(80); // completed tasks\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m125\u001b[0m:\u001b[93m61\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'never[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m125\u001b[0m       (prisma.task.findMany as jest.Mock).mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                                            ~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m127\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '50' is not assignable to parameter of type 'never'.\n\n    \u001b[7m127\u001b[0m         .mockResolvedValueOnce(50) // total assets\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m128\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '45' is not assignable to parameter of type 'never'.\n\n    \u001b[7m128\u001b[0m         .mockResolvedValueOnce(45); // operational assets\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m145\u001b[0m:\u001b[93m61\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '({ id: string; status: string; createdAt: Date; completedAt: Date; } | { id: string; status: string; createdAt: Date; completedAt: null; })[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m145\u001b[0m       (prisma.task.findMany as jest.Mock).mockResolvedValue([\n    \u001b[7m   \u001b[0m \u001b[91m                                                            ~\u001b[0m\n    \u001b[7m146\u001b[0m         {\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m157\u001b[0m         },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~\u001b[0m\n    \u001b[7m158\u001b[0m       ]);\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/routes/dashboards.test.ts\u001b[0m:\u001b[93m175\u001b[0m:\u001b[93m61\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ category: string; _count: number; }[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m175\u001b[0m       (prisma.asset.groupBy as jest.Mock).mockResolvedValue([\n    \u001b[7m   \u001b[0m \u001b[91m                                                            ~\u001b[0m\n    \u001b[7m176\u001b[0m         { category: 'HARDWARE', _count: 50 },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m178\u001b[0m         { category: 'OTHER', _count: 20 },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m179\u001b[0m       ]);\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/routes/dashboards.test.ts","startTime":1751068817150,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["DataExportService","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DataExportService constructor should create an instance of DataExportService","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create an instance of DataExportService"},{"ancestorTitles":["DataExportService","flattenObject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DataExportService flattenObject should flatten nested objects correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should flatten nested objects correctly"},{"ancestorTitles":["DataExportService","flattenObject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DataExportService flattenObject should handle empty objects","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty objects"},{"ancestorTitles":["DataExportService","flattenObject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DataExportService flattenObject should handle arrays in objects","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle arrays in objects"},{"ancestorTitles":["DataExportService","cleanupOldExports"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DataExportService cleanupOldExports should have a cleanup method","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should have a cleanup method"}],"endTime":1751068770783,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/data-export.service.simple.test.ts","startTime":1751068769635,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["DataImportService","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DataImportService constructor should create an instance of DataImportService","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create an instance of DataImportService"},{"ancestorTitles":["DataImportService","applyFieldMapping"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DataImportService applyFieldMapping should apply simple field mapping","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should apply simple field mapping"},{"ancestorTitles":["DataImportService","applyFieldMapping"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DataImportService applyFieldMapping should apply complex mapping with transformation","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should apply complex mapping with transformation"},{"ancestorTitles":["DataImportService","applyFieldMapping"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DataImportService applyFieldMapping should handle required fields and default values","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle required fields and default values"},{"ancestorTitles":["DataImportService","applyFieldMapping"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"DataImportService applyFieldMapping should throw error for missing required fields without default","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for missing required fields without default"},{"ancestorTitles":["DataImportService","sortLocationsByHierarchy"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DataImportService sortLocationsByHierarchy should sort locations with parents after children","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should sort locations with parents after children"},{"ancestorTitles":["DataImportService","sortLocationsByHierarchy"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"DataImportService sortLocationsByHierarchy should handle multiple root locations","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle multiple root locations"},{"ancestorTitles":["DataImportService","sortLocationsByHierarchy"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DataImportService sortLocationsByHierarchy should handle circular dependencies gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle circular dependencies gracefully"}],"endTime":1751068771925,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/data-import.service.simple.test.ts","startTime":1751068770786,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["AuthService","authenticate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService authenticate should authenticate user successfully without 2FA","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should authenticate user successfully without 2FA"},{"ancestorTitles":["AuthService","authenticate"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"AuthService authenticate should throw error for invalid credentials","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid credentials"},{"ancestorTitles":["AuthService","authenticate"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService authenticate should throw error for inactive user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for inactive user"},{"ancestorTitles":["AuthService","authenticate"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService authenticate should require TOTP when enabled but not provided","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should require TOTP when enabled but not provided"},{"ancestorTitles":["AuthService","authenticate"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService authenticate should authenticate with valid TOTP","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should authenticate with valid TOTP"},{"ancestorTitles":["AuthService","authenticate"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AuthService authenticate should throw error for invalid TOTP","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid TOTP"},{"ancestorTitles":["AuthService","authenticate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService authenticate should throw error for TOTP enabled but no secret","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for TOTP enabled but no secret"},{"ancestorTitles":["AuthService","generateTokens"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService generateTokens should generate valid token pair","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should generate valid token pair"},{"ancestorTitles":["AuthService","generateTokens"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService generateTokens should throw error when JWT secrets not configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when JWT secrets not configured"},{"ancestorTitles":["AuthService","generateTokens"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService generateTokens should throw error when JWT refresh secret not configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when JWT refresh secret not configured"},{"ancestorTitles":["AuthService","refreshToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService refreshToken should refresh token successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should refresh token successfully"},{"ancestorTitles":["AuthService","refreshToken"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"AuthService refreshToken should throw error for invalid refresh token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid refresh token"},{"ancestorTitles":["AuthService","refreshToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService refreshToken should throw error for non-existent session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for non-existent session"},{"ancestorTitles":["AuthService","refreshToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService refreshToken should throw error for expired session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for expired session"},{"ancestorTitles":["AuthService","refreshToken"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"AuthService refreshToken should throw error for inactive user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for inactive user"},{"ancestorTitles":["AuthService","refreshToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService refreshToken should throw error when JWT refresh secret not configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when JWT refresh secret not configured"},{"ancestorTitles":["AuthService","verifyToken"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService verifyToken should verify token successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should verify token successfully"},{"ancestorTitles":["AuthService","verifyToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService verifyToken should throw error for invalid token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid token"},{"ancestorTitles":["AuthService","verifyToken"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AuthService verifyToken should throw error for non-existent user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for non-existent user"},{"ancestorTitles":["AuthService","verifyToken"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService verifyToken should throw error for inactive user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for inactive user"},{"ancestorTitles":["AuthService","verifyToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService verifyToken should throw error when JWT secret not configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when JWT secret not configured"},{"ancestorTitles":["AuthService","setupTOTP"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService setupTOTP should setup TOTP successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should setup TOTP successfully"},{"ancestorTitles":["AuthService","setupTOTP"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AuthService setupTOTP should throw error for non-existent user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for non-existent user"},{"ancestorTitles":["AuthService","setupTOTP"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService setupTOTP should throw error if TOTP already enabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if TOTP already enabled"},{"ancestorTitles":["AuthService","enableTOTP"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService enableTOTP should enable TOTP successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should enable TOTP successfully"},{"ancestorTitles":["AuthService","enableTOTP"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AuthService enableTOTP should throw error for non-existent user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for non-existent user"},{"ancestorTitles":["AuthService","enableTOTP"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService enableTOTP should throw error if TOTP setup not initiated","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if TOTP setup not initiated"},{"ancestorTitles":["AuthService","enableTOTP"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService enableTOTP should throw error if TOTP already enabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if TOTP already enabled"},{"ancestorTitles":["AuthService","enableTOTP"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AuthService enableTOTP should throw error for invalid TOTP code","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid TOTP code"},{"ancestorTitles":["AuthService","disableTOTP"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"AuthService disableTOTP should disable TOTP successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should disable TOTP successfully"},{"ancestorTitles":["AuthService","disableTOTP"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AuthService disableTOTP should throw error for non-existent user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for non-existent user"},{"ancestorTitles":["AuthService","disableTOTP"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService disableTOTP should throw error if TOTP not enabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if TOTP not enabled"},{"ancestorTitles":["AuthService","disableTOTP"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService disableTOTP should throw error for invalid password","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid password"},{"ancestorTitles":["AuthService","logout"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AuthService logout should logout successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should logout successfully"},{"ancestorTitles":["AuthService","logoutAll"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService logoutAll should logout from all devices successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should logout from all devices successfully"},{"ancestorTitles":["AuthService","generatePasswordResetToken"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService generatePasswordResetToken should generate password reset token for existing user","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate password reset token for existing user"},{"ancestorTitles":["AuthService","generatePasswordResetToken"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AuthService generatePasswordResetToken should return generic response for non-existent user","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return generic response for non-existent user"},{"ancestorTitles":["AuthService","validateSession"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService validateSession should validate session successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate session successfully"},{"ancestorTitles":["AuthService","validateSession"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AuthService validateSession should return null for non-existent session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for non-existent session"},{"ancestorTitles":["AuthService","validateSession"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService validateSession should return null for expired session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for expired session"},{"ancestorTitles":["AuthService","getUserSessions"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService getUserSessions should get user sessions successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get user sessions successfully"},{"ancestorTitles":["AuthService","revokeSession"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AuthService revokeSession should revoke session successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should revoke session successfully"}],"endTime":1751068774188,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/auth.service.test.ts","startTime":1751068771927,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["WebhookService","createWebhook"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService createWebhook should create a webhook successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create a webhook successfully"},{"ancestorTitles":["WebhookService","createWebhook"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService createWebhook should generate a secret if not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate a secret if not provided"},{"ancestorTitles":["WebhookService","updateWebhook"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService updateWebhook should update webhook successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update webhook successfully"},{"ancestorTitles":["WebhookService","updateWebhook"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService updateWebhook should return null if webhook not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if webhook not found"},{"ancestorTitles":["WebhookService","deleteWebhook"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService deleteWebhook should delete webhook successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should delete webhook successfully"},{"ancestorTitles":["WebhookService","deleteWebhook"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService deleteWebhook should return false if webhook not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false if webhook not found"},{"ancestorTitles":["WebhookService","emitEvent"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService emitEvent should queue webhook jobs for active webhooks","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should queue webhook jobs for active webhooks"},{"ancestorTitles":["WebhookService","emitEvent"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService emitEvent should not fail if no webhooks are found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not fail if no webhooks are found"},{"ancestorTitles":["WebhookService","deliverWebhook"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService deliverWebhook should deliver webhook successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should deliver webhook successfully"},{"ancestorTitles":["WebhookService","deliverWebhook"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService deliverWebhook should handle delivery failure","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle delivery failure"},{"ancestorTitles":["WebhookService","deliverWebhook"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService deliverWebhook should throw error if webhook is inactive","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if webhook is inactive"},{"ancestorTitles":["WebhookService","testWebhook"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService testWebhook should deliver test webhook","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should deliver test webhook"},{"ancestorTitles":["WebhookService","testWebhook"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService testWebhook should throw error if webhook not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if webhook not found"}],"endTime":1751068775363,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/webhook.service.test.ts","startTime":1751068774190,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["AppriseService","Configuration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService Configuration should initialize as disabled when no API URL is provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize as disabled when no API URL is provided"},{"ancestorTitles":["AppriseService","Configuration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService Configuration should initialize as enabled when API URL is provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize as enabled when API URL is provided"},{"ancestorTitles":["AppriseService","Configuration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService Configuration should parse notification URLs correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should parse notification URLs correctly"},{"ancestorTitles":["AppriseService","Configuration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService Configuration should parse tags configuration correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should parse tags configuration correctly"},{"ancestorTitles":["AppriseService","sendNotification"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService sendNotification should send notification successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should send notification successfully"},{"ancestorTitles":["AppriseService","sendNotification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService sendNotification should return false when API returns non-success status","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when API returns non-success status"},{"ancestorTitles":["AppriseService","sendNotification"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService sendNotification should return false when API call fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when API call fails"},{"ancestorTitles":["AppriseService","sendNotification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService sendNotification should skip notification when not configured","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should skip notification when not configured"},{"ancestorTitles":["AppriseService","testConfiguration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService testConfiguration should return true when API is reachable","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return true when API is reachable"},{"ancestorTitles":["AppriseService","testConfiguration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService testConfiguration should return false when API is not reachable","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when API is not reachable"},{"ancestorTitles":["AppriseService","Helper methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService Helper methods should send alert with correct type and tags","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should send alert with correct type and tags"},{"ancestorTitles":["AppriseService","Helper methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService Helper methods should send info notification with correct type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should send info notification with correct type"}],"endTime":1751068776445,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/apprise.service.test.ts","startTime":1751068775365,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["OrganizationService","createOrganization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService createOrganization should create an organization successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create an organization successfully"},{"ancestorTitles":["OrganizationService","getOrganizationById"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService getOrganizationById should return organization if found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return organization if found"},{"ancestorTitles":["OrganizationService","getOrganizationById"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService getOrganizationById should return null if organization not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if organization not found"},{"ancestorTitles":["OrganizationService","updateOrganization"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService updateOrganization should update organization successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update organization successfully"},{"ancestorTitles":["OrganizationService","updateOrganization"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService updateOrganization should throw error if organization not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if organization not found"},{"ancestorTitles":["OrganizationService","setOwner"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService setOwner should set owner successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should set owner successfully"},{"ancestorTitles":["OrganizationService","setOwner"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService setOwner should throw error if organization not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if organization not found"},{"ancestorTitles":["OrganizationService","setOwner"],"duration":73,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService setOwner should throw error if user not found in organization","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if user not found in organization"},{"ancestorTitles":["OrganizationService","getMembers"],"duration":90,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService getMembers should return organization members","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return organization members"},{"ancestorTitles":["OrganizationService","getStatistics"],"duration":282,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService getStatistics should return organization statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return organization statistics"},{"ancestorTitles":["OrganizationService","getStatistics"],"duration":113,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService getStatistics should throw error if organization not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if organization not found"},{"ancestorTitles":["OrganizationService","deleteOrganization"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService deleteOrganization should delete organization successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete organization successfully"},{"ancestorTitles":["OrganizationService","deleteOrganization"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService deleteOrganization should throw error if organization not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if organization not found"}],"endTime":1751068778149,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/organization.service.test.ts","startTime":1751068776447,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Auth Utils","generateTokens"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils generateTokens should generate access and refresh tokens","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate access and refresh tokens"},{"ancestorTitles":["Auth Utils","generateTokens"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils generateTokens should generate tokens with correct payload structure","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate tokens with correct payload structure"},{"ancestorTitles":["Auth Utils","verifyAccessToken"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils verifyAccessToken should verify valid access token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should verify valid access token"},{"ancestorTitles":["Auth Utils","verifyAccessToken"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils verifyAccessToken should throw error for invalid token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for invalid token"},{"ancestorTitles":["Auth Utils","verifyAccessToken"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils verifyAccessToken should throw error for expired token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for expired token"},{"ancestorTitles":["Auth Utils","verifyAccessToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils verifyAccessToken should throw error for malformed token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for malformed token"},{"ancestorTitles":["Auth Utils","verifyRefreshToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils verifyRefreshToken should verify valid refresh token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should verify valid refresh token"},{"ancestorTitles":["Auth Utils","verifyRefreshToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils verifyRefreshToken should throw error for invalid refresh token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for invalid refresh token"},{"ancestorTitles":["Auth Utils","verifyRefreshToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils verifyRefreshToken should use correct secret for refresh token verification","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use correct secret for refresh token verification"},{"ancestorTitles":["Auth Utils","generateQRCode"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils generateQRCode should generate QR code data URL","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate QR code data URL"},{"ancestorTitles":["Auth Utils","generateQRCode"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils generateQRCode should handle QR code generation errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle QR code generation errors"},{"ancestorTitles":["Auth Utils","generateQRCode"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils generateQRCode should call toDataURL with correct URL","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should call toDataURL with correct URL"},{"ancestorTitles":["Auth Utils","generateQRCode"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils generateQRCode should generate QR code for TOTP URLs with special characters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate QR code for TOTP URLs with special characters"},{"ancestorTitles":["Auth Utils","Token integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils Token integration should generate and verify tokens end-to-end","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should generate and verify tokens end-to-end"},{"ancestorTitles":["Auth Utils","Token integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils Token integration should reject tokens signed with wrong secret","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject tokens signed with wrong secret"}],"endTime":1751068779226,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/utils/auth.test.ts","startTime":1751068778151,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["RBAC Auth Middleware","requirePermission middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requirePermission middleware should call next() when permission is granted","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call next() when permission is granted"},{"ancestorTitles":["RBAC Auth Middleware","requirePermission middleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requirePermission middleware should call next() with AuthorizationError when permission is denied","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call next() with AuthorizationError when permission is denied"},{"ancestorTitles":["RBAC Auth Middleware","requirePermission middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requirePermission middleware should call next() with AuthenticationError when user is not authenticated","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call next() with AuthenticationError when user is not authenticated"},{"ancestorTitles":["RBAC Auth Middleware","requirePermission middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requirePermission middleware should include resource ownership information from params","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should include resource ownership information from params"},{"ancestorTitles":["RBAC Auth Middleware","requirePermission middleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requirePermission middleware should store allowed attributes when includeAttributes is true","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should store allowed attributes when includeAttributes is true"},{"ancestorTitles":["RBAC Auth Middleware","requireManagePermission middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requireManagePermission middleware should check for manage permission with any scope","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should check for manage permission with any scope"},{"ancestorTitles":["RBAC Auth Middleware","requireManagePermission middleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requireManagePermission middleware should deny access when manage permission is not granted","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should deny access when manage permission is not granted"},{"ancestorTitles":["RBAC Auth Middleware","requireOwnership middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requireOwnership middleware should allow access when user owns the resource","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should allow access when user owns the resource"},{"ancestorTitles":["RBAC Auth Middleware","requireOwnership middleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requireOwnership middleware should deny access when user does not own the resource","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should deny access when user does not own the resource"},{"ancestorTitles":["RBAC Auth Middleware","requireOwnership middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requireOwnership middleware should allow access for OWNER role even if not resource owner","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should allow access for OWNER role even if not resource owner"},{"ancestorTitles":["RBAC Auth Middleware","requireOwnership middleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requireOwnership middleware should call next() with AuthenticationError when user is not authenticated","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should call next() with AuthenticationError when user is not authenticated"},{"ancestorTitles":["RBAC Auth Middleware","requireOwnership middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requireOwnership middleware should call next() with AuthorizationError when resource owner is not specified","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should call next() with AuthorizationError when resource owner is not specified"},{"ancestorTitles":["RBAC Auth Middleware","requireOwnership middleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requireOwnership middleware should use custom resource owner field","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use custom resource owner field"},{"ancestorTitles":["RBAC Auth Middleware","Permission context setup"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware Permission context setup should have permission context set by authentication middleware","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should have permission context set by authentication middleware"}],"endTime":1751068780288,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/middleware/auth-rbac.test.ts","startTime":1751068779227,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Prisma Mock Test"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Prisma Mock Test prismaMock should be defined and mockable","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"prismaMock should be defined and mockable"},{"ancestorTitles":["UserService","createUser"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"UserService createUser should create a user successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create a user successfully"},{"ancestorTitles":["UserService","createUser"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"UserService createUser should throw error if user already exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if user already exists"},{"ancestorTitles":["UserService","createUser"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"UserService createUser should throw error if organization does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if organization does not exist"},{"ancestorTitles":["UserService","getUserById"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"UserService getUserById should return user if found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return user if found"},{"ancestorTitles":["UserService","getUserById"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"UserService getUserById should return null if user not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if user not found"},{"ancestorTitles":["UserService","verifyPassword"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"UserService verifyPassword should return user if password is valid","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return user if password is valid"},{"ancestorTitles":["UserService","verifyPassword"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"UserService verifyPassword should return null if password is invalid","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if password is invalid"},{"ancestorTitles":["UserService","verifyPassword"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"UserService verifyPassword should return null if user not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if user not found"},{"ancestorTitles":["UserService","verifyPassword"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserService verifyPassword should return null if user is inactive","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if user is inactive"},{"ancestorTitles":["UserService","updatePassword"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserService updatePassword should update password successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update password successfully"},{"ancestorTitles":["UserService","updatePassword"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"UserService updatePassword should throw error if current password is incorrect","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if current password is incorrect"},{"ancestorTitles":["UserService","findByOrganization"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"UserService findByOrganization should return paginated users","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return paginated users"},{"ancestorTitles":["UserService","generateApiToken"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"UserService generateApiToken should generate and hash API token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate and hash API token"},{"ancestorTitles":["UserService","validateApiToken"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"UserService validateApiToken should return user if token is valid","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return user if token is valid"},{"ancestorTitles":["UserService","validateApiToken"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"UserService validateApiToken should return null if token is invalid","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return null if token is invalid"}],"endTime":1751068781406,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/user.service.test.ts","startTime":1751068780290,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Validation Schemas","commonSchemas","email validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas email validation should validate correct email format","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate correct email format"},{"ancestorTitles":["Validation Schemas","commonSchemas","email validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas email validation should reject invalid email formats","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should reject invalid email formats"},{"ancestorTitles":["Validation Schemas","commonSchemas","email validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas email validation should reject emails that are too long","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject emails that are too long"},{"ancestorTitles":["Validation Schemas","commonSchemas","password validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas password validation should validate strong passwords","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate strong passwords"},{"ancestorTitles":["Validation Schemas","commonSchemas","password validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas password validation should reject weak passwords","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should reject weak passwords"},{"ancestorTitles":["Validation Schemas","commonSchemas","password validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas password validation should reject passwords that are too long","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject passwords that are too long"},{"ancestorTitles":["Validation Schemas","commonSchemas","UUID validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas UUID validation should validate correct UUID format","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate correct UUID format"},{"ancestorTitles":["Validation Schemas","commonSchemas","UUID validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas UUID validation should reject invalid UUID formats","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should reject invalid UUID formats"},{"ancestorTitles":["Validation Schemas","commonSchemas","name validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas name validation should validate correct names","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should validate correct names"},{"ancestorTitles":["Validation Schemas","commonSchemas","name validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas name validation should reject names with invalid characters","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should reject names with invalid characters"},{"ancestorTitles":["Validation Schemas","commonSchemas","name validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas name validation should reject empty names","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject empty names"},{"ancestorTitles":["Validation Schemas","commonSchemas","TOTP token validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas TOTP token validation should validate correct TOTP tokens","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate correct TOTP tokens"},{"ancestorTitles":["Validation Schemas","commonSchemas","TOTP token validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas TOTP token validation should reject invalid TOTP tokens","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should reject invalid TOTP tokens"},{"ancestorTitles":["Validation Schemas","authSchemas","register schema"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas register schema should validate correct registration data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct registration data"},{"ancestorTitles":["Validation Schemas","authSchemas","register schema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas register schema should validate registration without optional fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate registration without optional fields"},{"ancestorTitles":["Validation Schemas","authSchemas","register schema"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas register schema should reject registration without required fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject registration without required fields"},{"ancestorTitles":["Validation Schemas","authSchemas","login schema"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas login schema should validate correct login data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct login data"},{"ancestorTitles":["Validation Schemas","authSchemas","login schema"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas login schema should validate login with TOTP token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate login with TOTP token"},{"ancestorTitles":["Validation Schemas","authSchemas","login schema"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas login schema should reject login without required fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject login without required fields"},{"ancestorTitles":["Validation Schemas","authSchemas","changePassword schema"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas changePassword schema should validate correct password change data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct password change data"},{"ancestorTitles":["Validation Schemas","authSchemas","changePassword schema"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas changePassword schema should reject password change with weak new password","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject password change with weak new password"},{"ancestorTitles":["Validation Schemas","authSchemas","createApiToken schema"],"duration":58,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas createApiToken schema should validate correct API token data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct API token data"},{"ancestorTitles":["Validation Schemas","authSchemas","createApiToken schema"],"duration":60,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas createApiToken schema should validate API token without expiration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate API token without expiration"},{"ancestorTitles":["Validation Schemas","authSchemas","createApiToken schema"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas createApiToken schema should reject API token with invalid name","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject API token with invalid name"},{"ancestorTitles":["Validation Schemas","userSchemas","create schema"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas userSchemas create schema should validate correct user creation data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct user creation data"},{"ancestorTitles":["Validation Schemas","userSchemas","create schema"],"duration":52,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas userSchemas create schema should validate user creation without optional fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate user creation without optional fields"},{"ancestorTitles":["Validation Schemas","userSchemas","create schema"],"duration":48,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas userSchemas create schema should reject user creation with invalid role","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject user creation with invalid role"},{"ancestorTitles":["Validation Schemas","userSchemas","update schema"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas userSchemas update schema should validate correct user update data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct user update data"},{"ancestorTitles":["Validation Schemas","userSchemas","update schema"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas userSchemas update schema should validate empty update data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate empty update data"},{"ancestorTitles":["Validation Schemas","userSchemas","params schema"],"duration":57,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas userSchemas params schema should validate correct user params","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct user params"},{"ancestorTitles":["Validation Schemas","userSchemas","params schema"],"duration":66,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas userSchemas params schema should reject invalid user ID format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject invalid user ID format"},{"ancestorTitles":["Validation Schemas","organizationSchemas","update schema"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas organizationSchemas update schema should validate correct organization update data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct organization update data"},{"ancestorTitles":["Validation Schemas","organizationSchemas","update schema"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas organizationSchemas update schema should reject organization update with invalid name","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject organization update with invalid name"},{"ancestorTitles":["Validation Schemas","organizationSchemas","setOwner schema"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas organizationSchemas setOwner schema should validate correct set owner data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct set owner data"},{"ancestorTitles":["Validation Schemas","organizationSchemas","setOwner schema"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas organizationSchemas setOwner schema should reject invalid user ID","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject invalid user ID"},{"ancestorTitles":["Validation Schemas","organizationSchemas","params schema"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas organizationSchemas params schema should validate correct organization params","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct organization params"},{"ancestorTitles":["Validation Schemas","organizationSchemas","params schema"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas organizationSchemas params schema should reject invalid organization ID format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject invalid organization ID format"}],"endTime":1751068785009,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/utils/validation.test.ts","startTime":1751068781408,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["PermissionManager","Basic Permission Checks"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Basic Permission Checks should grant VIEWER read permissions for assets","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should grant VIEWER read permissions for assets"},{"ancestorTitles":["PermissionManager","Basic Permission Checks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Basic Permission Checks should deny VIEWER write permissions for assets","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should deny VIEWER write permissions for assets"},{"ancestorTitles":["PermissionManager","Basic Permission Checks"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Basic Permission Checks should grant MEMBER create permissions for assets","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should grant MEMBER create permissions for assets"},{"ancestorTitles":["PermissionManager","Basic Permission Checks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Basic Permission Checks should grant MANAGER read permissions for all assets","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should grant MANAGER read permissions for all assets"},{"ancestorTitles":["PermissionManager","Basic Permission Checks"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Basic Permission Checks should grant OWNER manage permissions for all resources","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should grant OWNER manage permissions for all resources"},{"ancestorTitles":["PermissionManager","Scope-based Permissions"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Scope-based Permissions should allow MEMBER to update own assets","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow MEMBER to update own assets"},{"ancestorTitles":["PermissionManager","Scope-based Permissions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Scope-based Permissions should deny MEMBER to update others assets","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should deny MEMBER to update others assets"},{"ancestorTitles":["PermissionManager","Scope-based Permissions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Scope-based Permissions should allow MANAGER to update any assets","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow MANAGER to update any assets"},{"ancestorTitles":["PermissionManager","Organization Constraints"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Organization Constraints should deny access to resources from different organization","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should deny access to resources from different organization"},{"ancestorTitles":["PermissionManager","Organization Constraints"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Organization Constraints should allow access to resources from same organization","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow access to resources from same organization"},{"ancestorTitles":["PermissionManager","Role Hierarchy"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Role Hierarchy should inherit permissions from lower roles","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should inherit permissions from lower roles"},{"ancestorTitles":["PermissionManager","Role Hierarchy"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Role Hierarchy should allow role assumption down the hierarchy","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should allow role assumption down the hierarchy"},{"ancestorTitles":["PermissionManager","Role Hierarchy"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Role Hierarchy should deny role assumption up the hierarchy","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should deny role assumption up the hierarchy"},{"ancestorTitles":["PermissionManager","Manage Permissions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Manage Permissions should treat manage as including all CRUD operations","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should treat manage as including all CRUD operations"},{"ancestorTitles":["PermissionManager","Attribute Filtering"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Attribute Filtering should filter attributes with wildcard and exclusions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter attributes with wildcard and exclusions"},{"ancestorTitles":["PermissionManager","Attribute Filtering"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Attribute Filtering should filter attributes with explicit inclusion","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter attributes with explicit inclusion"},{"ancestorTitles":["PermissionManager","Role Capabilities"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Role Capabilities should return correct capabilities for VIEWER","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return correct capabilities for VIEWER"},{"ancestorTitles":["PermissionManager","Role Capabilities"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Role Capabilities should return correct capabilities for OWNER","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return correct capabilities for OWNER"},{"ancestorTitles":["PermissionManager","Role Capabilities"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Role Capabilities should return available actions for role on resource","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return available actions for role on resource"},{"ancestorTitles":["PermissionManager","Permission String Validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Permission String Validation should handle permission strings with scope","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle permission strings with scope"},{"ancestorTitles":["PermissionManager","Permission String Validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Permission String Validation should handle permission strings without scope","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle permission strings without scope"},{"ancestorTitles":["PermissionManager","Permission String Validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Permission String Validation should fall back from own to any scope","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fall back from own to any scope"}],"endTime":1751068786129,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/lib/permissions.test.ts","startTime":1751068785020,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["TaskService - Status Transition Logic","validateStatusTransition (private method testing via updateTask)"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic validateStatusTransition (private method testing via updateTask) should allow valid status transitions","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should allow valid status transitions"},{"ancestorTitles":["TaskService - Status Transition Logic","validateStatusTransition (private method testing via updateTask)"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic validateStatusTransition (private method testing via updateTask) should reject invalid status transitions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should reject invalid status transitions"},{"ancestorTitles":["TaskService - Status Transition Logic","validateStatusTransition (private method testing via updateTask)"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic validateStatusTransition (private method testing via updateTask) should allow same status (no change)","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should allow same status (no change)"},{"ancestorTitles":["TaskService - Status Transition Logic","Error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic Error handling should throw NotFoundError for appropriate cases","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundError for appropriate cases"},{"ancestorTitles":["TaskService - Status Transition Logic","Error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic Error handling should throw ConflictError for appropriate cases","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw ConflictError for appropriate cases"},{"ancestorTitles":["TaskService - Status Transition Logic","Error handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic Error handling should throw ValidationError for appropriate cases","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw ValidationError for appropriate cases"},{"ancestorTitles":["TaskService - Status Transition Logic","Service instantiation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic Service instantiation should create TaskService instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create TaskService instance"},{"ancestorTitles":["TaskService - Status Transition Logic","Service instantiation"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic Service instantiation should have required methods","invocations":1,"location":null,"numPassingAsserts":13,"retryReasons":[],"status":"passed","title":"should have required methods"},{"ancestorTitles":["TaskService - Status Transition Logic","Interface compliance"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic Interface compliance should have all required interfaces defined","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should have all required interfaces defined"}],"endTime":1751068787220,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/task.service.simple.test.ts","startTime":1751068786131,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["AppriseService","getInstance"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService getInstance should return singleton instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return singleton instance"},{"ancestorTitles":["AppriseService","isConfigured"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService isConfigured should return true when properly configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when properly configured"},{"ancestorTitles":["AppriseService","isConfigured"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService isConfigured should return false when API URL is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when API URL is missing"},{"ancestorTitles":["AppriseService","sendNotification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService sendNotification should send notification successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should send notification successfully"},{"ancestorTitles":["AppriseService","sendNotification"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService sendNotification should handle HTTP errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle HTTP errors"},{"ancestorTitles":["AppriseService","sendNotification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService sendNotification should return false when not configured","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return false when not configured"}],"endTime":1751068788280,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/apprise.service.simple.test.ts","startTime":1751068787222,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["OIDCService","isAvailable"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService isAvailable should return true when properly configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when properly configured"},{"ancestorTitles":["OIDCService","isAvailable"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService isAvailable should return false when not configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when not configured"},{"ancestorTitles":["OIDCService","generateAuthorizationUrl"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService generateAuthorizationUrl should generate authorization URL successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate authorization URL successfully"},{"ancestorTitles":["OIDCService","exchangeCodeForTokens"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService exchangeCodeForTokens should exchange code for tokens successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should exchange code for tokens successfully"},{"ancestorTitles":["OIDCService","exchangeCodeForTokens"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService exchangeCodeForTokens should throw error for invalid state parameter","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid state parameter"},{"ancestorTitles":["OIDCService","getUserInfo"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService getUserInfo should get user info successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get user info successfully"},{"ancestorTitles":["OIDCService","refreshTokens"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService refreshTokens should refresh tokens successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should refresh tokens successfully"},{"ancestorTitles":["OIDCService","generateLogoutUrl"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService generateLogoutUrl should generate logout URL successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate logout URL successfully"},{"ancestorTitles":["OIDCService","generateLogoutUrl"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService generateLogoutUrl should generate logout URL without optional parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate logout URL without optional parameters"}],"endTime":1751068789337,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/oidc.service.test.ts","startTime":1751068788281,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Schedule-Task Integration","Task template validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Task template validation should validate valid task template structure","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate valid task template structure"},{"ancestorTitles":["Schedule-Task Integration","Task template validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Task template validation should identify invalid task template","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should identify invalid task template"},{"ancestorTitles":["Schedule-Task Integration","Schedule type handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Schedule type handling should handle ONE_OFF schedule types","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle ONE_OFF schedule types"},{"ancestorTitles":["Schedule-Task Integration","Schedule type handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Schedule type handling should handle FIXED_INTERVAL schedule types","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle FIXED_INTERVAL schedule types"},{"ancestorTitles":["Schedule-Task Integration","Schedule type handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Schedule type handling should handle CUSTOM schedule types","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle CUSTOM schedule types"},{"ancestorTitles":["Schedule-Task Integration","Task priority mapping"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Task priority mapping should handle all valid task priorities","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle all valid task priorities"},{"ancestorTitles":["Schedule-Task Integration","Task priority mapping"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Task priority mapping should default to MEDIUM priority","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should default to MEDIUM priority"},{"ancestorTitles":["Schedule-Task Integration","Data type conversions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Data type conversions should handle string to number conversions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle string to number conversions"},{"ancestorTitles":["Schedule-Task Integration","Data type conversions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Data type conversions should handle array validation","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle array validation"},{"ancestorTitles":["Schedule-Task Integration","Error handling scenarios"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Error handling scenarios should handle null or undefined templates gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle null or undefined templates gracefully"},{"ancestorTitles":["Schedule-Task Integration","Error handling scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Error handling scenarios should validate required fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate required fields"}],"endTime":1751068790403,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/schedule-task-integration.test.ts","startTime":1751068789338,"status":"passed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1751068817150,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/test/unit/services/gdpr-compliance.service.test.ts\u001b[0m:\u001b[93m5\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS6133: \u001b[0m'AuditService' is declared but its value is never read.\n\n    \u001b[7m5\u001b[0m import { AuditService } from '../../../services/audit.service';\n    \u001b[7m \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/gdpr-compliance.service.test.ts\u001b[0m:\u001b[93m72\u001b[0m:\u001b[93m60\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; email: string; fullName: string; organizationId: string; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m 72\u001b[0m     (prisma.user.findFirst as jest.Mock).mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                                           ~\u001b[0m\n    \u001b[7m 73\u001b[0m       id: 'user-123',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m 76\u001b[0m       organizationId: 'org-123',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m 77\u001b[0m     });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/gdpr-compliance.service.test.ts\u001b[0m:\u001b[93m80\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'callback' is of type 'unknown'.\n\n    \u001b[7m80\u001b[0m       return callback(prisma);\n    \u001b[7m  \u001b[0m \u001b[91m             ~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/gdpr-compliance.service.test.ts\u001b[0m:\u001b[93m121\u001b[0m:\u001b[93m62\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'null' is not assignable to parameter of type 'never'.\n\n    \u001b[7m121\u001b[0m       (prisma.user.findFirst as jest.Mock).mockResolvedValue(null);\n    \u001b[7m   \u001b[0m \u001b[91m                                                             ~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/gdpr-compliance.service.test.ts\u001b[0m:\u001b[93m173\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS6133: \u001b[0m'requestId' is declared but its value is never read.\n\n    \u001b[7m173\u001b[0m       const requestId = 'test-request-123';\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/gdpr-compliance.service.test.ts\u001b[0m:\u001b[93m184\u001b[0m:\u001b[93m73\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ fileName: string; filePath: string; recordCount: number; format: string; createdAt: Date; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m184\u001b[0m       (dataExportService.exportUserData as jest.Mock).mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                                                        ~\u001b[0m\n    \u001b[7m185\u001b[0m         fileName: 'user-export.json',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m189\u001b[0m         createdAt: new Date(),\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m190\u001b[0m       });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/gdpr-compliance.service.test.ts\u001b[0m:\u001b[93m230\u001b[0m:\u001b[93m10\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2532: \u001b[0mObject is possibly 'undefined'.\n\n    \u001b[7m230\u001b[0m         (prisma[model as keyof typeof prisma].deleteMany as jest.Mock).mockResolvedValue(result);\n    \u001b[7m   \u001b[0m \u001b[91m         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/gdpr-compliance.service.test.ts\u001b[0m:\u001b[93m230\u001b[0m:\u001b[93m47\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'deleteMany' does not exist on type '{ types: { payload: any; operations: { $executeRaw: { args: [query: TemplateStringsArray | Sql, ...values: any[]]; result: any; }; $executeRawUnsafe: { args: [query: string, ...values: any[]]; result: any; }; $queryRaw: { ...; }; $queryRawUnsafe: { ...; }; }; }; } | ... 48 more ... | SyncConflictDelegate<...>'.\n      Property 'deleteMany' does not exist on type '{ types: { payload: any; operations: { $executeRaw: { args: [query: TemplateStringsArray | Sql, ...values: any[]]; result: any; }; $executeRawUnsafe: { args: [query: string, ...values: any[]]; result: any; }; $queryRaw: { ...; }; $queryRawUnsafe: { ...; }; }; }; }'.\n\n    \u001b[7m230\u001b[0m         (prisma[model as keyof typeof prisma].deleteMany as jest.Mock).mockResolvedValue(result);\n    \u001b[7m   \u001b[0m \u001b[91m                                              ~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/gdpr-compliance.service.test.ts\u001b[0m:\u001b[93m230\u001b[0m:\u001b[93m90\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ count: number; } | { count: number; } | { count: number; } | { count: number; } | { count: number; } | { count: number; } | { count: number; } | { count: number; } | { count: number; }' is not assignable to parameter of type 'never'.\n      Type '{ count: number; }' is not assignable to type 'never'.\n\n    \u001b[7m230\u001b[0m         (prisma[model as keyof typeof prisma].deleteMany as jest.Mock).mockResolvedValue(result);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                         ~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/gdpr-compliance.service.test.ts\u001b[0m:\u001b[93m279\u001b[0m:\u001b[93m59\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; email: string; fullName: string; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m279\u001b[0m       (prisma.user.update as jest.Mock).mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                                          ~\u001b[0m\n    \u001b[7m280\u001b[0m         id: 'user-123',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m282\u001b[0m         fullName: 'Anonymous User',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m283\u001b[0m       });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/gdpr-compliance.service.test.ts\u001b[0m:\u001b[93m285\u001b[0m:\u001b[93m70\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ count: number; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m285\u001b[0m       (prisma.taskComment.updateMany as jest.Mock).mockResolvedValue({ count: 5 });\n    \u001b[7m   \u001b[0m \u001b[91m                                                                     ~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/gdpr-compliance.service.test.ts\u001b[0m:\u001b[93m286\u001b[0m:\u001b[93m66\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ count: number; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m286\u001b[0m       (prisma.session.deleteMany as jest.Mock).mockResolvedValue({ count: 2 });\n    \u001b[7m   \u001b[0m \u001b[91m                                                                 ~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/gdpr-compliance.service.test.ts\u001b[0m:\u001b[93m287\u001b[0m:\u001b[93m67\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ count: number; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m287\u001b[0m       (prisma.apiToken.deleteMany as jest.Mock).mockResolvedValue({ count: 1 });\n    \u001b[7m   \u001b[0m \u001b[91m                                                                  ~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/gdpr-compliance.service.test.ts\u001b[0m:\u001b[93m288\u001b[0m:\u001b[93m78\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ count: number; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m288\u001b[0m       (prisma.calendarIntegration.deleteMany as jest.Mock).mockResolvedValue({ count: 1 });\n    \u001b[7m   \u001b[0m \u001b[91m                                                                             ~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/gdpr-compliance.service.test.ts\u001b[0m:\u001b[93m289\u001b[0m:\u001b[93m75\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ count: number; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m289\u001b[0m       (prisma.pushSubscription.deleteMany as jest.Mock).mockResolvedValue({ count: 1 });\n    \u001b[7m   \u001b[0m \u001b[91m                                                                          ~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/gdpr-compliance.service.test.ts\u001b[0m:\u001b[93m413\u001b[0m:\u001b[93m67\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '({ id: string; userId: string; newValue: { type: string; requestType: string; }; createdAt: Date; user: { id: string; email: string; fullName: string; }; } | { id: string; userId: string; newValue: { ...; }; createdAt: Date; user: { ...; }; })[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m413\u001b[0m       (prisma.auditTrail.findMany as jest.Mock).mockResolvedValue(mockAuditTrails);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                  ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/gdpr-compliance.service.test.ts\u001b[0m:\u001b[93m414\u001b[0m:\u001b[93m64\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'number' is not assignable to parameter of type 'never'.\n\n    \u001b[7m414\u001b[0m       (prisma.auditTrail.count as jest.Mock).mockResolvedValue(mockAuditTrails.length);\n    \u001b[7m   \u001b[0m \u001b[91m                                                               ~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/gdpr-compliance.service.test.ts","startTime":1751068817150,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1751068817150,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/services/gdpr-compliance.service.ts\u001b[0m:\u001b[93m211\u001b[0m:\u001b[93m62\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TransactionPrismaClient'.\n\n    \u001b[7m211\u001b[0m     const deletedData = await prisma.$transaction(async (tx: TransactionPrismaClient) => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                             ~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/services/gdpr-compliance.service.ts\u001b[0m:\u001b[93m327\u001b[0m:\u001b[93m57\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TransactionPrismaClient'.\n\n    \u001b[7m327\u001b[0m     const result = await prisma.$transaction(async (tx: TransactionPrismaClient) => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                        ~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/gdpr-compliance.service.simple.test.ts","startTime":1751068817150,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1751068817150,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m4\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS6133: \u001b[0m'AuditService' is declared but its value is never read.\n\n    \u001b[7m4\u001b[0m import { AuditService } from '../../../services/audit.service';\n    \u001b[7m \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m6\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS6192: \u001b[0mAll imports in import declaration are unused.\n\n    \u001b[7m6\u001b[0m import { AssetCategory, AssetStatus, TaskStatus, TaskPriority } from '@prisma/client';\n    \u001b[7m \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m38\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'callback' is of type 'unknown'.\n\n    \u001b[7m38\u001b[0m             callback();\n    \u001b[7m  \u001b[0m \u001b[91m            ~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m41\u001b[0m:\u001b[93m28\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'callback' is of type 'unknown'.\n\n    \u001b[7m41\u001b[0m           setTimeout(() => callback(), 10);\n    \u001b[7m  \u001b[0m \u001b[91m                           ~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m84\u001b[0m:\u001b[93m50\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'Buffer<ArrayBuffer>' is not assignable to parameter of type 'never'.\n\n    \u001b[7m84\u001b[0m     (fs.readFile as jest.Mock).mockResolvedValue(Buffer.from('test data'));\n    \u001b[7m  \u001b[0m \u001b[91m                                                 ~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m98\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'data' is of type 'unknown'.\n\n    \u001b[7m98\u001b[0m           ...data.data,\n    \u001b[7m  \u001b[0m \u001b[91m             ~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m176\u001b[0m:\u001b[93m9\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'Buffer<ArrayBuffer>' is not assignable to parameter of type 'never'.\n\n    \u001b[7m176\u001b[0m         Buffer.from(JSON.stringify([\n    \u001b[7m   \u001b[0m \u001b[91m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m177\u001b[0m           { name: 'Asset 1', category: 'INVALID_CATEGORY' },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m178\u001b[0m           { name: 'Asset 2', category: 'SOFTWARE' },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m179\u001b[0m         ]))\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m183\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'Error' is not assignable to parameter of type 'never'.\n\n    \u001b[7m183\u001b[0m         .mockRejectedValueOnce(new Error('Invalid category'))\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m184\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; name: string; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m184\u001b[0m         .mockResolvedValueOnce({ id: 'asset-2', name: 'Asset 2' });\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m207\u001b[0m:\u001b[93m9\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'Buffer<ArrayBuffer>' is not assignable to parameter of type 'never'.\n\n    \u001b[7m207\u001b[0m         Buffer.from(JSON.stringify([\n    \u001b[7m   \u001b[0m \u001b[91m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m208\u001b[0m           { name: 'Asset 1', category: 'INVALID_CATEGORY' },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m209\u001b[0m           { name: 'Asset 2', category: 'SOFTWARE' },\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m210\u001b[0m         ]))\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m214\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'Error' is not assignable to parameter of type 'never'.\n\n    \u001b[7m214\u001b[0m         .mockRejectedValueOnce(new Error('Invalid category'));\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m233\u001b[0m:\u001b[93m9\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'Buffer<ArrayBuffer>' is not assignable to parameter of type 'never'.\n\n    \u001b[7m233\u001b[0m         Buffer.from(JSON.stringify(assets))\n    \u001b[7m   \u001b[0m \u001b[91m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m251\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'data' is of type 'unknown'.\n\n    \u001b[7m251\u001b[0m           ...data.data,\n    \u001b[7m   \u001b[0m \u001b[91m             ~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m264\u001b[0m:\u001b[93m9\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'Buffer<ArrayBuffer>' is not assignable to parameter of type 'never'.\n\n    \u001b[7m264\u001b[0m         Buffer.from(JSON.stringify(locations))\n    \u001b[7m   \u001b[0m \u001b[91m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m277\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2532: \u001b[0mObject is possibly 'undefined'.\n\n    \u001b[7m277\u001b[0m       expect(createCalls[0][0].data.name).toBe('Root 1'); // Root first\n    \u001b[7m   \u001b[0m \u001b[91m             ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m277\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2571: \u001b[0mObject is of type 'unknown'.\n\n    \u001b[7m277\u001b[0m       expect(createCalls[0][0].data.name).toBe('Root 1'); // Root first\n    \u001b[7m   \u001b[0m \u001b[91m             ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m278\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2532: \u001b[0mObject is possibly 'undefined'.\n\n    \u001b[7m278\u001b[0m       expect(createCalls[1][0].data.name).toBe('Child 1'); // Then child\n    \u001b[7m   \u001b[0m \u001b[91m             ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m278\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2571: \u001b[0mObject is of type 'unknown'.\n\n    \u001b[7m278\u001b[0m       expect(createCalls[1][0].data.name).toBe('Child 1'); // Then child\n    \u001b[7m   \u001b[0m \u001b[91m             ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m279\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2532: \u001b[0mObject is possibly 'undefined'.\n\n    \u001b[7m279\u001b[0m       expect(createCalls[2][0].data.name).toBe('Child 2'); // Then grandchild\n    \u001b[7m   \u001b[0m \u001b[91m             ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m279\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2571: \u001b[0mObject is of type 'unknown'.\n\n    \u001b[7m279\u001b[0m       expect(createCalls[2][0].data.name).toBe('Child 2'); // Then grandchild\n    \u001b[7m   \u001b[0m \u001b[91m             ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m289\u001b[0m:\u001b[93m9\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'Buffer<ArrayBuffer>' is not assignable to parameter of type 'never'.\n\n    \u001b[7m289\u001b[0m         Buffer.from(JSON.stringify(locations))\n    \u001b[7m   \u001b[0m \u001b[91m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m293\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; name: string; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m293\u001b[0m         .mockResolvedValueOnce({ id: 'new-parent', name: 'Parent' })\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m294\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; name: string; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m294\u001b[0m         .mockResolvedValueOnce({ id: 'new-child', name: 'Child' });\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m296\u001b[0m:\u001b[93m66\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; path: string; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m296\u001b[0m       (prisma.location.findFirst as jest.Mock).mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                                                 ~\u001b[0m\n    \u001b[7m297\u001b[0m         id: 'new-parent',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m298\u001b[0m         path: '/',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m299\u001b[0m       });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m429\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18048: \u001b[0m'month' is possibly 'undefined'.\n\n    \u001b[7m429\u001b[0m             return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-import.service.test.ts\u001b[0m:\u001b[93m429\u001b[0m:\u001b[93m57\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18048: \u001b[0m'day' is possibly 'undefined'.\n\n    \u001b[7m429\u001b[0m             return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n    \u001b[7m   \u001b[0m \u001b[91m                                                        ~~~\u001b[0m\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/data-import.service.test.ts","startTime":1751068817150,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1751068817150,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m67\u001b[0m:\u001b[93m6\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m67\u001b[0m     (fs.access as jest.MockedFunction<typeof fs.access>).mockRejectedValue(new Error('Not found'));\n    \u001b[7m  \u001b[0m \u001b[91m     ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m67\u001b[0m:\u001b[93m46\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m67\u001b[0m     (fs.access as jest.MockedFunction<typeof fs.access>).mockRejectedValue(new Error('Not found'));\n    \u001b[7m  \u001b[0m \u001b[91m                                             ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m68\u001b[0m:\u001b[93m6\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m68\u001b[0m     (fs.mkdir as jest.MockedFunction<typeof fs.mkdir>).mockResolvedValue(undefined as any);\n    \u001b[7m  \u001b[0m \u001b[91m     ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m68\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m68\u001b[0m     (fs.mkdir as jest.MockedFunction<typeof fs.mkdir>).mockResolvedValue(undefined as any);\n    \u001b[7m  \u001b[0m \u001b[91m                                            ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m69\u001b[0m:\u001b[93m6\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m69\u001b[0m     (fs.writeFile as jest.MockedFunction<typeof fs.writeFile>).mockResolvedValue(undefined as any);\n    \u001b[7m  \u001b[0m \u001b[91m     ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m69\u001b[0m:\u001b[93m49\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m69\u001b[0m     (fs.writeFile as jest.MockedFunction<typeof fs.writeFile>).mockResolvedValue(undefined as any);\n    \u001b[7m  \u001b[0m \u001b[91m                                                ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m70\u001b[0m:\u001b[93m6\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m70\u001b[0m     (fs.readdir as jest.MockedFunction<typeof fs.readdir>).mockResolvedValue([]);\n    \u001b[7m  \u001b[0m \u001b[91m     ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m70\u001b[0m:\u001b[93m47\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m70\u001b[0m     (fs.readdir as jest.MockedFunction<typeof fs.readdir>).mockResolvedValue([]);\n    \u001b[7m  \u001b[0m \u001b[91m                                              ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m71\u001b[0m:\u001b[93m6\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m71\u001b[0m     (fs.stat as jest.MockedFunction<typeof fs.stat>).mockResolvedValue({ mtime: new Date() } as any);\n    \u001b[7m  \u001b[0m \u001b[91m     ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m71\u001b[0m:\u001b[93m44\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m71\u001b[0m     (fs.stat as jest.MockedFunction<typeof fs.stat>).mockResolvedValue({ mtime: new Date() } as any);\n    \u001b[7m  \u001b[0m \u001b[91m                                           ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m72\u001b[0m:\u001b[93m6\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m72\u001b[0m     (fs.unlink as jest.MockedFunction<typeof fs.unlink>).mockResolvedValue(undefined as any);\n    \u001b[7m  \u001b[0m \u001b[91m     ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m72\u001b[0m:\u001b[93m46\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m72\u001b[0m     (fs.unlink as jest.MockedFunction<typeof fs.unlink>).mockResolvedValue(undefined as any);\n    \u001b[7m  \u001b[0m \u001b[91m                                             ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m104\u001b[0m:\u001b[93m102\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '({ id: string; name: string; category: \"HARDWARE\"; status: \"OPERATIONAL\"; organizationId: string; purchasePrice: number; purchaseDate: Date; tags: string[]; } | { id: string; name: string; category: \"SOFTWARE\"; ... 4 more ...; tags: string[]; })[]' is not assignable to parameter of type '{ link: string | null; name: string; id: string; createdAt: Date; updatedAt: Date; organizationId: string; category: AssetCategory; status: AssetStatus; ... 20 more ...; qrCode: string | null; }[]'.\n      Type '{ id: string; name: string; category: \"HARDWARE\"; status: \"OPERATIONAL\"; organizationId: string; purchasePrice: number; purchaseDate: Date; tags: string[]; } | { id: string; name: string; category: \"SOFTWARE\"; ... 4 more ...; tags: string[]; }' is not assignable to type '{ link: string | null; name: string; id: string; createdAt: Date; updatedAt: Date; organizationId: string; category: AssetCategory; status: AssetStatus; ... 20 more ...; qrCode: string | null; }'.\n        Type '{ id: string; name: string; category: \"HARDWARE\"; status: \"OPERATIONAL\"; organizationId: string; purchasePrice: number; purchaseDate: Date; tags: string[]; }' is missing the following properties from type '{ link: string | null; name: string; id: string; createdAt: Date; updatedAt: Date; organizationId: string; category: AssetCategory; status: AssetStatus; ... 20 more ...; qrCode: string | null; }': link, createdAt, updatedAt, assetTemplateId, and 17 more.\n\n    \u001b[7m104\u001b[0m       (prisma.asset.findMany as jest.MockedFunction<typeof prisma.asset.findMany>).mockResolvedValue(mockAssets);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                     ~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m120\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m120\u001b[0m       expect(fs.writeFile).toHaveBeenCalledWith(\n    \u001b[7m   \u001b[0m \u001b[91m             ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m139\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m139\u001b[0m       expect(fs.writeFile).toHaveBeenCalledWith(\n    \u001b[7m   \u001b[0m \u001b[91m             ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m213\u001b[0m:\u001b[93m26\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m213\u001b[0m       const writeCall = (fs.writeFile as jest.Mock).mock.calls[0];\n    \u001b[7m   \u001b[0m \u001b[91m                         ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m214\u001b[0m:\u001b[93m38\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18048: \u001b[0m'writeCall' is possibly 'undefined'.\n\n    \u001b[7m214\u001b[0m       const writtenData = JSON.parse(writeCall[1]);\n    \u001b[7m   \u001b[0m \u001b[91m                                     ~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m214\u001b[0m:\u001b[93m38\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'unknown' is not assignable to parameter of type 'string'.\n\n    \u001b[7m214\u001b[0m       const writtenData = JSON.parse(writeCall[1]);\n    \u001b[7m   \u001b[0m \u001b[91m                                     ~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m233\u001b[0m:\u001b[93m62\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; email: string; fullName: string; organizationId: string; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m233\u001b[0m       (prisma.user.findFirst as jest.Mock).mockResolvedValue(mockUser);\n    \u001b[7m   \u001b[0m \u001b[91m                                                             ~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m234\u001b[0m:\u001b[93m62\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'never[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m234\u001b[0m       (prisma.asset.findMany as jest.Mock).mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                                             ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m235\u001b[0m:\u001b[93m61\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'never[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m235\u001b[0m       (prisma.task.findMany as jest.Mock).mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                                            ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m236\u001b[0m:\u001b[93m71\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'never[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m236\u001b[0m       (prisma.taskAssignment.findMany as jest.Mock).mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                      ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m237\u001b[0m:\u001b[93m68\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'never[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m237\u001b[0m       (prisma.taskComment.findMany as jest.Mock).mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                   ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m238\u001b[0m:\u001b[93m71\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'never[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m238\u001b[0m       (prisma.activityStream.findMany as jest.Mock).mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                      ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m239\u001b[0m:\u001b[93m69\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'never[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m239\u001b[0m       (prisma.notification.findMany as jest.Mock).mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                    ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m240\u001b[0m:\u001b[93m64\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'never[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m240\u001b[0m       (prisma.session.findMany as jest.Mock).mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                                               ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m241\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'never[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m241\u001b[0m       (prisma.apiToken.findMany as jest.Mock).mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m242\u001b[0m:\u001b[93m76\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'never[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m242\u001b[0m       (prisma.calendarIntegration.findMany as jest.Mock).mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                           ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m254\u001b[0m:\u001b[93m26\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m254\u001b[0m       const writeCall = (fs.writeFile as jest.Mock).mock.calls[0];\n    \u001b[7m   \u001b[0m \u001b[91m                         ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m255\u001b[0m:\u001b[93m38\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18048: \u001b[0m'writeCall' is possibly 'undefined'.\n\n    \u001b[7m255\u001b[0m       const writtenData = JSON.parse(writeCall[1]);\n    \u001b[7m   \u001b[0m \u001b[91m                                     ~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m255\u001b[0m:\u001b[93m38\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'unknown' is not assignable to parameter of type 'string'.\n\n    \u001b[7m255\u001b[0m       const writtenData = JSON.parse(writeCall[1]);\n    \u001b[7m   \u001b[0m \u001b[91m                                     ~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m273\u001b[0m:\u001b[93m62\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'null' is not assignable to parameter of type 'never'.\n\n    \u001b[7m273\u001b[0m       (prisma.user.findFirst as jest.Mock).mockResolvedValue(null);\n    \u001b[7m   \u001b[0m \u001b[91m                                                             ~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m287\u001b[0m:\u001b[93m8\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m287\u001b[0m       (fs.readdir as jest.Mock).mockResolvedValue(['old-file.json', 'recent-file.json']);\n    \u001b[7m   \u001b[0m \u001b[91m       ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m287\u001b[0m:\u001b[93m51\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'string[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m287\u001b[0m       (fs.readdir as jest.Mock).mockResolvedValue(['old-file.json', 'recent-file.json']);\n    \u001b[7m   \u001b[0m \u001b[91m                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m288\u001b[0m:\u001b[93m8\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m288\u001b[0m       (fs.stat as jest.Mock)\n    \u001b[7m   \u001b[0m \u001b[91m       ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m289\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ mtime: Date; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m289\u001b[0m         .mockResolvedValueOnce({ mtime: oldDate })\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m290\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ mtime: Date; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m290\u001b[0m         .mockResolvedValueOnce({ mtime: recentDate });\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m295\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m295\u001b[0m       expect(fs.unlink).toHaveBeenCalledTimes(1);\n    \u001b[7m   \u001b[0m \u001b[91m             ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m296\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m296\u001b[0m       expect(fs.unlink).toHaveBeenCalledWith(expect.stringContaining('old-file.json'));\n    \u001b[7m   \u001b[0m \u001b[91m             ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m303\u001b[0m:\u001b[93m8\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m303\u001b[0m       (fs.readdir as jest.Mock).mockResolvedValue(['recent-file.json']);\n    \u001b[7m   \u001b[0m \u001b[91m       ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m303\u001b[0m:\u001b[93m51\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'string[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m303\u001b[0m       (fs.readdir as jest.Mock).mockResolvedValue(['recent-file.json']);\n    \u001b[7m   \u001b[0m \u001b[91m                                                  ~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m304\u001b[0m:\u001b[93m8\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m304\u001b[0m       (fs.stat as jest.Mock).mockResolvedValue({ mtime: recentDate });\n    \u001b[7m   \u001b[0m \u001b[91m       ~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m304\u001b[0m:\u001b[93m48\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ mtime: Date; }' is not assignable to parameter of type 'never'.\n\n    \u001b[7m304\u001b[0m       (fs.stat as jest.Mock).mockResolvedValue({ mtime: recentDate });\n    \u001b[7m   \u001b[0m \u001b[91m                                               ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/data-export.service.test.ts\u001b[0m:\u001b[93m309\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'fs'.\n\n    \u001b[7m309\u001b[0m       expect(fs.unlink).not.toHaveBeenCalled();\n    \u001b[7m   \u001b[0m \u001b[91m             ~~\u001b[0m\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/data-export.service.test.ts","startTime":1751068817150,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1751068817150,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m48\u001b[0m:\u001b[93m24\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 1 arguments, but got 0.\n\n    \u001b[7m48\u001b[0m     dashboardService = new DashboardService();\n    \u001b[7m  \u001b[0m \u001b[91m                       ~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/services/dashboard.service.ts\u001b[0m:\u001b[93m48\u001b[0m:\u001b[93m15\u001b[0m\n        \u001b[7m48\u001b[0m   constructor(private prisma: PrismaClient) {}\n        \u001b[7m  \u001b[0m \u001b[96m              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'prisma' was not provided.\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m56\u001b[0m:\u001b[93m10\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends AssetCountArgs>(args?: Subset<T, AssetCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof AssetCountAggregateOutputType ? AssetCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m56\u001b[0m         .mockResolvedValueOnce(100) // totalAssets\n    \u001b[7m  \u001b[0m \u001b[91m         ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m60\u001b[0m:\u001b[93m10\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends TaskCountArgs>(args?: Subset<T, TaskCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof TaskCountAggregateOutputType ? TaskCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m60\u001b[0m         .mockResolvedValueOnce(200) // totalTasks\n    \u001b[7m  \u001b[0m \u001b[91m         ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m67\u001b[0m:\u001b[93m10\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends UserCountArgs>(args?: Subset<T, UserCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof UserCountAggregateOutputType ? UserCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m67\u001b[0m         .mockResolvedValueOnce(10) // totalUsers\n    \u001b[7m  \u001b[0m \u001b[91m         ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m70\u001b[0m:\u001b[93m34\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs<DefaultArgs>>) => PrismaPromise<GetAssetAggregateType<T>>'.\n\n    \u001b[7m70\u001b[0m       mockPrisma.asset.aggregate.mockResolvedValueOnce({\n    \u001b[7m  \u001b[0m \u001b[91m                                 ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m75\u001b[0m:\u001b[93m10\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends AssetCountArgs>(args?: Subset<T, AssetCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof AssetCountAggregateOutputType ? AssetCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m75\u001b[0m         .mockResolvedValueOnce(5) // assetsAddedInPeriod\n    \u001b[7m  \u001b[0m \u001b[91m         ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m78\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends ActivityStreamFindManyArgs>(args?: SelectSubset<T, ActivityStreamFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<...>'.\n\n    \u001b[7m78\u001b[0m       mockPrisma.activityStream.findMany.mockResolvedValueOnce([\n    \u001b[7m  \u001b[0m \u001b[91m                                         ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m90\u001b[0m:\u001b[93m10\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$TaskPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m90\u001b[0m         .mockResolvedValueOnce([\n    \u001b[7m  \u001b[0m \u001b[91m         ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m107\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$AssetPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m107\u001b[0m       mockPrisma.asset.findMany.mockResolvedValueOnce([\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m120\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getOverviewDashboard' does not exist on type 'DashboardService'.\n\n    \u001b[7m120\u001b[0m       const result = await dashboardService.getOverviewDashboard(request);\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m149\u001b[0m:\u001b[93m30\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetCountArgs>(args?: Subset<T, AssetCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof AssetCountAggregateOutputType ? AssetCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m149\u001b[0m       mockPrisma.asset.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                             ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m150\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends TaskCountArgs>(args?: Subset<T, TaskCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof TaskCountAggregateOutputType ? TaskCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m150\u001b[0m       mockPrisma.task.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m151\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends UserCountArgs>(args?: Subset<T, UserCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof UserCountAggregateOutputType ? UserCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m151\u001b[0m       mockPrisma.user.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m152\u001b[0m:\u001b[93m34\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs<DefaultArgs>>) => PrismaPromise<GetAssetAggregateType<T>>'.\n\n    \u001b[7m152\u001b[0m       mockPrisma.asset.aggregate.mockResolvedValue({ _sum: { purchasePrice: null } });\n    \u001b[7m   \u001b[0m \u001b[91m                                 ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m153\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends ActivityStreamFindManyArgs>(args?: SelectSubset<T, ActivityStreamFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<...>'.\n\n    \u001b[7m153\u001b[0m       mockPrisma.activityStream.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m154\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$TaskPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m154\u001b[0m       mockPrisma.task.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m155\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$AssetPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m155\u001b[0m       mockPrisma.asset.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m164\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getOverviewDashboard' does not exist on type 'DashboardService'.\n\n    \u001b[7m164\u001b[0m       const result = await dashboardService.getOverviewDashboard(request);\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m176\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getOverviewDashboard' does not exist on type 'DashboardService'.\n\n    \u001b[7m176\u001b[0m       await expect(dashboardService.getOverviewDashboard(request))\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m184\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends AssetGroupByArgs, HasSelectOrTake extends Or<Extends<\"skip\", Keys<T>>, Extends<\"take\", Keys<T>>>, OrderByArg extends True extends HasSelectOrTake ? { orderBy: AssetGroupByArgs[\"orderBy\"]; } : { orderBy?: AssetGroupByArgs[\"orderBy\"]; }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T[\"or...'.\n\n    \u001b[7m184\u001b[0m       mockPrisma.asset.groupBy.mockResolvedValueOnce([\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m186\u001b[0m:\u001b[93m35\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'INFRASTRUCTURE' does not exist on type '{ HARDWARE: \"HARDWARE\"; SOFTWARE: \"SOFTWARE\"; FURNITURE: \"FURNITURE\"; VEHICLE: \"VEHICLE\"; EQUIPMENT: \"EQUIPMENT\"; PROPERTY: \"PROPERTY\"; OTHER: \"OTHER\"; }'.\n\n    \u001b[7m186\u001b[0m         { category: AssetCategory.INFRASTRUCTURE, _count: 30 }\n    \u001b[7m   \u001b[0m \u001b[91m                                  ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m190\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends AssetGroupByArgs, HasSelectOrTake extends Or<Extends<\"skip\", Keys<T>>, Extends<\"take\", Keys<T>>>, OrderByArg extends True extends HasSelectOrTake ? { orderBy: AssetGroupByArgs[\"orderBy\"]; } : { orderBy?: AssetGroupByArgs[\"orderBy\"]; }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T[\"or...'.\n\n    \u001b[7m190\u001b[0m       mockPrisma.asset.groupBy.mockResolvedValueOnce([\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m196\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends AssetGroupByArgs, HasSelectOrTake extends Or<Extends<\"skip\", Keys<T>>, Extends<\"take\", Keys<T>>>, OrderByArg extends True extends HasSelectOrTake ? { orderBy: AssetGroupByArgs[\"orderBy\"]; } : { orderBy?: AssetGroupByArgs[\"orderBy\"]; }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T[\"or...'.\n\n    \u001b[7m196\u001b[0m       mockPrisma.asset.groupBy.mockResolvedValueOnce([\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m205\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$AssetPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m205\u001b[0m       mockPrisma.asset.findMany.mockResolvedValueOnce([\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m212\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$LocationPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m212\u001b[0m       mockPrisma.location.findMany.mockResolvedValueOnce([\n    \u001b[7m   \u001b[0m \u001b[91m                                   ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m221\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getAssetDashboard' does not exist on type 'DashboardService'.\n\n    \u001b[7m221\u001b[0m       const result = await dashboardService.getAssetDashboard(request);\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m224\u001b[0m:\u001b[93m83\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'INFRASTRUCTURE' does not exist on type '{ HARDWARE: \"HARDWARE\"; SOFTWARE: \"SOFTWARE\"; FURNITURE: \"FURNITURE\"; VEHICLE: \"VEHICLE\"; EQUIPMENT: \"EQUIPMENT\"; PROPERTY: \"PROPERTY\"; OTHER: \"OTHER\"; }'.\n\n    \u001b[7m224\u001b[0m       expect(result.data.assetStatistics.byCategory).toHaveProperty(AssetCategory.INFRASTRUCTURE, 30);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                  ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m259\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$TaskPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m259\u001b[0m       mockPrisma.task.findMany.mockResolvedValueOnce(mockTasks);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m261\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends ScheduleCountArgs>(args?: Subset<T, ScheduleCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof ScheduleCountAggregateOutputType ? ScheduleCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m261\u001b[0m       mockPrisma.schedule.count.mockResolvedValueOnce(5); // activeSchedules\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m262\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends TaskCountArgs>(args?: Subset<T, TaskCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof TaskCountAggregateOutputType ? TaskCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m262\u001b[0m       mockPrisma.task.count.mockResolvedValueOnce(20); // recurringTasks\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m265\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$TaskPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m265\u001b[0m       mockPrisma.task.findMany.mockResolvedValueOnce([\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m270\u001b[0m:\u001b[93m34\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'URGENT' does not exist on type '{ HIGH: \"HIGH\"; MEDIUM: \"MEDIUM\"; LOW: \"LOW\"; }'.\n\n    \u001b[7m270\u001b[0m           priority: TaskPriority.URGENT,\n    \u001b[7m   \u001b[0m \u001b[91m                                 ~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m283\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getCalendarDashboard' does not exist on type 'DashboardService'.\n\n    \u001b[7m283\u001b[0m       const result = await dashboardService.getCalendarDashboard(request);\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m297\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends TaskGroupByArgs, HasSelectOrTake extends Or<Extends<\"skip\", Keys<T>>, Extends<\"take\", Keys<T>>>, OrderByArg extends True extends HasSelectOrTake ? { orderBy: TaskGroupByArgs[\"orderBy\"]; } : { orderBy?: TaskGroupByArgs[\"orderBy\"]; }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T[\"order...'.\n\n    \u001b[7m297\u001b[0m       mockPrisma.task.groupBy.mockResolvedValueOnce([\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m298\u001b[0m:\u001b[93m30\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'COMPLETED' does not exist on type '{ PLANNED: \"PLANNED\"; IN_PROGRESS: \"IN_PROGRESS\"; DONE: \"DONE\"; SKIPPED: \"SKIPPED\"; }'.\n\n    \u001b[7m298\u001b[0m         { status: TaskStatus.COMPLETED, _count: 100 },\n    \u001b[7m   \u001b[0m \u001b[91m                             ~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m304\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends TaskGroupByArgs, HasSelectOrTake extends Or<Extends<\"skip\", Keys<T>>, Extends<\"take\", Keys<T>>>, OrderByArg extends True extends HasSelectOrTake ? { orderBy: TaskGroupByArgs[\"orderBy\"]; } : { orderBy?: TaskGroupByArgs[\"orderBy\"]; }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T[\"order...'.\n\n    \u001b[7m304\u001b[0m       mockPrisma.task.groupBy.mockResolvedValueOnce([\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m312\u001b[0m:\u001b[93m10\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValueOnce' does not exist on type '<T extends TaskCountArgs>(args?: Subset<T, TaskCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof TaskCountAggregateOutputType ? TaskCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m312\u001b[0m         .mockResolvedValueOnce(180) // tasksCreated\n    \u001b[7m   \u001b[0m \u001b[91m         ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m322\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getTaskDashboard' does not exist on type 'DashboardService'.\n\n    \u001b[7m322\u001b[0m       const result = await dashboardService.getTaskDashboard(request);\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m324\u001b[0m:\u001b[93m74\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'COMPLETED' does not exist on type '{ PLANNED: \"PLANNED\"; IN_PROGRESS: \"IN_PROGRESS\"; DONE: \"DONE\"; SKIPPED: \"SKIPPED\"; }'.\n\n    \u001b[7m324\u001b[0m       expect(result.data.taskMetrics.byStatus).toHaveProperty(TaskStatus.COMPLETED, 100);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                         ~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m344\u001b[0m:\u001b[93m30\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetCountArgs>(args?: Subset<T, AssetCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof AssetCountAggregateOutputType ? AssetCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m344\u001b[0m       mockPrisma.asset.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                             ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m345\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends TaskCountArgs>(args?: Subset<T, TaskCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof TaskCountAggregateOutputType ? TaskCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m345\u001b[0m       mockPrisma.task.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m346\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends UserCountArgs>(args?: Subset<T, UserCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof UserCountAggregateOutputType ? UserCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m346\u001b[0m       mockPrisma.user.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m347\u001b[0m:\u001b[93m34\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs<DefaultArgs>>) => PrismaPromise<GetAssetAggregateType<T>>'.\n\n    \u001b[7m347\u001b[0m       mockPrisma.asset.aggregate.mockResolvedValue({ _sum: { purchasePrice: null } });\n    \u001b[7m   \u001b[0m \u001b[91m                                 ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m348\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends ActivityStreamFindManyArgs>(args?: SelectSubset<T, ActivityStreamFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<...>'.\n\n    \u001b[7m348\u001b[0m       mockPrisma.activityStream.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m349\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$TaskPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m349\u001b[0m       mockPrisma.task.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m350\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$AssetPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m350\u001b[0m       mockPrisma.asset.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m352\u001b[0m:\u001b[93m38\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getOverviewDashboard' does not exist on type 'DashboardService'.\n\n    \u001b[7m352\u001b[0m       return expect(dashboardService.getOverviewDashboard(request)).resolves.toBeDefined();\n    \u001b[7m   \u001b[0m \u001b[91m                                     ~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m362\u001b[0m:\u001b[93m30\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetCountArgs>(args?: Subset<T, AssetCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof AssetCountAggregateOutputType ? AssetCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m362\u001b[0m       mockPrisma.asset.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                             ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m363\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends TaskCountArgs>(args?: Subset<T, TaskCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof TaskCountAggregateOutputType ? TaskCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m363\u001b[0m       mockPrisma.task.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m364\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends UserCountArgs>(args?: Subset<T, UserCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof UserCountAggregateOutputType ? UserCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m364\u001b[0m       mockPrisma.user.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m365\u001b[0m:\u001b[93m34\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs<DefaultArgs>>) => PrismaPromise<GetAssetAggregateType<T>>'.\n\n    \u001b[7m365\u001b[0m       mockPrisma.asset.aggregate.mockResolvedValue({ _sum: { purchasePrice: null } });\n    \u001b[7m   \u001b[0m \u001b[91m                                 ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m366\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends ActivityStreamFindManyArgs>(args?: SelectSubset<T, ActivityStreamFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<...>'.\n\n    \u001b[7m366\u001b[0m       mockPrisma.activityStream.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m367\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$TaskPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m367\u001b[0m       mockPrisma.task.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m368\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$AssetPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m368\u001b[0m       mockPrisma.asset.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m370\u001b[0m:\u001b[93m38\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getOverviewDashboard' does not exist on type 'DashboardService'.\n\n    \u001b[7m370\u001b[0m       return expect(dashboardService.getOverviewDashboard(request)).resolves.toBeDefined();\n    \u001b[7m   \u001b[0m \u001b[91m                                     ~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m380\u001b[0m:\u001b[93m30\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetCountArgs>(args?: Subset<T, AssetCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof AssetCountAggregateOutputType ? AssetCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m380\u001b[0m       mockPrisma.asset.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                             ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m381\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends TaskCountArgs>(args?: Subset<T, TaskCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof TaskCountAggregateOutputType ? TaskCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m381\u001b[0m       mockPrisma.task.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m382\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends UserCountArgs>(args?: Subset<T, UserCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof UserCountAggregateOutputType ? UserCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m382\u001b[0m       mockPrisma.user.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m383\u001b[0m:\u001b[93m34\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs<DefaultArgs>>) => PrismaPromise<GetAssetAggregateType<T>>'.\n\n    \u001b[7m383\u001b[0m       mockPrisma.asset.aggregate.mockResolvedValue({ _sum: { purchasePrice: null } });\n    \u001b[7m   \u001b[0m \u001b[91m                                 ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m384\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends ActivityStreamFindManyArgs>(args?: SelectSubset<T, ActivityStreamFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<...>'.\n\n    \u001b[7m384\u001b[0m       mockPrisma.activityStream.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m385\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$TaskPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m385\u001b[0m       mockPrisma.task.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m386\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$AssetPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m386\u001b[0m       mockPrisma.asset.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m388\u001b[0m:\u001b[93m38\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getOverviewDashboard' does not exist on type 'DashboardService'.\n\n    \u001b[7m388\u001b[0m       return expect(dashboardService.getOverviewDashboard(request)).resolves.toBeDefined();\n    \u001b[7m   \u001b[0m \u001b[91m                                     ~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m397\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getOverviewDashboard' does not exist on type 'DashboardService'.\n\n    \u001b[7m397\u001b[0m       await expect(dashboardService.getOverviewDashboard(request))\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m404\u001b[0m:\u001b[93m30\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockRejectedValueOnce' does not exist on type '<T extends AssetCountArgs>(args?: Subset<T, AssetCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof AssetCountAggregateOutputType ? AssetCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m404\u001b[0m       mockPrisma.asset.count.mockRejectedValueOnce(new Error('Database connection failed'));\n    \u001b[7m   \u001b[0m \u001b[91m                             ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m411\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getOverviewDashboard' does not exist on type 'DashboardService'.\n\n    \u001b[7m411\u001b[0m       await expect(dashboardService.getOverviewDashboard(request))\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m416\u001b[0m:\u001b[93m30\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetCountArgs>(args?: Subset<T, AssetCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof AssetCountAggregateOutputType ? AssetCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m416\u001b[0m       mockPrisma.asset.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                             ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m417\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends TaskCountArgs>(args?: Subset<T, TaskCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof TaskCountAggregateOutputType ? TaskCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m417\u001b[0m       mockPrisma.task.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m418\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends UserCountArgs>(args?: Subset<T, UserCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof UserCountAggregateOutputType ? UserCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m418\u001b[0m       mockPrisma.user.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m419\u001b[0m:\u001b[93m34\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs<DefaultArgs>>) => PrismaPromise<GetAssetAggregateType<T>>'.\n\n    \u001b[7m419\u001b[0m       mockPrisma.asset.aggregate.mockResolvedValue({ _sum: { purchasePrice: null } });\n    \u001b[7m   \u001b[0m \u001b[91m                                 ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m420\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends ActivityStreamFindManyArgs>(args?: SelectSubset<T, ActivityStreamFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<...>'.\n\n    \u001b[7m420\u001b[0m       mockPrisma.activityStream.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m421\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$TaskPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m421\u001b[0m       mockPrisma.task.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m422\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$AssetPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m422\u001b[0m       mockPrisma.asset.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m429\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getOverviewDashboard' does not exist on type 'DashboardService'.\n\n    \u001b[7m429\u001b[0m       const result = await dashboardService.getOverviewDashboard(request);\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m439\u001b[0m:\u001b[93m30\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetCountArgs>(args?: Subset<T, AssetCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof AssetCountAggregateOutputType ? AssetCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m439\u001b[0m       mockPrisma.asset.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                             ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m440\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends TaskCountArgs>(args?: Subset<T, TaskCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof TaskCountAggregateOutputType ? TaskCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m440\u001b[0m       mockPrisma.task.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m441\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends UserCountArgs>(args?: Subset<T, UserCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof UserCountAggregateOutputType ? UserCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m441\u001b[0m       mockPrisma.user.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m442\u001b[0m:\u001b[93m34\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs<DefaultArgs>>) => PrismaPromise<GetAssetAggregateType<T>>'.\n\n    \u001b[7m442\u001b[0m       mockPrisma.asset.aggregate.mockResolvedValue({ _sum: { purchasePrice: null } });\n    \u001b[7m   \u001b[0m \u001b[91m                                 ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m443\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends ActivityStreamFindManyArgs>(args?: SelectSubset<T, ActivityStreamFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<...>'.\n\n    \u001b[7m443\u001b[0m       mockPrisma.activityStream.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m444\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$TaskPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m444\u001b[0m       mockPrisma.task.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m445\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$AssetPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m445\u001b[0m       mockPrisma.asset.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m453\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getOverviewDashboard' does not exist on type 'DashboardService'.\n\n    \u001b[7m453\u001b[0m       const result = await dashboardService.getOverviewDashboard(request);\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m456\u001b[0m:\u001b[93m54\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mock' does not exist on type '<T extends AssetCountArgs>(args?: Subset<T, AssetCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof AssetCountAggregateOutputType ? AssetCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m456\u001b[0m       const assetCountCalls = mockPrisma.asset.count.mock.calls;\n    \u001b[7m   \u001b[0m \u001b[91m                                                     ~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m457\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'call' implicitly has an 'any' type.\n\n    \u001b[7m457\u001b[0m       assetCountCalls.forEach(call => {\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m473\u001b[0m:\u001b[93m30\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetCountArgs>(args?: Subset<T, AssetCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof AssetCountAggregateOutputType ? AssetCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m473\u001b[0m       mockPrisma.asset.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                             ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m474\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends TaskCountArgs>(args?: Subset<T, TaskCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof TaskCountAggregateOutputType ? TaskCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m474\u001b[0m       mockPrisma.task.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m475\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends UserCountArgs>(args?: Subset<T, UserCountArgs<DefaultArgs>> | undefined) => PrismaPromise<T extends Record_2<\"select\", any> ? T[\"select\"] extends true ? number : { [P in keyof T[\"select\"]]: P extends keyof UserCountAggregateOutputType ? UserCountAggregateOutputType[P] : never; } : number>'.\n\n    \u001b[7m475\u001b[0m       mockPrisma.user.count.mockResolvedValue(0);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m476\u001b[0m:\u001b[93m34\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs<DefaultArgs>>) => PrismaPromise<GetAssetAggregateType<T>>'.\n\n    \u001b[7m476\u001b[0m       mockPrisma.asset.aggregate.mockResolvedValue({ _sum: { purchasePrice: null } });\n    \u001b[7m   \u001b[0m \u001b[91m                                 ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m477\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends ActivityStreamFindManyArgs>(args?: SelectSubset<T, ActivityStreamFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<...>'.\n\n    \u001b[7m477\u001b[0m       mockPrisma.activityStream.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m478\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$TaskPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m478\u001b[0m       mockPrisma.task.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m479\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mockResolvedValue' does not exist on type '<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<DefaultArgs>> | undefined) => PrismaPromise<GetFindResult<$AssetPayload<DefaultArgs>, T, PrismaClientOptions>[]>'.\n\n    \u001b[7m479\u001b[0m       mockPrisma.asset.findMany.mockResolvedValue([]);\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/dashboard.service.test.ts\u001b[0m:\u001b[93m487\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getOverviewDashboard' does not exist on type 'DashboardService'.\n\n    \u001b[7m487\u001b[0m       const result = await dashboardService.getOverviewDashboard(request);\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~~~~~~~~~~~~~~~~~\u001b[0m\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/dashboard.service.test.ts","startTime":1751068817150,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1751068817150,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/test/unit/services/audit.service.test.ts\u001b[0m:\u001b[93m1\u001b[0m:\u001b[93m44\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS6133: \u001b[0m'afterEach' is declared but its value is never read.\n\n    \u001b[7m1\u001b[0m import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\n    \u001b[7m \u001b[0m \u001b[91m                                           ~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/audit.service.test.ts\u001b[0m:\u001b[93m24\u001b[0m:\u001b[93m7\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2353: \u001b[0mObject literal may only specify known properties, and 'sessionId' does not exist in type 'IRequestContext'.\n\n    \u001b[7m24\u001b[0m       sessionId: 'session123',\n    \u001b[7m  \u001b[0m \u001b[91m      ~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/audit.service.test.ts\u001b[0m:\u001b[93m202\u001b[0m:\u001b[93m71\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '({ id: string; model: string; recordId: string; action: \"CREATE\"; oldValue: null; newValue: { name: string; status?: undefined; }; userId: string; user: { id: string; email: string; fullName: string; }; createdAt: Date; } | { ...; })[]' is not assignable to parameter of type 'never'.\n\n    \u001b[7m202\u001b[0m       (mockPrisma.auditTrail.findMany as jest.Mock).mockResolvedValue(mockAuditEntries);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                      ~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/audit.service.test.ts\u001b[0m:\u001b[93m203\u001b[0m:\u001b[93m68\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '2' is not assignable to parameter of type 'never'.\n\n    \u001b[7m203\u001b[0m       (mockPrisma.auditTrail.count as jest.Mock).mockResolvedValue(2);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                   ~\u001b[0m\n    \u001b[96msrc/test/unit/services/audit.service.test.ts\u001b[0m:\u001b[93m300\u001b[0m:\u001b[93m68\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '150' is not assignable to parameter of type 'never'.\n\n    \u001b[7m300\u001b[0m       (mockPrisma.auditTrail.count as jest.Mock).mockResolvedValue(150);\n    \u001b[7m   \u001b[0m \u001b[91m                                                                   ~~~\u001b[0m\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/audit.service.test.ts","startTime":1751068817150,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1751068817150,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/test/unit/services/asset.service.test.ts\u001b[0m:\u001b[93m318\u001b[0m:\u001b[93m41\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 4 arguments, but got 3.\n\n    \u001b[7m318\u001b[0m       const result = await assetService.updateAsset(mockAssetId, updateData, mockOrganizationId);\n    \u001b[7m   \u001b[0m \u001b[91m                                        ~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/services/asset.service.ts\u001b[0m:\u001b[93m458\u001b[0m:\u001b[93m5\u001b[0m\n        \u001b[7m458\u001b[0m     organizationId: string,\n        \u001b[7m   \u001b[0m \u001b[96m    ~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'organizationId' was not provided.\n    \u001b[96msrc/test/unit/services/asset.service.test.ts\u001b[0m:\u001b[93m346\u001b[0m:\u001b[93m41\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 4 arguments, but got 3.\n\n    \u001b[7m346\u001b[0m       const result = await assetService.updateAsset(\n    \u001b[7m   \u001b[0m \u001b[91m                                        ~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/services/asset.service.ts\u001b[0m:\u001b[93m458\u001b[0m:\u001b[93m5\u001b[0m\n        \u001b[7m458\u001b[0m     organizationId: string,\n        \u001b[7m   \u001b[0m \u001b[96m    ~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'organizationId' was not provided.\n    \u001b[96msrc/test/unit/services/asset.service.test.ts\u001b[0m:\u001b[93m377\u001b[0m:\u001b[93m41\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 4 arguments, but got 3.\n\n    \u001b[7m377\u001b[0m       const result = await assetService.updateAsset(\n    \u001b[7m   \u001b[0m \u001b[91m                                        ~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/services/asset.service.ts\u001b[0m:\u001b[93m458\u001b[0m:\u001b[93m5\u001b[0m\n        \u001b[7m458\u001b[0m     organizationId: string,\n        \u001b[7m   \u001b[0m \u001b[96m    ~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'organizationId' was not provided.\n    \u001b[96msrc/test/unit/services/asset.service.test.ts\u001b[0m:\u001b[93m400\u001b[0m:\u001b[93m22\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 4 arguments, but got 3.\n\n    \u001b[7m400\u001b[0m         assetService.updateAsset(mockAssetId, { parentId: childId }, mockOrganizationId),\n    \u001b[7m   \u001b[0m \u001b[91m                     ~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/services/asset.service.ts\u001b[0m:\u001b[93m458\u001b[0m:\u001b[93m5\u001b[0m\n        \u001b[7m458\u001b[0m     organizationId: string,\n        \u001b[7m   \u001b[0m \u001b[96m    ~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'organizationId' was not provided.\n    \u001b[96msrc/test/unit/services/asset.service.test.ts\u001b[0m:\u001b[93m412\u001b[0m:\u001b[93m22\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 4 arguments, but got 3.\n\n    \u001b[7m412\u001b[0m         assetService.updateAsset(mockAssetId, { qrCode: newQrCode }, mockOrganizationId),\n    \u001b[7m   \u001b[0m \u001b[91m                     ~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/services/asset.service.ts\u001b[0m:\u001b[93m458\u001b[0m:\u001b[93m5\u001b[0m\n        \u001b[7m458\u001b[0m     organizationId: string,\n        \u001b[7m   \u001b[0m \u001b[96m    ~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'organizationId' was not provided.\n    \u001b[96msrc/test/unit/services/asset.service.test.ts\u001b[0m:\u001b[93m420\u001b[0m:\u001b[93m22\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 4 arguments, but got 3.\n\n    \u001b[7m420\u001b[0m         assetService.updateAsset(mockAssetId, { name: 'New Name' }, mockOrganizationId),\n    \u001b[7m   \u001b[0m \u001b[91m                     ~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/services/asset.service.ts\u001b[0m:\u001b[93m458\u001b[0m:\u001b[93m5\u001b[0m\n        \u001b[7m458\u001b[0m     organizationId: string,\n        \u001b[7m   \u001b[0m \u001b[96m    ~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'organizationId' was not provided.\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/asset.service.test.ts","startTime":1751068817150,"status":"failed","summary":""}],"wasInterrupted":false}
