{"numFailedTestSuites":5,"numFailedTests":23,"numPassedTestSuites":13,"numPassedTests":303,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":1,"numTodoTests":0,"numTotalTestSuites":18,"numTotalTests":326,"openHandles":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1751047445838,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["LocationService","createLocation"],"duration":2,"failureDetails":[{}],"failureMessages":["Error: Unmocked Prisma method called. Make sure to mock this method in your test.\n    at Proxy.fallbackMockImplementation (/home/topher/repos/asset-manager/backend/src/lib/__mocks__/prisma.ts:8:11)\n    at /home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:397:39\n    at Proxy.<anonymous> (/home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:404:13)\n    at Proxy.mockConstructor (/home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:148:19)\n    at LocationService.createLocation (/home/topher/repos/asset-manager/backend/src/services/location.service.ts:57:19)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:41:44)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService createLocation should create a root location successfully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should create a root location successfully"},{"ancestorTitles":["LocationService","createLocation"],"duration":8,"failureDetails":[{}],"failureMessages":["Error: Unmocked Prisma method called. Make sure to mock this method in your test.\n    at Proxy.fallbackMockImplementation (/home/topher/repos/asset-manager/backend/src/lib/__mocks__/prisma.ts:8:11)\n    at /home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:397:39\n    at Proxy.<anonymous> (/home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:404:13)\n    at Proxy.mockConstructor (/home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:148:19)\n    at LocationService.createLocation (/home/topher/repos/asset-manager/backend/src/services/location.service.ts:57:19)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:73:44)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService createLocation should create a child location with correct path","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should create a child location with correct path"},{"ancestorTitles":["LocationService","createLocation"],"duration":8,"failureDetails":[{"matcherResult":{"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:81:36)","pass":false},"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:81:36)"}],"failureMessages":["Error: expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:81:36)\n    at Object.toThrow (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:81:72)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService createLocation should throw error if organization not found","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw error if organization not found"},{"ancestorTitles":["LocationService","createLocation"],"duration":3,"failureDetails":[{"matcherResult":{"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:91:36)","pass":false},"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:91:36)"}],"failureMessages":["Error: expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:91:36)\n    at Object.toThrow (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:91:82)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService createLocation should throw error if parent not found","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw error if parent not found"},{"ancestorTitles":["LocationService","createLocation"],"duration":10,"failureDetails":[{"matcherResult":{"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:102:36)","pass":false},"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:102:36)"}],"failureMessages":["Error: expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:102:36)\n    at Object.toThrow (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:102:72)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService createLocation should throw error if name already exists in same parent","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw error if name already exists in same parent"},{"ancestorTitles":["LocationService","createLocation"],"duration":4,"failureDetails":[{"matcherResult":{"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: AppError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:116:36)","pass":false},"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: AppError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:116:36)"}],"failureMessages":["Error: expect(received).rejects.toThrow(expected)\n\nExpected constructor: AppError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:116:36)\n    at Object.toThrow (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:116:82)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService createLocation should throw error if parent belongs to different organization","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw error if parent belongs to different organization"},{"ancestorTitles":["LocationService","moveLocation"],"duration":10,"failureDetails":[{"matcherResult":{"expected":"new-parent.child","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"new-parent.child\"\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"new-parent.child\"\nReceived: undefined\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:154:27)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"LocationService moveLocation should move location successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should move location successfully"},{"ancestorTitles":["LocationService","moveLocation"],"duration":3,"failureDetails":[{"message":"expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: [{\"id\": \"loc-123\", \"organizationId\": \"org-123\", \"parentId\": \"root\", \"path\": \"new-parent.child\"}]"}],"failureMessages":["Error: expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: [{\"id\": \"loc-123\", \"organizationId\": \"org-123\", \"parentId\": \"root\", \"path\": \"new-parent.child\"}]\n    at expect (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:113:15)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:168:13)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService moveLocation should prevent circular dependency","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should prevent circular dependency"},{"ancestorTitles":["LocationService","moveLocation"],"duration":12,"failureDetails":[{"message":"expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: [{\"id\": \"loc-123\", \"organizationId\": \"org-123\", \"parentId\": \"root\", \"path\": \"new-parent.child\"}]"}],"failureMessages":["Error: expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: [{\"id\": \"loc-123\", \"organizationId\": \"org-123\", \"parentId\": \"root\", \"path\": \"new-parent.child\"}]\n    at expect (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:113:15)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:184:13)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService moveLocation should prevent cross-organization move","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should prevent cross-organization move"},{"ancestorTitles":["LocationService","moveLocation"],"duration":2,"failureDetails":[{"matcherResult":{"expected":"loc-123","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"loc-123\"\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"loc-123\"\nReceived: undefined\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:198:27)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"LocationService moveLocation should handle move to root (null parent)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle move to root (null parent)"},{"ancestorTitles":["LocationService","deleteLocation"],"duration":10,"failureDetails":[{"statusCode":404,"code":"NOT_FOUND","name":"NotFoundError"}],"failureMessages":["NotFoundError: Location not found\n    at LocationService.deleteLocation (/home/topher/repos/asset-manager/backend/src/services/location.service.ts:353:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:211:7)"],"fullName":"LocationService deleteLocation should delete location successfully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should delete location successfully"},{"ancestorTitles":["LocationService","deleteLocation"],"duration":3,"failureDetails":[{"matcherResult":{"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: NotFoundError\n\nReceived message: \"Location not found\"\n\n      351 |     const location = await this.getLocationById(id, organizationId);\n      352 |     if (!location) {\n    > 353 |       throw new NotFoundError('Location');\n          |             ^\n      354 |     }\n      355 |\n      356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:224:7)","pass":false},"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: NotFoundError\n\nReceived message: \"Location not found\"\n\n      351 |     const location = await this.getLocationById(id, organizationId);\n      352 |     if (!location) {\n    > 353 |       throw new NotFoundError('Location');\n          |             ^\n      354 |     }\n      355 |\n      356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:224:7)"}],"failureMessages":["Error: expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: NotFoundError\n\nReceived message: \"Location not found\"\n\n      351 |     const location = await this.getLocationById(id, organizationId);\n      352 |     if (!location) {\n    > 353 |       throw new NotFoundError('Location');\n          |             ^\n      354 |     }\n      355 |\n      356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:224:7)\n    at Object.toThrow (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:226:17)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService deleteLocation should throw error if location has children","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw error if location has children"},{"ancestorTitles":["LocationService","deleteLocation"],"duration":12,"failureDetails":[{"matcherResult":{"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: NotFoundError\n\nReceived message: \"Location not found\"\n\n      351 |     const location = await this.getLocationById(id, organizationId);\n      352 |     if (!location) {\n    > 353 |       throw new NotFoundError('Location');\n          |             ^\n      354 |     }\n      355 |\n      356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:236:7)","pass":false},"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: NotFoundError\n\nReceived message: \"Location not found\"\n\n      351 |     const location = await this.getLocationById(id, organizationId);\n      352 |     if (!location) {\n    > 353 |       throw new NotFoundError('Location');\n          |             ^\n      354 |     }\n      355 |\n      356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:236:7)"}],"failureMessages":["Error: expect(received).rejects.toThrow(expected)\n\nExpected constructor: ConflictError\nReceived constructor: NotFoundError\n\nReceived message: \"Location not found\"\n\n      351 |     const location = await this.getLocationById(id, organizationId);\n      352 |     if (!location) {\n    > 353 |       throw new NotFoundError('Location');\n          |             ^\n      354 |     }\n      355 |\n      356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:236:7)\n    at Object.toThrow (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:238:17)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"LocationService deleteLocation should throw error if location has assets","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw error if location has assets"},{"ancestorTitles":["LocationService","findByOrganization"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"LocationService findByOrganization should return tree structure of locations","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return tree structure of locations"},{"ancestorTitles":["LocationService","findSubtree"],"duration":3,"failureDetails":[{"statusCode":404,"code":"NOT_FOUND","name":"NotFoundError"}],"failureMessages":["NotFoundError: Location not found\n    at LocationService.findSubtree (/home/topher/repos/asset-manager/backend/src/services/location.service.ts:448:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:278:22)"],"fullName":"LocationService findSubtree should return all descendants","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return all descendants"},{"ancestorTitles":["LocationService","findAncestors"],"duration":11,"failureDetails":[{"statusCode":404,"code":"NOT_FOUND","name":"NotFoundError"}],"failureMessages":["NotFoundError: Location not found\n    at LocationService.findAncestors (/home/topher/repos/asset-manager/backend/src/services/location.service.ts:478:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:299:22)"],"fullName":"LocationService findAncestors should return ancestors in correct order","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return ancestors in correct order"},{"ancestorTitles":["LocationService","findAncestors"],"duration":9,"failureDetails":[{"statusCode":404,"code":"NOT_FOUND","name":"NotFoundError"}],"failureMessages":["NotFoundError: Location not found\n    at LocationService.findAncestors (/home/topher/repos/asset-manager/backend/src/services/location.service.ts:478:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts:313:22)"],"fullName":"LocationService findAncestors should return empty array for root location","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return empty array for root location"},{"ancestorTitles":["LocationService","searchByName"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"LocationService searchByName should search locations by name","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should search locations by name"}],"endTime":1751047453322,"message":"  ● LocationService › createLocation › should create a root location successfully\n\n    Unmocked Prisma method called. Make sure to mock this method in your test.\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:41:44)\n\n  ● LocationService › createLocation › should create a child location with correct path\n\n    Unmocked Prisma method called. Make sure to mock this method in your test.\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:73:44)\n\n  ● LocationService › createLocation › should throw error if organization not found\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected constructor: NotFoundError\n    Received constructor: Error\n\n    Received message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n           6 | export const prisma = mockDeep<PrismaClient>({\n           7 |   fallbackMockImplementation: () => {\n        >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n             |           ^\n           9 |   },\n          10 | }) as DeepMockProxy<PrismaClient>;\n          11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:81:36)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:81:72)\n\n  ● LocationService › createLocation › should throw error if parent not found\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected constructor: NotFoundError\n    Received constructor: Error\n\n    Received message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n           6 | export const prisma = mockDeep<PrismaClient>({\n           7 |   fallbackMockImplementation: () => {\n        >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n             |           ^\n           9 |   },\n          10 | }) as DeepMockProxy<PrismaClient>;\n          11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:91:36)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:91:82)\n\n  ● LocationService › createLocation › should throw error if name already exists in same parent\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected constructor: ConflictError\n    Received constructor: Error\n\n    Received message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n           6 | export const prisma = mockDeep<PrismaClient>({\n           7 |   fallbackMockImplementation: () => {\n        >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n             |           ^\n           9 |   },\n          10 | }) as DeepMockProxy<PrismaClient>;\n          11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:102:36)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:102:72)\n\n  ● LocationService › createLocation › should throw error if parent belongs to different organization\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected constructor: AppError\n    Received constructor: Error\n\n    Received message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n           6 | export const prisma = mockDeep<PrismaClient>({\n           7 |   fallbackMockImplementation: () => {\n        >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n             |           ^\n           9 |   },\n          10 | }) as DeepMockProxy<PrismaClient>;\n          11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at LocationService.createLocation (src/services/location.service.ts:57:19)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:116:36)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:116:82)\n\n  ● LocationService › moveLocation › should move location successfully\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"new-parent.child\"\n    Received: undefined\n\n      152 |\n      153 |       expect(prismaMock.$transaction).toHaveBeenCalled();\n    > 154 |       expect(result.path).toBe('new-parent.child');\n          |                           ^\n      155 |     });\n      156 |\n      157 |     it('should prevent circular dependency', async () => {\n\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:154:27)\n\n  ● LocationService › moveLocation › should prevent circular dependency\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: [{\"id\": \"loc-123\", \"organizationId\": \"org-123\", \"parentId\": \"root\", \"path\": \"new-parent.child\"}]\n\n      166 |         .mockResolvedValueOnce(circularParent as any);\n      167 |\n    > 168 |       await expect(\n          |             ^\n      169 |         locationService.moveLocation(mockLocationId, 'circular', mockOrganizationId),\n      170 |       ).rejects.toThrow(AppError);\n      171 |     });\n\n      at expect (../node_modules/jest-circus/node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:168:13)\n\n  ● LocationService › moveLocation › should prevent cross-organization move\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: [{\"id\": \"loc-123\", \"organizationId\": \"org-123\", \"parentId\": \"root\", \"path\": \"new-parent.child\"}]\n\n      182 |         .mockResolvedValueOnce(differentOrgParent as any);\n      183 |\n    > 184 |       await expect(\n          |             ^\n      185 |         locationService.moveLocation(mockLocationId, 'different-parent', mockOrganizationId),\n      186 |       ).rejects.toThrow(AppError);\n      187 |     });\n\n      at expect (../node_modules/jest-circus/node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:184:13)\n\n  ● LocationService › moveLocation › should handle move to root (null parent)\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"loc-123\"\n    Received: undefined\n\n      196 |       const result = await locationService.moveLocation(mockLocationId, null, mockOrganizationId);\n      197 |\n    > 198 |       expect(result.path).toBe(mockLocationId);\n          |                           ^\n      199 |     });\n      200 |   });\n      201 |\n\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:198:27)\n\n  ● LocationService › deleteLocation › should delete location successfully\n\n    NotFoundError: Location not found\n\n      351 |     const location = await this.getLocationById(id, organizationId);\n      352 |     if (!location) {\n    > 353 |       throw new NotFoundError('Location');\n          |             ^\n      354 |     }\n      355 |\n      356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:211:7)\n\n  ● LocationService › deleteLocation › should throw error if location has children\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected constructor: ConflictError\n    Received constructor: NotFoundError\n\n    Received message: \"Location not found\"\n\n          351 |     const location = await this.getLocationById(id, organizationId);\n          352 |     if (!location) {\n        > 353 |       throw new NotFoundError('Location');\n              |             ^\n          354 |     }\n          355 |\n          356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:224:7)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:226:17)\n\n  ● LocationService › deleteLocation › should throw error if location has assets\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected constructor: ConflictError\n    Received constructor: NotFoundError\n\n    Received message: \"Location not found\"\n\n          351 |     const location = await this.getLocationById(id, organizationId);\n          352 |     if (!location) {\n        > 353 |       throw new NotFoundError('Location');\n              |             ^\n          354 |     }\n          355 |\n          356 |     // Check for children\n\n      at LocationService.deleteLocation (src/services/location.service.ts:353:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:236:7)\n      at Object.<anonymous> (src/test/unit/services/location.service.test.ts:238:17)\n\n  ● LocationService › findSubtree › should return all descendants\n\n    NotFoundError: Location not found\n\n      446 |     const location = await this.getLocationById(locationId, organizationId);\n      447 |     if (!location) {\n    > 448 |       throw new NotFoundError('Location');\n          |             ^\n      449 |     }\n      450 |\n      451 |     return prisma.location.findMany({\n\n      at LocationService.findSubtree (src/services/location.service.ts:448:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:278:22)\n\n  ● LocationService › findAncestors › should return ancestors in correct order\n\n    NotFoundError: Location not found\n\n      476 |     const location = await this.getLocationById(locationId, organizationId);\n      477 |     if (!location) {\n    > 478 |       throw new NotFoundError('Location');\n          |             ^\n      479 |     }\n      480 |\n      481 |     // Split path and get all ancestor IDs\n\n      at LocationService.findAncestors (src/services/location.service.ts:478:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:299:22)\n\n  ● LocationService › findAncestors › should return empty array for root location\n\n    NotFoundError: Location not found\n\n      476 |     const location = await this.getLocationById(locationId, organizationId);\n      477 |     if (!location) {\n    > 478 |       throw new NotFoundError('Location');\n          |             ^\n      479 |     }\n      480 |\n      481 |     // Split path and get all ancestor IDs\n\n      at LocationService.findAncestors (src/services/location.service.ts:478:13)\n      at async Object.<anonymous> (src/test/unit/services/location.service.test.ts:313:22)\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/location.service.test.ts","startTime":1751047445871,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["AssetService","createAsset"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"AssetService createAsset should create asset successfully","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should create asset successfully"},{"ancestorTitles":["AssetService","createAsset"],"duration":5,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n  \"template-123\",\n  {\"serialNumber\": \"ABC123\"},\n+ \"org-123\",\n\nNumber of calls: 1","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n  \"template-123\",\n  {\"serialNumber\": \"ABC123\"},\n+ \"org-123\",\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/asset.service.test.ts:137:66)"],"fullName":"AssetService createAsset should create asset with template","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should create asset with template"},{"ancestorTitles":["AssetService","createAsset"],"duration":4,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: \"location-123\"\nReceived: \"location-123\", \"org-123\"\n\nNumber of calls: 1","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: \"location-123\"\nReceived: \"location-123\", \"org-123\"\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/asset.service.test.ts:174:51)"],"fullName":"AssetService createAsset should create asset with location","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should create asset with location"},{"ancestorTitles":["AssetService","createAsset"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"AssetService createAsset should throw error if location not in organization","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if location not in organization"},{"ancestorTitles":["AssetService","createAsset"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"AssetService createAsset should create child asset","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create child asset"},{"ancestorTitles":["AssetService","createAsset"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AssetService createAsset should throw error if organization not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if organization not found"},{"ancestorTitles":["AssetService","createAsset"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AssetService createAsset should throw error if template category mismatches","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if template category mismatches"},{"ancestorTitles":["AssetService","createAsset"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetService createAsset should throw error if custom fields invalid","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if custom fields invalid"},{"ancestorTitles":["AssetService","createAsset"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AssetService createAsset should throw error if QR code already exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if QR code already exists"},{"ancestorTitles":["AssetService","updateAsset"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetService updateAsset should update asset successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should update asset successfully"},{"ancestorTitles":["AssetService","updateAsset"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AssetService updateAsset should update asset with new template","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update asset with new template"},{"ancestorTitles":["AssetService","updateAsset"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetService updateAsset should move asset to new parent","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should move asset to new parent"},{"ancestorTitles":["AssetService","updateAsset"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AssetService updateAsset should prevent circular dependency when moving","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should prevent circular dependency when moving"},{"ancestorTitles":["AssetService","updateAsset"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AssetService updateAsset should validate QR code uniqueness","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate QR code uniqueness"},{"ancestorTitles":["AssetService","updateAsset"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AssetService updateAsset should throw error if asset not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if asset not found"},{"ancestorTitles":["AssetService","deleteAsset"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AssetService deleteAsset should delete asset successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete asset successfully"},{"ancestorTitles":["AssetService","deleteAsset"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetService deleteAsset should prevent deletion of asset with children","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should prevent deletion of asset with children"},{"ancestorTitles":["AssetService","deleteAsset"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AssetService deleteAsset should delete asset with children when cascade is true","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete asset with children when cascade is true"},{"ancestorTitles":["AssetService","deleteAsset"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetService deleteAsset should prevent deletion of asset with active tasks","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should prevent deletion of asset with active tasks"},{"ancestorTitles":["AssetService","deleteAsset"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AssetService deleteAsset should throw error if asset not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if asset not found"},{"ancestorTitles":["AssetService","findAssets"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AssetService findAssets should return paginated assets","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return paginated assets"},{"ancestorTitles":["AssetService","findAssets"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetService findAssets should filter by name","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter by name"},{"ancestorTitles":["AssetService","findAssets"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AssetService findAssets should filter by category","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter by category"},{"ancestorTitles":["AssetService","findAssets"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"AssetService findAssets should filter by status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter by status"},{"ancestorTitles":["AssetService","findAssets"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AssetService findAssets should filter by tags","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter by tags"},{"ancestorTitles":["AssetService","findAssets"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"AssetService findAssets should filter by warranty expiring","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter by warranty expiring"},{"ancestorTitles":["AssetService","getAssetTree"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AssetService getAssetTree should return asset tree structure","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return asset tree structure"},{"ancestorTitles":["AssetService","getAssetTree"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AssetService getAssetTree should return subtree for specific root","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return subtree for specific root"},{"ancestorTitles":["AssetService","updateAssetStatus"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AssetService updateAssetStatus should update status with valid transition","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update status with valid transition"},{"ancestorTitles":["AssetService","updateAssetStatus"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AssetService updateAssetStatus should throw error for invalid status transition","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid status transition"},{"ancestorTitles":["AssetService","getWarrantyExpiringAssets"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetService getWarrantyExpiringAssets should return assets with warranty expiring soon","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return assets with warranty expiring soon"},{"ancestorTitles":["AssetService","getAssetStatistics"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AssetService getAssetStatistics should return comprehensive asset statistics","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return comprehensive asset statistics"}],"endTime":1751047454724,"message":"  ● AssetService › createAsset › should create asset with template\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    - Expected\n    + Received\n\n      \"template-123\",\n      {\"serialNumber\": \"ABC123\"},\n    + \"org-123\",\n\n    Number of calls: 1\n\n      135 |         mockOrganizationId,\n      136 |       );\n    > 137 |       expect(mockAssetTemplateService.validateCustomFieldValues).toHaveBeenCalledWith(\n          |                                                                  ^\n      138 |         templateId,\n      139 |         customFields,\n      140 |       );\n\n      at Object.<anonymous> (src/test/unit/services/asset.service.test.ts:137:66)\n\n  ● AssetService › createAsset › should create asset with location\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: \"location-123\"\n    Received: \"location-123\", \"org-123\"\n\n    Number of calls: 1\n\n      172 |       const result = await assetService.createAsset(createDataWithLocation);\n      173 |\n    > 174 |       expect(mockLocationService.getLocationById).toHaveBeenCalledWith(locationId);\n          |                                                   ^\n      175 |       expect(result.location?.id).toBe(locationId);\n      176 |     });\n      177 |\n\n      at Object.<anonymous> (src/test/unit/services/asset.service.test.ts:174:51)\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/asset.service.test.ts","startTime":1751047453326,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["AssetTemplateService","createTemplate"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService createTemplate should create template successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create template successfully"},{"ancestorTitles":["AssetTemplateService","createTemplate"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService createTemplate should throw error if organization not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if organization not found"},{"ancestorTitles":["AssetTemplateService","createTemplate"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService createTemplate should throw error if template name already exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if template name already exists"},{"ancestorTitles":["AssetTemplateService","createTemplate"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService createTemplate should throw error for invalid custom field schema","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid custom field schema"},{"ancestorTitles":["AssetTemplateService","createTemplate"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService createTemplate should create template with empty custom fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create template with empty custom fields"},{"ancestorTitles":["AssetTemplateService","updateTemplate"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService updateTemplate should update template successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update template successfully"},{"ancestorTitles":["AssetTemplateService","updateTemplate"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService updateTemplate should throw error if template not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if template not found"},{"ancestorTitles":["AssetTemplateService","updateTemplate"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService updateTemplate should prevent updating custom fields when template is in use","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should prevent updating custom fields when template is in use"},{"ancestorTitles":["AssetTemplateService","updateTemplate"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService updateTemplate should prevent updating category when template is in use","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should prevent updating category when template is in use"},{"ancestorTitles":["AssetTemplateService","updateTemplate"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService updateTemplate should allow updating name when template is in use","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow updating name when template is in use"},{"ancestorTitles":["AssetTemplateService","updateTemplate"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService updateTemplate should prevent duplicate names","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should prevent duplicate names"},{"ancestorTitles":["AssetTemplateService","deleteTemplate"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService deleteTemplate should delete template successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete template successfully"},{"ancestorTitles":["AssetTemplateService","deleteTemplate"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService deleteTemplate should throw error if template not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if template not found"},{"ancestorTitles":["AssetTemplateService","deleteTemplate"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService deleteTemplate should prevent deletion if template is in use","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should prevent deletion if template is in use"},{"ancestorTitles":["AssetTemplateService","cloneTemplate"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService cloneTemplate should clone template successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should clone template successfully"},{"ancestorTitles":["AssetTemplateService","cloneTemplate"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService cloneTemplate should clone with custom name","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should clone with custom name"},{"ancestorTitles":["AssetTemplateService","cloneTemplate"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService cloneTemplate should throw error if original template not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if original template not found"},{"ancestorTitles":["AssetTemplateService","cloneTemplate"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService cloneTemplate should throw error if clone name conflicts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if clone name conflicts"},{"ancestorTitles":["AssetTemplateService","findTemplates"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService findTemplates should return paginated templates","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return paginated templates"},{"ancestorTitles":["AssetTemplateService","findTemplates"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService findTemplates should filter by name","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter by name"},{"ancestorTitles":["AssetTemplateService","findTemplates"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService findTemplates should filter by category","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter by category"},{"ancestorTitles":["AssetTemplateService","findTemplates"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService findTemplates should filter by custom field existence","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter by custom field existence"},{"ancestorTitles":["AssetTemplateService","findTemplates"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService findTemplates should search within custom fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should search within custom fields"},{"ancestorTitles":["AssetTemplateService","findTemplates"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService findTemplates should include inactive templates when requested","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should include inactive templates when requested"},{"ancestorTitles":["AssetTemplateService","getTemplateStats"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService getTemplateStats should return template usage statistics","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return template usage statistics"},{"ancestorTitles":["AssetTemplateService","getTemplateStats"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService getTemplateStats should return zero stats for unused template","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return zero stats for unused template"},{"ancestorTitles":["AssetTemplateService","getTemplateStats"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService getTemplateStats should throw error if template not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if template not found"},{"ancestorTitles":["AssetTemplateService","validateCustomFieldValues"],"duration":3,"failureDetails":[{"statusCode":404,"code":"NOT_FOUND","name":"NotFoundError"}],"failureMessages":["NotFoundError: Asset template not found\n    at AssetTemplateService.validateCustomFieldValues (/home/topher/repos/asset-manager/backend/src/services/asset-template.service.ts:766:13)\n    at async Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/asset-template.service.test.ts:529:22)"],"fullName":"AssetTemplateService validateCustomFieldValues should validate correct values","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should validate correct values"},{"ancestorTitles":["AssetTemplateService","validateCustomFieldValues"],"duration":12,"failureDetails":[{"statusCode":404,"code":"NOT_FOUND","name":"NotFoundError"}],"failureMessages":["NotFoundError: Asset template not found\n    at AssetTemplateService.validateCustomFieldValues (/home/topher/repos/asset-manager/backend/src/services/asset-template.service.ts:766:13)\n    at async Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/asset-template.service.test.ts:546:22)"],"fullName":"AssetTemplateService validateCustomFieldValues should detect validation errors","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should detect validation errors"},{"ancestorTitles":["AssetTemplateService","validateCustomFieldValues"],"duration":11,"failureDetails":[{"statusCode":404,"code":"NOT_FOUND","name":"NotFoundError"}],"failureMessages":["NotFoundError: Asset template not found\n    at AssetTemplateService.validateCustomFieldValues (/home/topher/repos/asset-manager/backend/src/services/asset-template.service.ts:766:13)\n    at async Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/asset-template.service.test.ts:564:22)"],"fullName":"AssetTemplateService validateCustomFieldValues should handle empty schema","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle empty schema"},{"ancestorTitles":["AssetTemplateService","validateCustomFieldValues"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService validateCustomFieldValues should throw error if template not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if template not found"},{"ancestorTitles":["AssetTemplateService","exportTemplates"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService exportTemplates should export templates without organization-specific fields","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should export templates without organization-specific fields"},{"ancestorTitles":["AssetTemplateService","importTemplates"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService importTemplates should import new templates successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should import new templates successfully"},{"ancestorTitles":["AssetTemplateService","importTemplates"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService importTemplates should skip existing templates with skip strategy","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should skip existing templates with skip strategy"},{"ancestorTitles":["AssetTemplateService","importTemplates"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"AssetTemplateService importTemplates should rename conflicting templates with rename strategy","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should rename conflicting templates with rename strategy"}],"endTime":1751047456075,"message":"  ● AssetTemplateService › validateCustomFieldValues › should validate correct values\n\n    NotFoundError: Asset template not found\n\n      764 |\n      765 |     if (!template) {\n    > 766 |       throw new NotFoundError('Asset template');\n          |             ^\n      767 |     }\n      768 |\n      769 |     const schema = template.customFields as Record<string, unknown>;\n\n      at AssetTemplateService.validateCustomFieldValues (src/services/asset-template.service.ts:766:13)\n      at async Object.<anonymous> (src/test/unit/services/asset-template.service.test.ts:529:22)\n\n  ● AssetTemplateService › validateCustomFieldValues › should detect validation errors\n\n    NotFoundError: Asset template not found\n\n      764 |\n      765 |     if (!template) {\n    > 766 |       throw new NotFoundError('Asset template');\n          |             ^\n      767 |     }\n      768 |\n      769 |     const schema = template.customFields as Record<string, unknown>;\n\n      at AssetTemplateService.validateCustomFieldValues (src/services/asset-template.service.ts:766:13)\n      at async Object.<anonymous> (src/test/unit/services/asset-template.service.test.ts:546:22)\n\n  ● AssetTemplateService › validateCustomFieldValues › should handle empty schema\n\n    NotFoundError: Asset template not found\n\n      764 |\n      765 |     if (!template) {\n    > 766 |       throw new NotFoundError('Asset template');\n          |             ^\n      767 |     }\n      768 |\n      769 |     const schema = template.customFields as Record<string, unknown>;\n\n      at AssetTemplateService.validateCustomFieldValues (src/services/asset-template.service.ts:766:13)\n      at async Object.<anonymous> (src/test/unit/services/asset-template.service.test.ts:564:22)\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/asset-template.service.test.ts","startTime":1751047454726,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["TaskService","createTask"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TaskService createTask should create a task successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create a task successfully"},{"ancestorTitles":["TaskService","createTask"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"TaskService createTask should throw NotFoundError when organization does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundError when organization does not exist"},{"ancestorTitles":["TaskService","createTask"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"TaskService createTask should throw NotFoundError when asset does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundError when asset does not exist"},{"ancestorTitles":["TaskService","createTask"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TaskService createTask should throw ValidationError when assigned user does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw ValidationError when assigned user does not exist"},{"ancestorTitles":["TaskService","getTaskById"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"TaskService getTaskById should return task with relations","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return task with relations"},{"ancestorTitles":["TaskService","getTaskById"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"TaskService getTaskById should return null when task not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null when task not found"},{"ancestorTitles":["TaskService","updateTask"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"TaskService updateTask should update task successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update task successfully"},{"ancestorTitles":["TaskService","updateTask"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"TaskService updateTask should throw NotFoundError when task does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundError when task does not exist"},{"ancestorTitles":["TaskService","updateTask"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"TaskService updateTask should throw ConflictError for invalid status transition","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw ConflictError for invalid status transition"},{"ancestorTitles":["TaskService","updateTask"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"TaskService updateTask should set completedAt when status changes to DONE","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should set completedAt when status changes to DONE"},{"ancestorTitles":["TaskService","deleteTask"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"TaskService deleteTask should delete task successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete task successfully"},{"ancestorTitles":["TaskService","deleteTask"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"TaskService deleteTask should throw NotFoundError when task does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundError when task does not exist"},{"ancestorTitles":["TaskService","deleteTask"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"TaskService deleteTask should throw ConflictError when trying to delete task with active schedule","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw ConflictError when trying to delete task with active schedule"},{"ancestorTitles":["TaskService","findTasks"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"TaskService findTasks should return paginated tasks with filters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return paginated tasks with filters"},{"ancestorTitles":["TaskService","findTasks"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"TaskService findTasks should apply overdue filter correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should apply overdue filter correctly"},{"ancestorTitles":["TaskService","assignUsersToTask"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"TaskService assignUsersToTask should assign users to task successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should assign users to task successfully"},{"ancestorTitles":["TaskService","assignUsersToTask"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"TaskService assignUsersToTask should throw ValidationError when user does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw ValidationError when user does not exist"},{"ancestorTitles":["TaskService","addTaskComment"],"duration":3,"failureDetails":[{}],"failureMessages":["Error: Unmocked Prisma method called. Make sure to mock this method in your test.\n    at Proxy.fallbackMockImplementation (/home/topher/repos/asset-manager/backend/src/lib/__mocks__/prisma.ts:8:11)\n    at /home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:397:39\n    at Proxy.<anonymous> (/home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:404:13)\n    at Proxy.mockConstructor (/home/topher/repos/asset-manager/node_modules/jest-environment-node/node_modules/jest-mock/build/index.js:148:19)\n    at TaskService.createTaskComment (/home/topher/repos/asset-manager/backend/src/services/task.service.ts:1522:36)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/task.service.test.ts:589:40)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"TaskService addTaskComment should add comment to task successfully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should add comment to task successfully"},{"ancestorTitles":["TaskService","addTaskComment"],"duration":8,"failureDetails":[{"matcherResult":{"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at TaskService.createTaskComment (src/services/task.service.ts:1522:36)\n      at Object.<anonymous> (src/test/unit/services/task.service.test.ts:613:32)","pass":false},"message":"expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at TaskService.createTaskComment (src/services/task.service.ts:1522:36)\n      at Object.<anonymous> (src/test/unit/services/task.service.test.ts:613:32)"}],"failureMessages":["Error: expect(received).rejects.toThrow(expected)\n\nExpected constructor: NotFoundError\nReceived constructor: Error\n\nReceived message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at TaskService.createTaskComment (src/services/task.service.ts:1522:36)\n      at Object.<anonymous> (src/test/unit/services/task.service.test.ts:613:32)\n    at Object.toThrow (/home/topher/repos/asset-manager/node_modules/jest-circus/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/topher/repos/asset-manager/backend/src/test/unit/services/task.service.test.ts:613:72)\n    at Promise.then.completed (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/topher/repos/asset-manager/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:316:40)\n    at async _runTest (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:252:3)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:126:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async _runTestsForDescribeBlock (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:121:9)\n    at async run (/home/topher/repos/asset-manager/node_modules/jest-circus/build/run.js:71:3)\n    at async runAndTransformResultsToJestFormat (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at async jestAdapter (/home/topher/repos/asset-manager/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at async runTestInternal (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:367:16)\n    at async runTest (/home/topher/repos/asset-manager/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"TaskService addTaskComment should throw NotFoundError when task does not exist","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw NotFoundError when task does not exist"},{"ancestorTitles":["TaskService","getTaskStatistics"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"TaskService getTaskStatistics should return comprehensive task statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return comprehensive task statistics"},{"ancestorTitles":["TaskService","bulkUpdateTaskStatus"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"TaskService bulkUpdateTaskStatus should update multiple tasks successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update multiple tasks successfully"},{"ancestorTitles":["TaskService","bulkUpdateTaskStatus"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"TaskService bulkUpdateTaskStatus should handle mixed success and failure","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle mixed success and failure"}],"endTime":1751047457266,"message":"  ● TaskService › addTaskComment › should add comment to task successfully\n\n    Unmocked Prisma method called. Make sure to mock this method in your test.\n\n       6 | export const prisma = mockDeep<PrismaClient>({\n       7 |   fallbackMockImplementation: () => {\n    >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n         |           ^\n       9 |   },\n      10 | }) as DeepMockProxy<PrismaClient>;\n      11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at TaskService.createTaskComment (src/services/task.service.ts:1522:36)\n      at Object.<anonymous> (src/test/unit/services/task.service.test.ts:589:40)\n\n  ● TaskService › addTaskComment › should throw NotFoundError when task does not exist\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected constructor: NotFoundError\n    Received constructor: Error\n\n    Received message: \"Unmocked Prisma method called. Make sure to mock this method in your test.\"\n\n           6 | export const prisma = mockDeep<PrismaClient>({\n           7 |   fallbackMockImplementation: () => {\n        >  8 |     throw new Error('Unmocked Prisma method called. Make sure to mock this method in your test.');\n             |           ^\n           9 |   },\n          10 | }) as DeepMockProxy<PrismaClient>;\n          11 |\n\n      at Proxy.fallbackMockImplementation (src/lib/__mocks__/prisma.ts:8:11)\n      at TaskService.createTaskComment (src/services/task.service.ts:1522:36)\n      at Object.<anonymous> (src/test/unit/services/task.service.test.ts:613:32)\n      at Object.<anonymous> (src/test/unit/services/task.service.test.ts:613:72)\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/task.service.test.ts","startTime":1751047456077,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1751047480812,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/test/unit/services/calendar.icalendar.test.ts\u001b[0m:\u001b[93m6\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS6133: \u001b[0m'randomBytes' is declared but its value is never read.\n\n    \u001b[7m6\u001b[0m import { randomBytes } from 'crypto';\n    \u001b[7m \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/test/unit/services/calendar.icalendar.test.ts\u001b[0m:\u001b[93m35\u001b[0m:\u001b[93m63\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; userId: string; provider: string; accessToken: string; refreshToken: string; tokenExpiresAt: Date; syncEnabled: true; settings: { organizationId: string; }; lastSyncAt: null; createdAt: Date; updatedAt: Date; }' is not assignable to parameter of type '{ id: string; userId: string; createdAt: Date; updatedAt: Date; provider: string; accessToken: string; refreshToken: string; tokenExpiresAt: Date; calendarId: string | null; syncEnabled: boolean; lastSyncAt: Date | null; settings: JsonValue; } | Prisma__CalendarIntegrationClient<...>'.\n      Property 'calendarId' is missing in type '{ id: string; userId: string; provider: string; accessToken: string; refreshToken: string; tokenExpiresAt: Date; syncEnabled: true; settings: { organizationId: string; }; lastSyncAt: null; createdAt: Date; updatedAt: Date; }' but required in type '{ id: string; userId: string; createdAt: Date; updatedAt: Date; provider: string; accessToken: string; refreshToken: string; tokenExpiresAt: Date; calendarId: string | null; syncEnabled: boolean; lastSyncAt: Date | null; settings: JsonValue; }'.\n\n    \u001b[7m 35\u001b[0m       prismaMock.calendarIntegration.upsert.mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                                              ~\u001b[0m\n    \u001b[7m 36\u001b[0m         id: 'integration-123',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m 46\u001b[0m         updatedAt: new Date(),\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m 47\u001b[0m       });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n\n      \u001b[96m../node_modules/.prisma/client/index.d.ts\u001b[0m:\u001b[93m34289\u001b[0m:\u001b[93m7\u001b[0m\n        \u001b[7m34289\u001b[0m       calendarId: string | null\n        \u001b[7m     \u001b[0m \u001b[96m      ~~~~~~~~~~\u001b[0m\n        'calendarId' is declared here.\n    \u001b[96msrc/test/unit/services/calendar.icalendar.test.ts\u001b[0m:\u001b[93m86\u001b[0m:\u001b[93m66\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; userId: string; provider: string; accessToken: string; refreshToken: string; tokenExpiresAt: Date; syncEnabled: true; settings: { organizationId: string; }; lastSyncAt: null; createdAt: Date; updatedAt: Date; }' is not assignable to parameter of type '{ id: string; userId: string; createdAt: Date; updatedAt: Date; provider: string; accessToken: string; refreshToken: string; tokenExpiresAt: Date; calendarId: string | null; syncEnabled: boolean; lastSyncAt: Date | null; settings: JsonValue; } | Prisma__CalendarIntegrationClient<...> | null'.\n      Property 'calendarId' is missing in type '{ id: string; userId: string; provider: string; accessToken: string; refreshToken: string; tokenExpiresAt: Date; syncEnabled: true; settings: { organizationId: string; }; lastSyncAt: null; createdAt: Date; updatedAt: Date; }' but required in type '{ id: string; userId: string; createdAt: Date; updatedAt: Date; provider: string; accessToken: string; refreshToken: string; tokenExpiresAt: Date; calendarId: string | null; syncEnabled: boolean; lastSyncAt: Date | null; settings: JsonValue; }'.\n\n    \u001b[7m 86\u001b[0m       prismaMock.calendarIntegration.findFirst.mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                                                 ~\u001b[0m\n    \u001b[7m 87\u001b[0m         id: 'integration-123',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m 97\u001b[0m         updatedAt: new Date(),\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m 98\u001b[0m       });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n\n      \u001b[96m../node_modules/.prisma/client/index.d.ts\u001b[0m:\u001b[93m34289\u001b[0m:\u001b[93m7\u001b[0m\n        \u001b[7m34289\u001b[0m       calendarId: string | null\n        \u001b[7m     \u001b[0m \u001b[96m      ~~~~~~~~~~\u001b[0m\n        'calendarId' is declared here.\n    \u001b[96msrc/test/unit/services/calendar.icalendar.test.ts\u001b[0m:\u001b[93m106\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2322: \u001b[0mType '\"TODO\"' is not assignable to type 'TaskStatus'.\n\n    \u001b[7m106\u001b[0m           status: 'TODO',\n    \u001b[7m   \u001b[0m \u001b[91m          ~~~~~~\u001b[0m\n\n      \u001b[96m../node_modules/.prisma/client/index.d.ts\u001b[0m:\u001b[93m15480\u001b[0m:\u001b[93m7\u001b[0m\n        \u001b[7m15480\u001b[0m       status: $Enums.TaskStatus\n        \u001b[7m     \u001b[0m \u001b[96m      ~~~~~~\u001b[0m\n        The expected type comes from property 'status' which is declared here on type '{ id: string; organizationId: string; description: string | null; createdAt: Date; updatedAt: Date; status: TaskStatus; assetId: string | null; scheduleId: string | null; ... 14 more ...; googleEventId: string | null; }'\n    \u001b[96msrc/test/unit/services/calendar.icalendar.test.ts\u001b[0m:\u001b[93m110\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2322: \u001b[0mType 'number' is not assignable to type 'Decimal'.\n\n    \u001b[7m110\u001b[0m           estimatedCost: 100,\n    \u001b[7m   \u001b[0m \u001b[91m          ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96m../node_modules/.prisma/client/index.d.ts\u001b[0m:\u001b[93m15482\u001b[0m:\u001b[93m7\u001b[0m\n        \u001b[7m15482\u001b[0m       estimatedCost: Prisma.Decimal | null\n        \u001b[7m     \u001b[0m \u001b[96m      ~~~~~~~~~~~~~\u001b[0m\n        The expected type comes from property 'estimatedCost' which is declared here on type '{ id: string; organizationId: string; description: string | null; createdAt: Date; updatedAt: Date; status: TaskStatus; assetId: string | null; scheduleId: string | null; ... 14 more ...; googleEventId: string | null; }'\n    \u001b[96msrc/test/unit/services/calendar.icalendar.test.ts\u001b[0m:\u001b[93m224\u001b[0m:\u001b[93m66\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: string; userId: string; provider: string; accessToken: string; refreshToken: string; tokenExpiresAt: Date; syncEnabled: true; settings: {}; lastSyncAt: null; createdAt: Date; updatedAt: Date; }' is not assignable to parameter of type '{ id: string; userId: string; createdAt: Date; updatedAt: Date; provider: string; accessToken: string; refreshToken: string; tokenExpiresAt: Date; calendarId: string | null; syncEnabled: boolean; lastSyncAt: Date | null; settings: JsonValue; } | Prisma__CalendarIntegrationClient<...> | null'.\n      Property 'calendarId' is missing in type '{ id: string; userId: string; provider: string; accessToken: string; refreshToken: string; tokenExpiresAt: Date; syncEnabled: true; settings: {}; lastSyncAt: null; createdAt: Date; updatedAt: Date; }' but required in type '{ id: string; userId: string; createdAt: Date; updatedAt: Date; provider: string; accessToken: string; refreshToken: string; tokenExpiresAt: Date; calendarId: string | null; syncEnabled: boolean; lastSyncAt: Date | null; settings: JsonValue; }'.\n\n    \u001b[7m224\u001b[0m       prismaMock.calendarIntegration.findFirst.mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                                                 ~\u001b[0m\n    \u001b[7m225\u001b[0m         id: 'integration-123',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m235\u001b[0m         updatedAt: new Date(),\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m236\u001b[0m       });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n\n      \u001b[96m../node_modules/.prisma/client/index.d.ts\u001b[0m:\u001b[93m34289\u001b[0m:\u001b[93m7\u001b[0m\n        \u001b[7m34289\u001b[0m       calendarId: string | null\n        \u001b[7m     \u001b[0m \u001b[96m      ~~~~~~~~~~\u001b[0m\n        'calendarId' is declared here.\n","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/calendar.icalendar.test.ts","startTime":1751047480812,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["AppriseService","getInstance"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService getInstance should return singleton instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return singleton instance"},{"ancestorTitles":["AppriseService","isConfigured"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService isConfigured should return true when properly configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when properly configured"},{"ancestorTitles":["AppriseService","isConfigured"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService isConfigured should return false when API URL is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when API URL is missing"},{"ancestorTitles":["AppriseService","sendNotification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService sendNotification should send notification successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should send notification successfully"},{"ancestorTitles":["AppriseService","sendNotification"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService sendNotification should handle HTTP errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle HTTP errors"},{"ancestorTitles":["AppriseService","sendNotification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService sendNotification should return false when not configured","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return false when not configured"}],"endTime":1751047465574,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/apprise.service.simple.test.ts","startTime":1751047464511,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["PermissionManager","Basic Permission Checks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Basic Permission Checks should grant VIEWER read permissions for assets","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should grant VIEWER read permissions for assets"},{"ancestorTitles":["PermissionManager","Basic Permission Checks"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Basic Permission Checks should deny VIEWER write permissions for assets","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should deny VIEWER write permissions for assets"},{"ancestorTitles":["PermissionManager","Basic Permission Checks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Basic Permission Checks should grant MEMBER create permissions for assets","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should grant MEMBER create permissions for assets"},{"ancestorTitles":["PermissionManager","Basic Permission Checks"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Basic Permission Checks should grant MANAGER read permissions for all assets","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should grant MANAGER read permissions for all assets"},{"ancestorTitles":["PermissionManager","Basic Permission Checks"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Basic Permission Checks should grant OWNER manage permissions for all resources","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should grant OWNER manage permissions for all resources"},{"ancestorTitles":["PermissionManager","Scope-based Permissions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Scope-based Permissions should allow MEMBER to update own assets","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow MEMBER to update own assets"},{"ancestorTitles":["PermissionManager","Scope-based Permissions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Scope-based Permissions should deny MEMBER to update others assets","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should deny MEMBER to update others assets"},{"ancestorTitles":["PermissionManager","Scope-based Permissions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Scope-based Permissions should allow MANAGER to update any assets","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow MANAGER to update any assets"},{"ancestorTitles":["PermissionManager","Organization Constraints"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Organization Constraints should deny access to resources from different organization","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should deny access to resources from different organization"},{"ancestorTitles":["PermissionManager","Organization Constraints"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Organization Constraints should allow access to resources from same organization","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow access to resources from same organization"},{"ancestorTitles":["PermissionManager","Role Hierarchy"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Role Hierarchy should inherit permissions from lower roles","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should inherit permissions from lower roles"},{"ancestorTitles":["PermissionManager","Role Hierarchy"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Role Hierarchy should allow role assumption down the hierarchy","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should allow role assumption down the hierarchy"},{"ancestorTitles":["PermissionManager","Role Hierarchy"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Role Hierarchy should deny role assumption up the hierarchy","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should deny role assumption up the hierarchy"},{"ancestorTitles":["PermissionManager","Manage Permissions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Manage Permissions should treat manage as including all CRUD operations","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should treat manage as including all CRUD operations"},{"ancestorTitles":["PermissionManager","Attribute Filtering"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Attribute Filtering should filter attributes with wildcard and exclusions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter attributes with wildcard and exclusions"},{"ancestorTitles":["PermissionManager","Attribute Filtering"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Attribute Filtering should filter attributes with explicit inclusion","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter attributes with explicit inclusion"},{"ancestorTitles":["PermissionManager","Role Capabilities"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Role Capabilities should return correct capabilities for VIEWER","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return correct capabilities for VIEWER"},{"ancestorTitles":["PermissionManager","Role Capabilities"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Role Capabilities should return correct capabilities for OWNER","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return correct capabilities for OWNER"},{"ancestorTitles":["PermissionManager","Role Capabilities"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Role Capabilities should return available actions for role on resource","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return available actions for role on resource"},{"ancestorTitles":["PermissionManager","Permission String Validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Permission String Validation should handle permission strings with scope","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle permission strings with scope"},{"ancestorTitles":["PermissionManager","Permission String Validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Permission String Validation should handle permission strings without scope","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle permission strings without scope"},{"ancestorTitles":["PermissionManager","Permission String Validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager Permission String Validation should fall back from own to any scope","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fall back from own to any scope"}],"endTime":1751047466637,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/lib/permissions.test.ts","startTime":1751047465576,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Validation Schemas","commonSchemas","email validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas email validation should validate correct email format","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate correct email format"},{"ancestorTitles":["Validation Schemas","commonSchemas","email validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas email validation should reject invalid email formats","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should reject invalid email formats"},{"ancestorTitles":["Validation Schemas","commonSchemas","email validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas email validation should reject emails that are too long","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject emails that are too long"},{"ancestorTitles":["Validation Schemas","commonSchemas","password validation"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas password validation should validate strong passwords","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate strong passwords"},{"ancestorTitles":["Validation Schemas","commonSchemas","password validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas password validation should reject weak passwords","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should reject weak passwords"},{"ancestorTitles":["Validation Schemas","commonSchemas","password validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas password validation should reject passwords that are too long","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject passwords that are too long"},{"ancestorTitles":["Validation Schemas","commonSchemas","UUID validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas UUID validation should validate correct UUID format","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate correct UUID format"},{"ancestorTitles":["Validation Schemas","commonSchemas","UUID validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas UUID validation should reject invalid UUID formats","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should reject invalid UUID formats"},{"ancestorTitles":["Validation Schemas","commonSchemas","name validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas name validation should validate correct names","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should validate correct names"},{"ancestorTitles":["Validation Schemas","commonSchemas","name validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas name validation should reject names with invalid characters","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should reject names with invalid characters"},{"ancestorTitles":["Validation Schemas","commonSchemas","name validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas name validation should reject empty names","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject empty names"},{"ancestorTitles":["Validation Schemas","commonSchemas","TOTP token validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas TOTP token validation should validate correct TOTP tokens","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate correct TOTP tokens"},{"ancestorTitles":["Validation Schemas","commonSchemas","TOTP token validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas commonSchemas TOTP token validation should reject invalid TOTP tokens","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should reject invalid TOTP tokens"},{"ancestorTitles":["Validation Schemas","authSchemas","register schema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas register schema should validate correct registration data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct registration data"},{"ancestorTitles":["Validation Schemas","authSchemas","register schema"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas register schema should validate registration without optional fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate registration without optional fields"},{"ancestorTitles":["Validation Schemas","authSchemas","register schema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas register schema should reject registration without required fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject registration without required fields"},{"ancestorTitles":["Validation Schemas","authSchemas","login schema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas login schema should validate correct login data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct login data"},{"ancestorTitles":["Validation Schemas","authSchemas","login schema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas login schema should validate login with TOTP token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate login with TOTP token"},{"ancestorTitles":["Validation Schemas","authSchemas","login schema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas login schema should reject login without required fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject login without required fields"},{"ancestorTitles":["Validation Schemas","authSchemas","changePassword schema"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas changePassword schema should validate correct password change data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct password change data"},{"ancestorTitles":["Validation Schemas","authSchemas","changePassword schema"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas changePassword schema should reject password change with weak new password","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject password change with weak new password"},{"ancestorTitles":["Validation Schemas","authSchemas","createApiToken schema"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas createApiToken schema should validate correct API token data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct API token data"},{"ancestorTitles":["Validation Schemas","authSchemas","createApiToken schema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas createApiToken schema should validate API token without expiration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate API token without expiration"},{"ancestorTitles":["Validation Schemas","authSchemas","createApiToken schema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas authSchemas createApiToken schema should reject API token with invalid name","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject API token with invalid name"},{"ancestorTitles":["Validation Schemas","userSchemas","create schema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas userSchemas create schema should validate correct user creation data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct user creation data"},{"ancestorTitles":["Validation Schemas","userSchemas","create schema"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas userSchemas create schema should validate user creation without optional fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate user creation without optional fields"},{"ancestorTitles":["Validation Schemas","userSchemas","create schema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas userSchemas create schema should reject user creation with invalid role","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject user creation with invalid role"},{"ancestorTitles":["Validation Schemas","userSchemas","update schema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas userSchemas update schema should validate correct user update data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct user update data"},{"ancestorTitles":["Validation Schemas","userSchemas","update schema"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas userSchemas update schema should validate empty update data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate empty update data"},{"ancestorTitles":["Validation Schemas","userSchemas","params schema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas userSchemas params schema should validate correct user params","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct user params"},{"ancestorTitles":["Validation Schemas","userSchemas","params schema"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas userSchemas params schema should reject invalid user ID format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject invalid user ID format"},{"ancestorTitles":["Validation Schemas","organizationSchemas","update schema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas organizationSchemas update schema should validate correct organization update data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct organization update data"},{"ancestorTitles":["Validation Schemas","organizationSchemas","update schema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas organizationSchemas update schema should reject organization update with invalid name","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject organization update with invalid name"},{"ancestorTitles":["Validation Schemas","organizationSchemas","setOwner schema"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas organizationSchemas setOwner schema should validate correct set owner data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct set owner data"},{"ancestorTitles":["Validation Schemas","organizationSchemas","setOwner schema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas organizationSchemas setOwner schema should reject invalid user ID","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject invalid user ID"},{"ancestorTitles":["Validation Schemas","organizationSchemas","params schema"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas organizationSchemas params schema should validate correct organization params","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate correct organization params"},{"ancestorTitles":["Validation Schemas","organizationSchemas","params schema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validation Schemas organizationSchemas params schema should reject invalid organization ID format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject invalid organization ID format"}],"endTime":1751047467716,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/utils/validation.test.ts","startTime":1751047466639,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["AuthService","authenticate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService authenticate should authenticate user successfully without 2FA","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should authenticate user successfully without 2FA"},{"ancestorTitles":["AuthService","authenticate"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AuthService authenticate should throw error for invalid credentials","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid credentials"},{"ancestorTitles":["AuthService","authenticate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService authenticate should throw error for inactive user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for inactive user"},{"ancestorTitles":["AuthService","authenticate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService authenticate should require TOTP when enabled but not provided","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should require TOTP when enabled but not provided"},{"ancestorTitles":["AuthService","authenticate"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService authenticate should authenticate with valid TOTP","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should authenticate with valid TOTP"},{"ancestorTitles":["AuthService","authenticate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService authenticate should throw error for invalid TOTP","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid TOTP"},{"ancestorTitles":["AuthService","authenticate"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AuthService authenticate should throw error for TOTP enabled but no secret","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for TOTP enabled but no secret"},{"ancestorTitles":["AuthService","generateTokens"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService generateTokens should generate valid token pair","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should generate valid token pair"},{"ancestorTitles":["AuthService","generateTokens"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService generateTokens should throw error when JWT secrets not configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when JWT secrets not configured"},{"ancestorTitles":["AuthService","generateTokens"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService generateTokens should throw error when JWT refresh secret not configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when JWT refresh secret not configured"},{"ancestorTitles":["AuthService","refreshToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService refreshToken should refresh token successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should refresh token successfully"},{"ancestorTitles":["AuthService","refreshToken"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AuthService refreshToken should throw error for invalid refresh token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid refresh token"},{"ancestorTitles":["AuthService","refreshToken"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AuthService refreshToken should throw error for non-existent session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for non-existent session"},{"ancestorTitles":["AuthService","refreshToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService refreshToken should throw error for expired session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for expired session"},{"ancestorTitles":["AuthService","refreshToken"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService refreshToken should throw error for inactive user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for inactive user"},{"ancestorTitles":["AuthService","refreshToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService refreshToken should throw error when JWT refresh secret not configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when JWT refresh secret not configured"},{"ancestorTitles":["AuthService","verifyToken"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AuthService verifyToken should verify token successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should verify token successfully"},{"ancestorTitles":["AuthService","verifyToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService verifyToken should throw error for invalid token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid token"},{"ancestorTitles":["AuthService","verifyToken"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService verifyToken should throw error for non-existent user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for non-existent user"},{"ancestorTitles":["AuthService","verifyToken"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService verifyToken should throw error for inactive user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for inactive user"},{"ancestorTitles":["AuthService","verifyToken"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AuthService verifyToken should throw error when JWT secret not configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when JWT secret not configured"},{"ancestorTitles":["AuthService","setupTOTP"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService setupTOTP should setup TOTP successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should setup TOTP successfully"},{"ancestorTitles":["AuthService","setupTOTP"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService setupTOTP should throw error for non-existent user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for non-existent user"},{"ancestorTitles":["AuthService","setupTOTP"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AuthService setupTOTP should throw error if TOTP already enabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if TOTP already enabled"},{"ancestorTitles":["AuthService","enableTOTP"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService enableTOTP should enable TOTP successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should enable TOTP successfully"},{"ancestorTitles":["AuthService","enableTOTP"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService enableTOTP should throw error for non-existent user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for non-existent user"},{"ancestorTitles":["AuthService","enableTOTP"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AuthService enableTOTP should throw error if TOTP setup not initiated","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if TOTP setup not initiated"},{"ancestorTitles":["AuthService","enableTOTP"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService enableTOTP should throw error if TOTP already enabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if TOTP already enabled"},{"ancestorTitles":["AuthService","enableTOTP"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService enableTOTP should throw error for invalid TOTP code","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid TOTP code"},{"ancestorTitles":["AuthService","disableTOTP"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"AuthService disableTOTP should disable TOTP successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should disable TOTP successfully"},{"ancestorTitles":["AuthService","disableTOTP"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AuthService disableTOTP should throw error for non-existent user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for non-existent user"},{"ancestorTitles":["AuthService","disableTOTP"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService disableTOTP should throw error if TOTP not enabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if TOTP not enabled"},{"ancestorTitles":["AuthService","disableTOTP"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AuthService disableTOTP should throw error for invalid password","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid password"},{"ancestorTitles":["AuthService","logout"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService logout should logout successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should logout successfully"},{"ancestorTitles":["AuthService","logoutAll"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService logoutAll should logout from all devices successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should logout from all devices successfully"},{"ancestorTitles":["AuthService","generatePasswordResetToken"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AuthService generatePasswordResetToken should generate password reset token for existing user","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate password reset token for existing user"},{"ancestorTitles":["AuthService","generatePasswordResetToken"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService generatePasswordResetToken should return generic response for non-existent user","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return generic response for non-existent user"},{"ancestorTitles":["AuthService","validateSession"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"AuthService validateSession should validate session successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate session successfully"},{"ancestorTitles":["AuthService","validateSession"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService validateSession should return null for non-existent session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for non-existent session"},{"ancestorTitles":["AuthService","validateSession"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService validateSession should return null for expired session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for expired session"},{"ancestorTitles":["AuthService","getUserSessions"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"AuthService getUserSessions should get user sessions successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get user sessions successfully"},{"ancestorTitles":["AuthService","revokeSession"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AuthService revokeSession should revoke session successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should revoke session successfully"}],"endTime":1751047468968,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/auth.service.test.ts","startTime":1751047467724,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["WebhookService","createWebhook"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService createWebhook should create a webhook successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create a webhook successfully"},{"ancestorTitles":["WebhookService","createWebhook"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService createWebhook should generate a secret if not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate a secret if not provided"},{"ancestorTitles":["WebhookService","updateWebhook"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService updateWebhook should update webhook successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update webhook successfully"},{"ancestorTitles":["WebhookService","updateWebhook"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService updateWebhook should return null if webhook not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if webhook not found"},{"ancestorTitles":["WebhookService","deleteWebhook"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService deleteWebhook should delete webhook successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should delete webhook successfully"},{"ancestorTitles":["WebhookService","deleteWebhook"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService deleteWebhook should return false if webhook not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false if webhook not found"},{"ancestorTitles":["WebhookService","emitEvent"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService emitEvent should queue webhook jobs for active webhooks","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should queue webhook jobs for active webhooks"},{"ancestorTitles":["WebhookService","emitEvent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService emitEvent should not fail if no webhooks are found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not fail if no webhooks are found"},{"ancestorTitles":["WebhookService","deliverWebhook"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService deliverWebhook should deliver webhook successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should deliver webhook successfully"},{"ancestorTitles":["WebhookService","deliverWebhook"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService deliverWebhook should handle delivery failure","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle delivery failure"},{"ancestorTitles":["WebhookService","deliverWebhook"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService deliverWebhook should throw error if webhook is inactive","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if webhook is inactive"},{"ancestorTitles":["WebhookService","testWebhook"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService testWebhook should deliver test webhook","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should deliver test webhook"},{"ancestorTitles":["WebhookService","testWebhook"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"WebhookService testWebhook should throw error if webhook not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if webhook not found"}],"endTime":1751047470114,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/webhook.service.test.ts","startTime":1751047468970,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["OrganizationService","createOrganization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService createOrganization should create an organization successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create an organization successfully"},{"ancestorTitles":["OrganizationService","getOrganizationById"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService getOrganizationById should return organization if found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return organization if found"},{"ancestorTitles":["OrganizationService","getOrganizationById"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService getOrganizationById should return null if organization not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if organization not found"},{"ancestorTitles":["OrganizationService","updateOrganization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService updateOrganization should update organization successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update organization successfully"},{"ancestorTitles":["OrganizationService","updateOrganization"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService updateOrganization should throw error if organization not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if organization not found"},{"ancestorTitles":["OrganizationService","setOwner"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService setOwner should set owner successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should set owner successfully"},{"ancestorTitles":["OrganizationService","setOwner"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService setOwner should throw error if organization not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if organization not found"},{"ancestorTitles":["OrganizationService","setOwner"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService setOwner should throw error if user not found in organization","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if user not found in organization"},{"ancestorTitles":["OrganizationService","getMembers"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService getMembers should return organization members","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return organization members"},{"ancestorTitles":["OrganizationService","getStatistics"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService getStatistics should return organization statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return organization statistics"},{"ancestorTitles":["OrganizationService","getStatistics"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService getStatistics should throw error if organization not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if organization not found"},{"ancestorTitles":["OrganizationService","deleteOrganization"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService deleteOrganization should delete organization successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete organization successfully"},{"ancestorTitles":["OrganizationService","deleteOrganization"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"OrganizationService deleteOrganization should throw error if organization not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if organization not found"}],"endTime":1751047471225,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/organization.service.test.ts","startTime":1751047470124,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Prisma Mock Test"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Prisma Mock Test prismaMock should be defined and mockable","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"prismaMock should be defined and mockable"},{"ancestorTitles":["UserService","createUser"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserService createUser should create a user successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create a user successfully"},{"ancestorTitles":["UserService","createUser"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"UserService createUser should throw error if user already exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if user already exists"},{"ancestorTitles":["UserService","createUser"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"UserService createUser should throw error if organization does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if organization does not exist"},{"ancestorTitles":["UserService","getUserById"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserService getUserById should return user if found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return user if found"},{"ancestorTitles":["UserService","getUserById"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserService getUserById should return null if user not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if user not found"},{"ancestorTitles":["UserService","verifyPassword"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"UserService verifyPassword should return user if password is valid","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return user if password is valid"},{"ancestorTitles":["UserService","verifyPassword"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"UserService verifyPassword should return null if password is invalid","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if password is invalid"},{"ancestorTitles":["UserService","verifyPassword"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserService verifyPassword should return null if user not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if user not found"},{"ancestorTitles":["UserService","verifyPassword"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserService verifyPassword should return null if user is inactive","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if user is inactive"},{"ancestorTitles":["UserService","updatePassword"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"UserService updatePassword should update password successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update password successfully"},{"ancestorTitles":["UserService","updatePassword"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserService updatePassword should throw error if current password is incorrect","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if current password is incorrect"},{"ancestorTitles":["UserService","findByOrganization"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"UserService findByOrganization should return paginated users","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return paginated users"},{"ancestorTitles":["UserService","generateApiToken"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"UserService generateApiToken should generate and hash API token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate and hash API token"},{"ancestorTitles":["UserService","validateApiToken"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"UserService validateApiToken should return user if token is valid","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return user if token is valid"},{"ancestorTitles":["UserService","validateApiToken"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"UserService validateApiToken should return null if token is invalid","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return null if token is invalid"}],"endTime":1751047473930,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/user.service.test.ts","startTime":1751047471227,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Auth Utils","generateTokens"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils generateTokens should generate access and refresh tokens","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate access and refresh tokens"},{"ancestorTitles":["Auth Utils","generateTokens"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils generateTokens should generate tokens with correct payload structure","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate tokens with correct payload structure"},{"ancestorTitles":["Auth Utils","verifyAccessToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils verifyAccessToken should verify valid access token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should verify valid access token"},{"ancestorTitles":["Auth Utils","verifyAccessToken"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils verifyAccessToken should throw error for invalid token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for invalid token"},{"ancestorTitles":["Auth Utils","verifyAccessToken"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils verifyAccessToken should throw error for expired token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for expired token"},{"ancestorTitles":["Auth Utils","verifyAccessToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils verifyAccessToken should throw error for malformed token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for malformed token"},{"ancestorTitles":["Auth Utils","verifyRefreshToken"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils verifyRefreshToken should verify valid refresh token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should verify valid refresh token"},{"ancestorTitles":["Auth Utils","verifyRefreshToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils verifyRefreshToken should throw error for invalid refresh token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for invalid refresh token"},{"ancestorTitles":["Auth Utils","verifyRefreshToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils verifyRefreshToken should use correct secret for refresh token verification","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use correct secret for refresh token verification"},{"ancestorTitles":["Auth Utils","generateQRCode"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils generateQRCode should generate QR code data URL","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate QR code data URL"},{"ancestorTitles":["Auth Utils","generateQRCode"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils generateQRCode should handle QR code generation errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle QR code generation errors"},{"ancestorTitles":["Auth Utils","generateQRCode"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils generateQRCode should call toDataURL with correct URL","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should call toDataURL with correct URL"},{"ancestorTitles":["Auth Utils","generateQRCode"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils generateQRCode should generate QR code for TOTP URLs with special characters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate QR code for TOTP URLs with special characters"},{"ancestorTitles":["Auth Utils","Token integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils Token integration should generate and verify tokens end-to-end","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should generate and verify tokens end-to-end"},{"ancestorTitles":["Auth Utils","Token integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Auth Utils Token integration should reject tokens signed with wrong secret","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject tokens signed with wrong secret"}],"endTime":1751047474993,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/utils/auth.test.ts","startTime":1751047473932,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["TaskService - Status Transition Logic","validateStatusTransition (private method testing via updateTask)"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic validateStatusTransition (private method testing via updateTask) should allow valid status transitions","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should allow valid status transitions"},{"ancestorTitles":["TaskService - Status Transition Logic","validateStatusTransition (private method testing via updateTask)"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic validateStatusTransition (private method testing via updateTask) should reject invalid status transitions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should reject invalid status transitions"},{"ancestorTitles":["TaskService - Status Transition Logic","validateStatusTransition (private method testing via updateTask)"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic validateStatusTransition (private method testing via updateTask) should allow same status (no change)","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should allow same status (no change)"},{"ancestorTitles":["TaskService - Status Transition Logic","Error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic Error handling should throw NotFoundError for appropriate cases","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundError for appropriate cases"},{"ancestorTitles":["TaskService - Status Transition Logic","Error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic Error handling should throw ConflictError for appropriate cases","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw ConflictError for appropriate cases"},{"ancestorTitles":["TaskService - Status Transition Logic","Error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic Error handling should throw ValidationError for appropriate cases","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw ValidationError for appropriate cases"},{"ancestorTitles":["TaskService - Status Transition Logic","Service instantiation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic Service instantiation should create TaskService instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create TaskService instance"},{"ancestorTitles":["TaskService - Status Transition Logic","Service instantiation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic Service instantiation should have required methods","invocations":1,"location":null,"numPassingAsserts":13,"retryReasons":[],"status":"passed","title":"should have required methods"},{"ancestorTitles":["TaskService - Status Transition Logic","Interface compliance"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TaskService - Status Transition Logic Interface compliance should have all required interfaces defined","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should have all required interfaces defined"}],"endTime":1751047476060,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/task.service.simple.test.ts","startTime":1751047474995,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["AppriseService","Configuration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService Configuration should initialize as disabled when no API URL is provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize as disabled when no API URL is provided"},{"ancestorTitles":["AppriseService","Configuration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService Configuration should initialize as enabled when API URL is provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize as enabled when API URL is provided"},{"ancestorTitles":["AppriseService","Configuration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService Configuration should parse notification URLs correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should parse notification URLs correctly"},{"ancestorTitles":["AppriseService","Configuration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService Configuration should parse tags configuration correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should parse tags configuration correctly"},{"ancestorTitles":["AppriseService","sendNotification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService sendNotification should send notification successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should send notification successfully"},{"ancestorTitles":["AppriseService","sendNotification"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService sendNotification should return false when API returns non-success status","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when API returns non-success status"},{"ancestorTitles":["AppriseService","sendNotification"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService sendNotification should return false when API call fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when API call fails"},{"ancestorTitles":["AppriseService","sendNotification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService sendNotification should skip notification when not configured","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should skip notification when not configured"},{"ancestorTitles":["AppriseService","testConfiguration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService testConfiguration should return true when API is reachable","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return true when API is reachable"},{"ancestorTitles":["AppriseService","testConfiguration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService testConfiguration should return false when API is not reachable","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when API is not reachable"},{"ancestorTitles":["AppriseService","Helper methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService Helper methods should send alert with correct type and tags","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should send alert with correct type and tags"},{"ancestorTitles":["AppriseService","Helper methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AppriseService Helper methods should send info notification with correct type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should send info notification with correct type"}],"endTime":1751047477126,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/apprise.service.test.ts","startTime":1751047476061,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["OIDCService","isAvailable"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService isAvailable should return true when properly configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when properly configured"},{"ancestorTitles":["OIDCService","isAvailable"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService isAvailable should return false when not configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when not configured"},{"ancestorTitles":["OIDCService","generateAuthorizationUrl"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService generateAuthorizationUrl should generate authorization URL successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate authorization URL successfully"},{"ancestorTitles":["OIDCService","exchangeCodeForTokens"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService exchangeCodeForTokens should exchange code for tokens successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should exchange code for tokens successfully"},{"ancestorTitles":["OIDCService","exchangeCodeForTokens"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService exchangeCodeForTokens should throw error for invalid state parameter","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid state parameter"},{"ancestorTitles":["OIDCService","getUserInfo"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService getUserInfo should get user info successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get user info successfully"},{"ancestorTitles":["OIDCService","refreshTokens"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService refreshTokens should refresh tokens successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should refresh tokens successfully"},{"ancestorTitles":["OIDCService","generateLogoutUrl"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService generateLogoutUrl should generate logout URL successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate logout URL successfully"},{"ancestorTitles":["OIDCService","generateLogoutUrl"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OIDCService generateLogoutUrl should generate logout URL without optional parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate logout URL without optional parameters"}],"endTime":1751047478186,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/oidc.service.test.ts","startTime":1751047477128,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["RBAC Auth Middleware","requirePermission middleware"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requirePermission middleware should call next() when permission is granted","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call next() when permission is granted"},{"ancestorTitles":["RBAC Auth Middleware","requirePermission middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requirePermission middleware should call next() with AuthorizationError when permission is denied","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call next() with AuthorizationError when permission is denied"},{"ancestorTitles":["RBAC Auth Middleware","requirePermission middleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requirePermission middleware should call next() with AuthenticationError when user is not authenticated","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call next() with AuthenticationError when user is not authenticated"},{"ancestorTitles":["RBAC Auth Middleware","requirePermission middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requirePermission middleware should include resource ownership information from params","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should include resource ownership information from params"},{"ancestorTitles":["RBAC Auth Middleware","requirePermission middleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requirePermission middleware should store allowed attributes when includeAttributes is true","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should store allowed attributes when includeAttributes is true"},{"ancestorTitles":["RBAC Auth Middleware","requireManagePermission middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requireManagePermission middleware should check for manage permission with any scope","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should check for manage permission with any scope"},{"ancestorTitles":["RBAC Auth Middleware","requireManagePermission middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requireManagePermission middleware should deny access when manage permission is not granted","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should deny access when manage permission is not granted"},{"ancestorTitles":["RBAC Auth Middleware","requireOwnership middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requireOwnership middleware should allow access when user owns the resource","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should allow access when user owns the resource"},{"ancestorTitles":["RBAC Auth Middleware","requireOwnership middleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requireOwnership middleware should deny access when user does not own the resource","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should deny access when user does not own the resource"},{"ancestorTitles":["RBAC Auth Middleware","requireOwnership middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requireOwnership middleware should allow access for OWNER role even if not resource owner","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should allow access for OWNER role even if not resource owner"},{"ancestorTitles":["RBAC Auth Middleware","requireOwnership middleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requireOwnership middleware should call next() with AuthenticationError when user is not authenticated","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should call next() with AuthenticationError when user is not authenticated"},{"ancestorTitles":["RBAC Auth Middleware","requireOwnership middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requireOwnership middleware should call next() with AuthorizationError when resource owner is not specified","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should call next() with AuthorizationError when resource owner is not specified"},{"ancestorTitles":["RBAC Auth Middleware","requireOwnership middleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware requireOwnership middleware should use custom resource owner field","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use custom resource owner field"},{"ancestorTitles":["RBAC Auth Middleware","Permission context setup"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"RBAC Auth Middleware Permission context setup should have permission context set by authentication middleware","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should have permission context set by authentication middleware"}],"endTime":1751047479245,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/middleware/auth-rbac.test.ts","startTime":1751047478187,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Schedule-Task Integration","Task template validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Task template validation should validate valid task template structure","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate valid task template structure"},{"ancestorTitles":["Schedule-Task Integration","Task template validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Task template validation should identify invalid task template","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should identify invalid task template"},{"ancestorTitles":["Schedule-Task Integration","Schedule type handling"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Schedule type handling should handle ONE_OFF schedule types","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle ONE_OFF schedule types"},{"ancestorTitles":["Schedule-Task Integration","Schedule type handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Schedule type handling should handle FIXED_INTERVAL schedule types","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle FIXED_INTERVAL schedule types"},{"ancestorTitles":["Schedule-Task Integration","Schedule type handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Schedule type handling should handle CUSTOM schedule types","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle CUSTOM schedule types"},{"ancestorTitles":["Schedule-Task Integration","Task priority mapping"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Task priority mapping should handle all valid task priorities","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle all valid task priorities"},{"ancestorTitles":["Schedule-Task Integration","Task priority mapping"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Task priority mapping should default to MEDIUM priority","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should default to MEDIUM priority"},{"ancestorTitles":["Schedule-Task Integration","Data type conversions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Data type conversions should handle string to number conversions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle string to number conversions"},{"ancestorTitles":["Schedule-Task Integration","Data type conversions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Data type conversions should handle array validation","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle array validation"},{"ancestorTitles":["Schedule-Task Integration","Error handling scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Error handling scenarios should handle null or undefined templates gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle null or undefined templates gracefully"},{"ancestorTitles":["Schedule-Task Integration","Error handling scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Schedule-Task Integration Error handling scenarios should validate required fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate required fields"}],"endTime":1751047480301,"message":"","name":"/home/topher/repos/asset-manager/backend/src/test/unit/services/schedule-task-integration.test.ts","startTime":1751047479247,"status":"passed","summary":""}],"wasInterrupted":false}
