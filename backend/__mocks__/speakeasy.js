// Mock speakeasy module for testing
const speakeasy = jest.createMockFromModule('speakeasy');

// Mock implementation that accepts test tokens
speakeasy.generateSecret = jest.fn(() => ({
  base32: 'JBSWY3DPEHPK3PXP',
  otpauth_url: 'otpauth://totp/test@example.com?secret=JBSWY3DPEHPK3PXP&issuer=DumbAssets%20Enhanced'
}));

// Mock the totp function that generates tokens
speakeasy.totp = jest.fn((options) => {
  // Generate deterministic test tokens based on secret and time
  const time = options.time || Math.floor(Date.now() / 1000);
  const secret = options.secret || 'JBSWY3DPEHPK3PXP';
  
  // Create a simple deterministic 6-digit numeric token based on time and secret
  const hash = require('crypto').createHash('md5').update(`${secret}-${Math.floor(time / 30)}`).digest('hex');
  const numericHash = parseInt(hash.slice(0, 8), 16);
  return String(numericHash % 1000000).padStart(6, '0');
});

// Add the verify method as a property of the totp function
speakeasy.totp.verify = jest.fn((options) => {
  // Only accept tokens that would be generated by our mock totp function
  const expectedToken = speakeasy.totp({
    secret: options.secret,
    time: options.time || Math.floor(Date.now() / 1000)
  });
  
  return options.token === expectedToken;
});

module.exports = speakeasy;