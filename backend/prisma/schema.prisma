// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  OWNER
  MANAGER
  MEMBER
  VIEWER
}

enum TaskStatus {
  PLANNED
  IN_PROGRESS
  DONE
  SKIPPED
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

enum ScheduleType {
  ONE_OFF
  FIXED_INTERVAL
  CUSTOM
}

enum AssetCategory {
  HARDWARE
  SOFTWARE
  FURNITURE
  VEHICLE
  EQUIPMENT
  PROPERTY
  OTHER
}

enum AssetStatus {
  OPERATIONAL
  MAINTENANCE
  REPAIR
  RETIRED
  DISPOSED
  LOST
}

// Phase 3: Advanced Capabilities Enums
enum NotificationChannel {
  IN_APP
  EMAIL
  PUSH
  WEBHOOK
  APPRISE
}

enum NotificationType {
  task_assigned    @map("task-assigned")
  task_due         @map("task-due")
  task_overdue     @map("task-overdue")
  asset_warranty_expiring @map("asset-warranty-expiring")
  asset_maintenance_due   @map("asset-maintenance-due")
  schedule_changed @map("schedule-changed")
  mention
  invitation
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum ActivityAction {
  CREATE
  UPDATE
  DELETE
  ASSIGN
  COMPLETE
  COMMENT
  MENTION
  ATTACH
}

enum ActivityEntityType {
  ASSET
  TASK
  SCHEDULE
  USER
  COMMENT
}

enum WebhookEventType {
  task_created    @map("task.created")
  task_updated    @map("task.updated")
  task_completed  @map("task.completed")
  task_assigned   @map("task.assigned")
  task_deleted   @map("task.deleted")
  task_overdue   @map("task.overdue")
  asset_created   @map("asset.created")
  asset_updated   @map("asset.updated")
  asset_deleted   @map("asset.deleted")
  schedule_created @map("schedule.created")
  schedule_updated @map("schedule.updated")
  schedule_deleted @map("schedule.deleted")
  schedule_triggered @map("schedule.triggered")
  user_invited    @map("user.invited")
  user_joined     @map("user.joined")
  user_deactivated @map("user.deactivated")
  maintenance_started @map("maintenance.started")
  maintenance_completed @map("maintenance.completed")
  warranty_expiring @map("warranty.expiring")
  warranty_expired @map("warranty.expired")
  audit_created   @map("audit.created")
  report_generated @map("report.generated")
  report_scheduled @map("report.scheduled")
  backup_created  @map("backup.created")
  backup_restored @map("backup.restored")
  sync_completed  @map("sync.completed")
  gdpr_export_requested @map("gdpr.export_requested")
  gdpr_deletion_requested @map("gdpr.deletion_requested")
}

// Core entities for Phase 1

model Organization {
  id          String   @id @default(uuid())
  name        String
  ownerUserId String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner           User?             @relation("OrganizationOwner", fields: [ownerUserId], references: [id])
  users           User[]            @relation("OrganizationMembers")
  assets          Asset[]
  tasks           Task[]
  locations       Location[]
  assetTemplates  AssetTemplate[]
  schedules       Schedule[]
  notifications   Notification[]
  userInvitations UserInvitation[]
  activityStreams ActivityStream[]
  activities      Activity[]
  webhookSubscriptions WebhookSubscription[]
  scheduledReports ScheduledReport[]
  reportHistory   ReportHistory[]

  @@map("organizations")
}

model User {
  id                      String   @id @default(uuid())
  email                   String   @unique
  passwordHash            String? // Optional for OIDC-only users
  role                    UserRole @default(MEMBER)
  firstName               String?
  lastName                String?
  fullName                String?
  avatarUrl               String?
  lastActiveAt            DateTime?
  organizationId          String
  totpSecret              String? // For 2FA
  totpEnabled             Boolean  @default(false)
  emailVerified           Boolean  @default(false)
  isActive                Boolean  @default(true)
  notificationPreferences Json     @default("{}")
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  organization        Organization      @relation("OrganizationMembers", fields: [organizationId], references: [id], onDelete: Cascade)
  ownedOrganization   Organization?     @relation("OrganizationOwner")
  taskAssignments     TaskAssignment[]
  taskComments        TaskComment[]
  sessions            Session[]
  apiTokens           ApiToken[]
  taskAttachments     TaskAttachment[]
  assetAttachments    AssetAttachment[]
  notifications       Notification[]
  invitationsSent     UserInvitation[]  @relation("InvitedBy")
  activityStreams     ActivityStream[]   @relation("actor")
  notificationPrefs   UserNotificationPreference[]
  calendarIntegrations CalendarIntegration[]
  mentions            Mention[]
  googleCredentials   GoogleCredentials?
  pushSubscriptions   PushSubscription[]
  auditEntries        AuditTrail[]
  customReports       CustomReport[]
  syncClients         SyncClient[]
  scheduledReports    ScheduledReport[]
  reportHistory       ReportHistory[]

  @@map("users")
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  token        String   @unique
  refreshToken String?  @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("sessions")
}

model ApiToken {
  id          String    @id @default(uuid())
  userId      String
  name        String
  token       String    @unique
  tokenPrefix String?   @db.VarChar(8)
  lastUsed    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([tokenPrefix])
  @@map("api_tokens")
}

// Phase 2: Core functionality models

model Location {
  id             String   @id @default(uuid())
  organizationId String
  name           String
  description    String?
  parentId       String?
  path           String   // Materialized path for efficient querying
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parent       Location?    @relation("LocationHierarchy", fields: [parentId], references: [id])
  children     Location[]   @relation("LocationHierarchy")
  assets       Asset[]

  @@unique([organizationId, name, parentId])
  @@index([organizationId])
  @@index([parentId])
  @@index([path])
  @@map("locations")
}

model AssetTemplate {
  id             String        @id @default(uuid())
  organizationId String
  name           String
  category       AssetCategory
  description    String?
  defaultFields  Json          @default("{}")
  customFields   Json          @default("{}")
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assets       Asset[]

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([category])
  @@map("asset_templates")
}

model Asset {
  id                      String        @id @default(uuid())
  organizationId          String
  name                    String
  category                AssetCategory
  status                  AssetStatus   @default(OPERATIONAL)
  assetTemplateId         String?
  locationId              String?
  parentId                String? // For asset hierarchy
  path                    String // Materialized path for efficient querying
  manufacturer            String?
  modelNumber             String?
  serialNumber            String?
  purchaseDate            DateTime?
  purchasePrice           Decimal?      @db.Decimal(10, 2)
  description             String?
  link                    String?
  tags                    String[]
  warrantyScope           String?
  warrantyExpiry          DateTime?
  warrantyLifetime        Boolean       @default(false)
  secondaryWarrantyScope  String?
  secondaryWarrantyExpiry DateTime?
  customFields            Json?
  photoPath               String? // Path to main photo
  receiptPath             String? // Path to receipt
  manualPath              String? // Path to manual
  qrCode                  String?       @unique
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  organization    Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assetTemplate   AssetTemplate?    @relation(fields: [assetTemplateId], references: [id], onDelete: SetNull)
  location        Location?         @relation(fields: [locationId], references: [id], onDelete: SetNull)
  parent          Asset?            @relation("AssetHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children        Asset[]           @relation("AssetHierarchy")
  components      Component[]
  tasks           Task[]
  schedules       Schedule[]
  attachments     AssetAttachment[]
  notifications   Notification[]
  usageCounters   UsageCounter[]

  @@index([organizationId])
  @@index([category])
  @@index([locationId])
  @@index([assetTemplateId])
  @@index([qrCode])
  @@map("assets")
}

// Components (sub-assets)
model Component {
  id               String    @id @default(uuid())
  assetId          String
  parentId         String? // For sub-components
  name             String
  manufacturer     String?
  modelNumber      String?
  serialNumber     String?
  purchaseDate     DateTime?
  purchasePrice    Decimal?  @db.Decimal(10, 2)
  description      String?
  link             String?
  tags             String[]
  warrantyScope    String?
  warrantyExpiry   DateTime?
  warrantyLifetime Boolean   @default(false)
  photoPath        String?
  receiptPath      String?
  manualPath       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  asset    Asset       @relation(fields: [assetId], references: [id], onDelete: Cascade)
  parent   Component?  @relation("ComponentHierarchy", fields: [parentId], references: [id])
  children Component[] @relation("ComponentHierarchy")

  @@index([assetId])
  @@index([parentId])
  @@map("components")
}

// Basic task management for Phase 1
model Task {
  id               String       @id @default(uuid())
  organizationId   String
  assetId          String?
  scheduleId       String?
  parentTaskId     String?      // For subtasks
  title            String
  description      String?
  dueDate          DateTime
  status           TaskStatus   @default(PLANNED)
  priority         TaskPriority @default(MEDIUM)
  estimatedCost    Decimal?     @db.Decimal(10, 2)
  actualCost       Decimal?     @db.Decimal(10, 2)
  estimatedMinutes Int?
  actualMinutes    Int?
  completedAt      DateTime?
  skippedAt        DateTime?
  subtaskOrder     Int          @default(0)
  completionRequirements Json   @default("{}")
  isPhotoRequired  Boolean      @default(false)
  checklistItems   Json         @default("[]")
  googleEventId    String?      // Google Calendar event ID
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  organization  Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  asset         Asset?           @relation(fields: [assetId], references: [id], onDelete: SetNull)
  schedule      Schedule?        @relation(fields: [scheduleId], references: [id], onDelete: SetNull)
  parentTask    Task?            @relation("TaskSubtasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subtasks      Task[]           @relation("TaskSubtasks")
  assignments   TaskAssignment[]
  comments      TaskComment[]
  attachments   TaskAttachment[]
  notifications Notification[]
  calendarSyncs TaskCalendarSync[]

  @@index([organizationId])
  @@index([assetId])
  @@index([scheduleId])
  @@index([dueDate])
  @@index([status])
  @@index([parentTaskId])
  @@map("tasks")
}

model TaskAssignment {
  id         String   @id @default(uuid())
  taskId     String
  userId     String
  assignedAt DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@index([taskId])
  @@index([userId])
  @@map("task_assignments")
}

model TaskComment {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task     Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  mentions Mention[]

  @@index([taskId])
  @@index([userId])
  @@map("task_comments")
}

model TaskAttachment {
  id               String   @id @default(uuid())
  taskId           String
  uploadedByUserId String
  originalFilename String
  storedFilename   String
  fileSizeBytes    Int
  mimeType         String
  uploadDate       DateTime @default(now())

  task       Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploadedBy User @relation(fields: [uploadedByUserId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([uploadedByUserId])
  @@map("task_attachments")
}

// Phase 2: Enhanced scheduling and notifications

model Schedule {
  id                 String       @id @default(uuid())
  organizationId     String
  assetId            String?
  name               String
  description        String?
  scheduleType       ScheduleType
  type               String?      // Additional type field for new schedule types
  startDate          DateTime
  endDate            DateTime?
  intervalDays       Int?
  intervalMonths     Int?
  customRrule        String?
  recurrenceRule     String?      // For calendar-based schedules
  monthlyDayOfMonth  Int?         // For monthly schedules (1-31)
  seasonalMonths     Json?        // Array of months for seasonal schedules
  usageThreshold     Float?       // For usage-based schedules
  currentUsage       Float?       @default(0)
  lastRunAt          DateTime?    // When tasks were last generated
  nextRunAt          DateTime?    // When tasks will next be generated
  nextOccurrence     DateTime?
  lastOccurrence     DateTime?
  isActive           Boolean      @default(true)
  taskTemplate       Json
  autoCreateAdvance  Int          @default(7) // Days in advance
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  organization  Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  asset         Asset?         @relation(fields: [assetId], references: [id], onDelete: SetNull)
  tasks         Task[]
  notifications Notification[]
  rules         ScheduleRule[]
  dependencies  ScheduleDependency[] @relation("ScheduleDependencies")
  dependents    ScheduleDependency[] @relation("ScheduleDependents")
  usageCounters UsageCounter[]

  @@index([organizationId])
  @@index([assetId])
  @@index([nextOccurrence])
  @@index([isActive])
  @@map("schedules")
}

model Notification {
  id             String               @id @default(uuid())
  organizationId String
  userId         String
  assetId        String?
  taskId         String?
  scheduleId     String?
  type           String
  title          String
  message        String
  data           Json?
  channel        NotificationChannel? @default(IN_APP)
  sendInApp      Boolean             @default(true)
  sendEmail      Boolean             @default(false)
  sendPush       Boolean             @default(false)
  isRead         Boolean             @default(false)
  readAt         DateTime?
  createdAt      DateTime            @default(now())

  organization Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset        Asset?             @relation(fields: [assetId], references: [id], onDelete: SetNull)
  task         Task?              @relation(fields: [taskId], references: [id], onDelete: SetNull)
  schedule     Schedule?          @relation(fields: [scheduleId], references: [id], onDelete: SetNull)
  queueItems   NotificationQueue[]

  @@index([organizationId])
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

model AssetAttachment {
  id               String   @id @default(uuid())
  assetId          String
  uploadedByUserId String
  originalFilename String
  storedFilename   String
  filePath         String
  fileSizeBytes    Int
  mimeType         String
  attachmentType   String // 'photo', 'receipt', 'manual', 'other'
  isPrimary        Boolean  @default(false)
  uploadDate       DateTime @default(now())

  asset      Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)
  uploadedBy User  @relation(fields: [uploadedByUserId], references: [id], onDelete: Restrict)

  @@index([assetId])
  @@index([uploadedByUserId])
  @@index([attachmentType])
  @@map("asset_attachments")
}

// Schema migration tracking
model SchemaMigration {
  id        String   @id @default(uuid())
  version   String   @unique
  name      String
  appliedAt DateTime @default(now())
  checksum  String

  @@map("schema_migrations")
}

// Phase 3: Advanced Capabilities Models

model UsageCounter {
  id            String    @id @default(uuid())
  assetId       String
  scheduleId    String?
  counterType   String    // hours_used, cycles_completed, etc.
  currentValue  Float     @default(0)
  lastUpdatedAt DateTime  @default(now())
  lastResetAt   DateTime?
  resetValue    Float?    @default(0)
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  asset    Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)
  schedule Schedule? @relation(fields: [scheduleId], references: [id], onDelete: SetNull)

  @@unique([assetId, counterType])
  @@index([assetId])
  @@index([scheduleId])
  @@map("usage_counters")
}

model ScheduleRule {
  id         String   @id @default(uuid())
  scheduleId String
  ruleType   String   // blackout_dates, business_days_only, dependency
  ruleConfig Json     // Flexible configuration for different rule types
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  schedule Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduleId])
  @@map("schedule_rules")
}

model ScheduleDependency {
  id                  String   @id @default(uuid())
  scheduleId          String
  dependsOnScheduleId String
  offsetDays          Int?     @default(0) // Days after dependency completion
  createdAt           DateTime @default(now())

  schedule   Schedule @relation("ScheduleDependencies", fields: [scheduleId], references: [id], onDelete: Cascade)
  dependsOn  Schedule @relation("ScheduleDependents", fields: [dependsOnScheduleId], references: [id], onDelete: Cascade)

  @@index([scheduleId])
  @@index([dependsOnScheduleId])
  @@map("schedule_dependencies")
}

model UserInvitation {
  id               String           @id @default(uuid())
  organizationId   String
  email            String
  role             UserRole         @default(MEMBER)
  invitedByUserId  String
  token            String           @unique
  status           InvitationStatus @default(PENDING)
  expiresAt        DateTime
  acceptedAt       DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy    User         @relation("InvitedBy", fields: [invitedByUserId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([email])
  @@map("user_invitations")
}

model ActivityStream {
  id             String             @id @default(uuid())
  organizationId String
  userId         String
  action         ActivityAction
  entityType     ActivityEntityType
  entityId       String
  entityName     String?
  metadata       Json?              @default("{}")
  createdAt      DateTime           @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  actor        User         @relation("actor", fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("activity_streams")
}

model UserNotificationPreference {
  id               String              @id @default(uuid())
  userId           String
  channel          NotificationChannel
  notificationType NotificationType
  isEnabled        Boolean             @default(true)
  settings         Json?               @default("{}") // Channel-specific settings
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, channel, notificationType])
  @@map("user_notification_preferences")
}

model NotificationQueue {
  id             String              @id @default(uuid())
  notificationId String
  channel        NotificationChannel
  recipientId    String              // Could be userId, email, webhook URL, etc.
  payload        Json
  status         String              @default("PENDING") // PENDING, SENT, FAILED
  attempts       Int                 @default(0)
  lastAttemptAt  DateTime?
  sentAt         DateTime?
  error          String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([notificationId])
  @@index([status])
  @@map("notification_queue")
}

model WebhookSubscription {
  id             String   @id @default(uuid())
  organizationId String
  name           String
  url            String
  secret         String   // For signing payloads
  events         String[] // Array of WebhookEventType
  isActive       Boolean  @default(true)
  headers        Json?    @default("{}") // Custom headers to include
  retryPolicy    Json?    @default("{\"maxRetries\":3,\"retryDelayMs\":1000,\"backoffMultiplier\":2}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  deliveries   WebhookDelivery[]

  @@index([organizationId])
  @@map("webhook_subscriptions")
}

model CalendarIntegration {
  id              String    @id @default(uuid())
  userId          String
  provider        String    @default("google") // For future providers
  accessToken     String
  refreshToken    String
  tokenExpiresAt  DateTime
  calendarId      String?
  syncEnabled     Boolean   @default(true)
  lastSyncAt      DateTime?
  settings        Json?     @default("{}")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskSyncs    TaskCalendarSync[]

  @@unique([userId, provider])
  @@map("calendar_integrations")
}

model TaskCalendarSync {
  id                    String   @id @default(uuid())
  taskId                String
  calendarIntegrationId String
  externalEventId       String
  lastSyncedAt          DateTime @default(now())
  syncHash              String?  // To detect changes
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  task                Task                @relation(fields: [taskId], references: [id], onDelete: Cascade)
  calendarIntegration CalendarIntegration @relation(fields: [calendarIntegrationId], references: [id], onDelete: Cascade)

  @@unique([taskId, calendarIntegrationId])
  @@map("task_calendar_sync")
}

model Mention {
  id               String   @id @default(uuid())
  commentId        String
  mentionedUserId  String
  notificationSent Boolean  @default(false)
  createdAt        DateTime @default(now())

  comment      TaskComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  mentionedUser User       @relation(fields: [mentionedUserId], references: [id], onDelete: Cascade)

  @@index([commentId])
  @@index([mentionedUserId])
  @@map("mentions")
}

model Activity {
  id                String   @id @default(uuid())
  eventId           String   @unique // For idempotency
  organizationId    String
  
  // Actor (who performed the action)
  actorType         String   // 'User'
  actorId           String   
  actorName         String   // Denormalized for historical accuracy
  
  // Verb (what action was performed)
  verb              String   // 'created', 'updated', 'deleted', 'completed', 'commented', 'assigned', 'mentioned'
  
  // Object (what was acted upon)
  objectType        String   // 'Task', 'Asset', 'Schedule', 'Comment', 'AssetTemplate'
  objectId          String
  objectDisplayName String   // Denormalized display name at time of action
  
  // Target (context - project, asset, etc.)
  targetType        String?  // 'Asset', 'Schedule', 'Project'
  targetId          String?
  targetDisplayName String?
  
  // Event metadata and changes
  metadata          Json?    // Contains changeset for updates, additional context
  
  timestamp         DateTime // Populated by the worker from the event payload
  createdAt         DateTime @default(now())
  
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([organizationId, targetType, targetId])
  @@index([organizationId, actorId])
  @@index([organizationId, objectType, objectId])
  @@index([organizationId, timestamp(sort: Desc)]) // For fetching latest activities per org
  @@map("activities")
}

model GoogleCredentials {
  id           String   @id @default(uuid())
  userId       String   @unique // Each user has one set of Google credentials
  accessToken  String   @db.Text // Encrypted
  refreshToken String   @db.Text // Encrypted
  expiryDate   DateTime
  scope        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("google_credentials")
}
model PushSubscription {
  id        String   @id @default(uuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to User
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
  @@map("push_subscriptions")
}

model WebhookDelivery {
  id             String   @id @default(uuid())
  webhookId      String
  eventId        String
  eventType      String
  url            String
  status         String   @default("pending") // pending, success, failed
  statusCode     Int?
  responseBody   String?  @db.Text
  error          String?  @db.Text
  attemptCount   Int      @default(0)
  lastAttemptAt  DateTime?
  nextRetryAt    DateTime?
  createdAt      DateTime @default(now())
  
  webhook        WebhookSubscription @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  
  @@index([webhookId])
  @@index([status])
  @@index([eventType])
  @@index([createdAt(sort: Desc)])
  @@map("webhook_deliveries")
}

// Phase 4: Dashboards, Reporting, and Audit Trail

// Enum for the type of action being audited
enum ActionType {
  CREATE
  UPDATE
  DELETE
  UPDATE_MANY
  DELETE_MANY
}

// Enum for the frequency of scheduled reports
enum ReportFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

// Enum for report types
enum ReportType {
  ASSET
  TASK
  USER
  MAINTENANCE
  COST_ANALYSIS
  USAGE_STATISTICS
  CUSTOM
}

// Enum for report status
enum ReportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  EXPIRED
}

model AuditTrail {
  id        String     @id @default(uuid())
  model     String     // e.g., "Asset", "User", "Task"
  recordId  String     // The ID of the record that was changed
  action    ActionType
  oldValue  Json?      @db.JsonB // State before the change (null for CREATE)
  newValue  Json?      @db.JsonB // State after the change (null for DELETE)
  userId    String     // ID of the user performing the action
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())

  // Indexes for common query patterns
  @@index([model, recordId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_trail")
}

model CustomReport {
  id            String            @id @default(uuid())
  name          String
  description   String?
  configuration Json              @db.JsonB // Stores filters, columns, groupings, etc.
  ownerId       String
  owner         User              @relation(fields: [ownerId], references: [id])
  schedules     ScheduledReport[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([ownerId])
  @@map("custom_reports")
}

model ScheduledReport {
  id              String          @id @default(uuid())
  organizationId  String
  createdById     String
  name            String
  description     String?
  type            String          // 'asset', 'task', 'user', 'custom'
  format          String          // 'pdf', 'csv', 'xlsx'
  schedule        Json            // Schedule configuration
  recipients      String[]        // Array of email addresses
  filters         Json?           // Report filters
  enabled         Boolean         @default(true)
  lastRunAt       DateTime?
  nextRunAt       DateTime
  customReportId  String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy       User            @relation(fields: [createdById], references: [id])
  report          CustomReport?   @relation(fields: [customReportId], references: [id])
  reportHistory   ReportHistory[]

  @@index([nextRunAt, enabled]) // For the scheduler worker to find jobs
  @@index([organizationId])
  @@index([customReportId])
  @@map("scheduled_reports")
}

model ReportHistory {
  id                String           @id @default(uuid())
  organizationId    String
  generatedById     String
  type              String           // 'asset', 'task', 'user', 'custom'
  format            String           // 'pdf', 'csv', 'xlsx'
  parameters        Json             // Report parameters and filters
  filePath          String           // Path to generated file
  fileSize          BigInt
  recordCount       Int
  generatedAt       DateTime
  scheduledReportId String?          // NULL for one-time reports
  createdAt         DateTime         @default(now())

  organization      Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  generatedBy       User             @relation(fields: [generatedById], references: [id])
  scheduledReport   ScheduledReport? @relation(fields: [scheduledReportId], references: [id], onDelete: SetNull)

  @@index([organizationId])
  @@index([generatedById])
  @@index([generatedAt])
  @@index([scheduledReportId])
  @@map("report_history")
}

// PWA Offline Sync Models

enum SyncStatus {
  PENDING
  SYNCING
  COMPLETED
  FAILED
  CONFLICT
}

enum ConflictResolution {
  CLIENT_WINS
  SERVER_WINS
  MANUAL
  MERGE
}

enum SyncOperation {
  CREATE
  UPDATE
  DELETE
}

// Tracks sync state for each client device
model SyncClient {
  id              String   @id @default(uuid())
  userId          String
  deviceId        String   // Unique device identifier from PWA
  deviceName      String?  // Human-readable device name
  lastSyncAt      DateTime?
  syncToken       String?  // Token for incremental sync
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  syncQueues      SyncQueue[]
  syncMetadata    SyncMetadata[]

  @@unique([userId, deviceId])
  @@index([userId])
  @@index([lastSyncAt])
  @@map("sync_clients")
}

// Queue for pending sync operations from offline clients
model SyncQueue {
  id              String          @id @default(uuid())
  clientId        String
  entityType      String          // 'asset', 'task', 'schedule', etc.
  entityId        String
  operation       SyncOperation
  payload         Json            // The actual data to sync
  clientVersion   Int             // Version number from client
  status          SyncStatus      @default(PENDING)
  conflictData    Json?           // Store conflict info if detected
  resolution      ConflictResolution?
  retryCount      Int             @default(0)
  errorMessage    String?
  createdAt       DateTime        @default(now())
  processedAt     DateTime?

  client          SyncClient      @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, status])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("sync_queue")
}

// Metadata for tracking entity versions and sync state
model SyncMetadata {
  id              String   @id @default(uuid())
  entityType      String   // 'asset', 'task', 'schedule', etc.
  entityId        String
  version         Int      @default(1)
  lastModifiedBy  String   // userId
  lastModifiedAt  DateTime @default(now())
  checksum        String?  // For integrity checking
  deletedAt       DateTime? // Soft delete tracking for sync
  clientId        String?  // Track which client made the change

  client          SyncClient? @relation(fields: [clientId], references: [id], onDelete: SetNull)

  @@unique([entityType, entityId])
  @@index([entityType, lastModifiedAt])
  @@index([deletedAt])
  @@map("sync_metadata")
}

// Conflict resolution history
model SyncConflict {
  id              String             @id @default(uuid())
  entityType      String
  entityId        String
  clientVersion   Int
  serverVersion   Int
  clientData      Json
  serverData      Json
  resolution      ConflictResolution
  resolvedBy      String?            // userId who resolved manual conflicts
  resolvedAt      DateTime?
  createdAt       DateTime           @default(now())

  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("sync_conflicts")
}

